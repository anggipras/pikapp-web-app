[{"D:\\PIKAPP\\pikapp-web\\src\\index.js":"1","D:\\PIKAPP\\pikapp-web\\src\\Master\\StoreLayout.js":"2","D:\\PIKAPP\\pikapp-web\\src\\Master\\StatusLayout.js":"3","D:\\PIKAPP\\pikapp-web\\src\\Master\\AuthLayout.js":"4","D:\\PIKAPP\\pikapp-web\\src\\Master\\CartLayout.js":"5","D:\\PIKAPP\\pikapp-web\\src\\Master\\ProductLayout.js":"6","D:\\PIKAPP\\pikapp-web\\src\\Master\\ProfileLayout.js":"7","D:\\PIKAPP\\pikapp-web\\src\\Master\\MainNavigation.js":"8","D:\\PIKAPP\\pikapp-web\\src\\Master\\DetailNavigation.js":"9","D:\\PIKAPP\\pikapp-web\\src\\Asset\\Constant\\ColorConstant.js":"10","D:\\PIKAPP\\pikapp-web\\src\\View\\Status\\StatusView.js":"11","D:\\PIKAPP\\pikapp-web\\src\\View\\Cart\\CartView.js":"12","D:\\PIKAPP\\pikapp-web\\src\\View\\Store\\StoreView.js":"13","D:\\PIKAPP\\pikapp-web\\src\\View\\Auth\\FormView.js":"14","D:\\PIKAPP\\pikapp-web\\src\\View\\Main\\JumbotronView.js":"15","D:\\PIKAPP\\pikapp-web\\src\\View\\Product\\ProductView.js":"16","D:\\PIKAPP\\pikapp-web\\src\\View\\Profile\\ProfileView.js":"17","D:\\PIKAPP\\pikapp-web\\src\\Asset\\Constant\\APIConstant.js":"18","D:\\PIKAPP\\pikapp-web\\src\\Component\\Modal\\PikaModal.js":"19","D:\\PIKAPP\\pikapp-web\\src\\Component\\Modal\\CartModal.js":"20","D:\\PIKAPP\\pikapp-web\\src\\Component\\TextField\\PikaTextField.js":"21","D:\\PIKAPP\\pikapp-web\\src\\Component\\Button\\PikaButton.js":"22","D:\\PIKAPP\\pikapp-web\\src\\Master\\MerchantQR.js":"23","D:\\PIKAPP\\pikapp-web\\src\\Master\\ProductLayoutDev.js":"24","D:\\PIKAPP\\pikapp-web\\src\\View\\Product\\ProductViewDev.js":"25"},{"size":1983,"mtime":1613707421281,"results":"26","hashOfConfig":"27"},{"size":650,"mtime":1613639488753,"results":"28","hashOfConfig":"27"},{"size":865,"mtime":1612764764407,"results":"29","hashOfConfig":"27"},{"size":1283,"mtime":1613110403125,"results":"30","hashOfConfig":"27"},{"size":1002,"mtime":1613016028722,"results":"31","hashOfConfig":"27"},{"size":657,"mtime":1612974647029,"results":"32","hashOfConfig":"27"},{"size":660,"mtime":1613704716159,"results":"33","hashOfConfig":"27"},{"size":1089,"mtime":1612764764403,"results":"34","hashOfConfig":"27"},{"size":803,"mtime":1612764764402,"results":"35","hashOfConfig":"27"},{"size":80,"mtime":1613624163792,"results":"36","hashOfConfig":"27"},{"size":25071,"mtime":1612764764423,"results":"37","hashOfConfig":"27"},{"size":16857,"mtime":1613470887643,"results":"38","hashOfConfig":"27"},{"size":7842,"mtime":1613725401687,"results":"39","hashOfConfig":"27"},{"size":13807,"mtime":1613717566461,"results":"40","hashOfConfig":"27"},{"size":831,"mtime":1612767468534,"results":"41","hashOfConfig":"27"},{"size":15313,"mtime":1613017864447,"results":"42","hashOfConfig":"27"},{"size":5909,"mtime":1613704800802,"results":"43","hashOfConfig":"27"},{"size":785,"mtime":1612932988048,"results":"44","hashOfConfig":"27"},{"size":4960,"mtime":1612764764394,"results":"45","hashOfConfig":"27"},{"size":2200,"mtime":1613017207414,"results":"46","hashOfConfig":"27"},{"size":415,"mtime":1612764764396,"results":"47","hashOfConfig":"27"},{"size":298,"mtime":1612764764390,"results":"48","hashOfConfig":"27"},{"size":4699,"mtime":1613723183756,"results":"49","hashOfConfig":"27"},{"size":392,"mtime":1613624593181,"results":"50","hashOfConfig":"27"},{"size":28114,"mtime":1613726556030,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"gu5h4g",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},"D:\\PIKAPP\\pikapp-web\\src\\index.js",[],["112","113"],"D:\\PIKAPP\\pikapp-web\\src\\Master\\StoreLayout.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\StatusLayout.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\AuthLayout.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\CartLayout.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\ProductLayout.js",[],["114","115"],"D:\\PIKAPP\\pikapp-web\\src\\Master\\ProfileLayout.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\MainNavigation.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\DetailNavigation.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Asset\\Constant\\ColorConstant.js",[],"D:\\PIKAPP\\pikapp-web\\src\\View\\Status\\StatusView.js",["116","117","118","119"],"import React from \"react\";\r\nimport { Row, Col, Nav, Card, Modal } from \"react-bootstrap\";\r\nimport unpaidIcon from \"../../Asset/Icon/unpaid_status.png\";\r\nimport unpaidActiveIcon from \"../../Asset/Icon/unpaid_active_status.png\";\r\nimport packIcon from \"../../Asset/Icon/pack_status.png\";\r\nimport packActiveIcon from \"../../Asset/Icon/pack_active_status.png\";\r\nimport sendIcon from \"../../Asset/Icon/send_status.png\";\r\nimport sendActiveIcon from \"../../Asset/Icon/send_active_status.png\";\r\nimport reviewIcon from \"../../Asset/Icon/review_status.png\";\r\nimport reviewActiveIcon from \"../../Asset/Icon/review_active_status.png\";\r\nimport placeholderIcon from \"../../Asset/Icon/placeholder_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport categoryFoodIcon from \"../../Asset/Icon/category_food_icon.png\";\r\nimport pickupStatusIcon from \"../../Asset/Icon/pickup_status_icon.png\";\r\nimport cashierStatusIcon from \"../../Asset/Icon/cashier_icon.png\"\r\nimport ovoIcon from \"../../Asset/Icon/ovo_icon.png\";\r\nimport { PikaButton } from \"../../Component/Button/PikaButton\";\r\nimport Axios from \"axios\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport Cookies from \"js-cookie\"\r\n\r\nexport class StatusView extends React.Component {\r\n  state = {\r\n    showModal: false,\r\n    activeTab: 1,\r\n    data: [\r\n      {\r\n        title: \"\",\r\n        distance: \"\",\r\n        quantity: \"\",\r\n        status: \"\",\r\n        biz_type: \"\",\r\n        payment: \"\",\r\n        transactionId: \"\",\r\n        transactionTime: \"\",\r\n      },\r\n    ],\r\n    currentModal: {\r\n      transactionId: \"\",\r\n      transactionTime:\"\",\r\n      storeName: \"Store\",\r\n      storeLocation: \"Location\",\r\n      storeDistance: \"Distance\",\r\n      status: \"Status\",\r\n      payment: \"Cash\",\r\n      biz_type: \"\",\r\n      food: [\r\n        {\r\n          productId: \"\",\r\n          name: \"\",\r\n          price: 0,\r\n          image: \"\",\r\n          note: \"\",\r\n          quantity: 1,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n  handleDetail(transId) {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/\" + transId + \"/txn-detail/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var resultModal = {...this.currentModal}\r\n        resultModal.transactionId = results.transaction_id\r\n        resultModal.transactionTime = results.transaction_time\r\n        resultModal.storeName = results.merchant_name\r\n        resultModal.storeDistance = \"\"\r\n        resultModal.storeLocation = \"\"\r\n        resultModal.status = results.status\r\n        resultModal.biz_type = results.biz_type\r\n        resultModal.payment = results.payment_with\r\n        resultModal.food = []\r\n        results.detail_products.forEach((product) => {\r\n          resultModal.food.push({\r\n            name: product.product_name,\r\n            price: product.price,\r\n            quantity: product.qty,\r\n            image: product.image,\r\n            note: product.notes\r\n          })\r\n        })\r\n        this.setState({\r\n          currentModal: resultModal\r\n        })\r\n      })\r\n      .catch((err) => {\r\n      });\r\n      \r\n    this.setModal(true);\r\n  }\r\n\r\n  handleSelect(tabIndex) {\r\n    this.setState({ activeTab: tabIndex });\r\n  }\r\n\r\n  componentDidMount() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/txn-history/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var stateData = {...this.state}\r\n        stateData.data.pop()\r\n        results.forEach((result) => {\r\n          stateData.data.push({\r\n            title: result.merchant_name,\r\n            distance: \"\",\r\n            quantity: result.total_product,\r\n            status: result.status,\r\n            biz_type: result.biz_type,\r\n            payment: result.payment_with,\r\n            transactionId: result.transaction_id,\r\n            transactionTime: result.transaction_time,\r\n          })\r\n        })\r\n        this.setState({data: stateData.data});\r\n      })\r\n      .catch((err) => {\r\n      });\r\n    // var state = { ...this.state };\r\n    // state.data.pop();\r\n    // state.data.push({\r\n    //   title: \"Food1\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food4\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food2\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"pick\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food3\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"send\",\r\n    // });\r\n    // this.setState({ data: state.data });\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    let modalList = this.state.currentModal.food;\r\n\r\n    let modalListView = modalList.map((data) => {\r\n      return (\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={placeholderIcon} class=\"statusFoodIcon\" alt=\"food icon\"/>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodname\">{data.name}</p>\r\n                <p class=\"statusFoodPrice\">\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(data.price)}\r\n                </p>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodQuantity\">{data.quantity}x</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <p class=\"statusFoodNote\">Catatan: {data.note}</p>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    });\r\n    let currentTotal = 0;\r\n    modalList.forEach((data) => {\r\n      currentTotal = currentTotal + data.price * data.quantity;\r\n    });\r\n    if (this.state.showModal === true) {\r\n      let payImage;\r\n      let payLabel;\r\n      if(this.state.currentModal.payment === \"PAY_BY_CASHIER\") {\r\n        payImage = cashierStatusIcon;\r\n        payLabel = \"Cashier\"\r\n      } else if(this.state.currentModal.payment === \"WALLET\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Cash\"\r\n      } else if(this.state.currentModal.payment === \"VA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Virtual\"\r\n      } else if(this.state.currentModal.payment === \"WALLET_OVO\") {\r\n        payImage = ovoIcon;\r\n        payLabel = \"OVO\"\r\n      } else if(this.state.currentModal.payment === \"WALLET_DANA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"DANA\"\r\n      } \r\n      modal = (\r\n        <Modal\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n          show={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              <p class=\"statusNoteLabel\">No Pesanan.</p>\r\n              <p class=\"statusNoteHeader\">{this.state.currentModal.transactionId}</p>\r\n              <p class=\"statusNoteLabel\">{this.state.currentModal.transactionTime}</p>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={categoryFoodIcon} class=\"statusStoreIcon\" alt=\"category icon\"/>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusStoreName\">\r\n                  {this.state.currentModal.storeName}\r\n                </p>\r\n                <p class=\"statusStoreLabel\">store location</p>\r\n                <p class=\"statusStoreLocation\">\r\n                  {this.state.currentModal.storeLocation}\r\n                </p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={pickupStatusIcon} class=\"statusStoreStatusIcon\"  alt=\"pickup status\"/>\r\n              </Col>\r\n              <Col>\r\n                <span class=\"statusStoreLabel\">status: </span>\r\n                <span class=\"statusStoreStatus\">\r\n                  {this.state.currentModal.status}\r\n                </span>\r\n                <span class=\"statusStoreDistance\">\r\n                  {this.state.currentModal.storeDistance}\r\n                </span>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStorePaymentLabel\">Metode Pembayaran</p>\r\n                <img src={payImage} class=\"statusFoodIcon\" alt=\"status icon\"></img>\r\n                <span class=\"statusStorePayment\">\r\n                      {payLabel}\r\n                    </span>\r\n              </Col>\r\n            </Row>\r\n            {modalListView}\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStoreTotal\">Total Pembayaran</p>\r\n              </Col>\r\n              <Col>\r\n                {Intl.NumberFormat(\"id-ID\", {\r\n                  style: \"currency\",\r\n                  currency: \"IDR\",\r\n                }).format(currentTotal)}\r\n              </Col>\r\n            </Row>\r\n          </Modal.Body>\r\n          <Modal.Footer />\r\n        </Modal>\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n    let notPaidImage;\r\n    let contentView;\r\n\r\n    let currentState = this.state.activeTab;\r\n    if (currentState === 1) {\r\n      notPaidImage = unpaidActiveIcon;\r\n      contentView = this.state.data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = cashierStatusIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"OPEN\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      notPaidImage = unpaidIcon;\r\n    }\r\n\r\n    let packImage;\r\n    if (currentState === 2) {\r\n      packImage = packActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"PAID\" || value.status === \"MERCHANT_CONFIRM\" || value.status === \"CUSTOMER_ACCEPTED\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      packImage = packIcon;\r\n    }\r\n\r\n    let sendImage;\r\n    if (currentState === 3) {\r\n      sendImage = sendActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"DELIVER\" || value.status === \"ON_PROCESS\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt =\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      sendImage = sendIcon;\r\n    }\r\n\r\n    let reviewImage;\r\n    if (currentState === 4) {\r\n      reviewImage = reviewActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        if (value.status === \"CLOSE\" || value.status === \"FINALIZE\") {\r\n          let bizImage;\r\n          let bizLabel;\r\n          let payImage;\r\n          let payLabel;\r\n          if(value.payment === \"PAY_BY_CASHIER\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cashier\"\r\n          } else if(value.payment === \"WALLET\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cash\"\r\n          } else if(value.payment === \"VA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Virtual\"\r\n          } else if(value.payment === \"WALLET_OVO\") {\r\n            payImage = ovoIcon;\r\n            payLabel = \"OVO\"\r\n          } else if(value.payment === \"WALLET_DANA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"DANA\"\r\n          } \r\n          if(value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if(value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          if(value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if(value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt =\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt = \"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      reviewImage = reviewIcon;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Nav variant=\"tabs\" defaultActiveKey={\"not-paid\"}>\r\n          <Nav.Item>\r\n            <Nav.Link\r\n              eventKey={\"not-paid\"}\r\n              onClick={() => this.handleSelect(1)}\r\n            >\r\n              <Row>\r\n                <img\r\n                  src={notPaidImage}\r\n                  alt={\"unpaid\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Belum Bayar</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"pack\"} onClick={() => this.handleSelect(2)}>\r\n              <Row>\r\n                <img src={packImage} alt={\"pack\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Dikemas</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"send\"} onClick={() => this.handleSelect(3)}>\r\n              <Row>\r\n                <img src={sendImage} alt={\"send\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Siap / Dikirim</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"review\"} onClick={() => this.handleSelect(4)}>\r\n              <Row>\r\n                <img\r\n                  src={reviewImage}\r\n                  alt={\"review\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Beri Penilaian</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        {contentView}\r\n        {modal}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","D:\\PIKAPP\\pikapp-web\\src\\View\\Cart\\CartView.js",["120","121","122","123"],"import React from \"react\";\r\nimport { Row, Col, Button, ButtonGroup, Form } from \"react-bootstrap\";\r\nimport chevronImage from \"../../Asset/Icon/chevron_right.png\";\r\nimport removeIcon from \"../../Asset/Icon/remove_icon.png\";\r\nimport storeIcon from \"../../Asset/Icon/store_icon.png\";\r\nimport checklistIcon from \"../../Asset/Icon/checklist_icon.png\";\r\nimport frontIcon from \"../../Asset/Icon/front_icon.png\";\r\nimport cashierIcon from \"../../Asset/Icon/cashier_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport { CartModal } from \"../../Component/Modal/CartModal\";\r\nimport { cart } from \"../../index.js\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, secret, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\n\r\nexport class CartView extends React.Component {\r\n  state = {\r\n    notable: \"\",\r\n    showModal: false,\r\n    currentModalTitle: \"\",\r\n    paymentOption: \"Pembayaran di kasir\",\r\n    paymentType: \"PAY_BY_CASHIER\",\r\n    biz_type: this.props.noTable.table !== \"\"? this.props.noTable.table > 0 ? \"DINE_IN\" : \"TAKE_AWAY\" : \"DINE_IN\",\r\n    eat_type: this.props.noTable.table !== \"\"? this.props.noTable.table > 0 ? \"Makan di tempat\" : \"Bungkus / Takeaway\" : \"Makan di tempat\",\r\n    currentModal: [\r\n      {\r\n        image: \"\",\r\n        option: \"\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n  //  console.log(); \r\n  }\r\n\r\n  handleDetail(data) {\r\n    if (data === \"eat-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Cara makan anda?\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"dineIn\",\r\n            option: \"Makan di tempat\",\r\n          },\r\n          {\r\n            image: \"takeaway\",\r\n            option: \"Bungkus / Takeaway\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"pay-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Bayar pakai apa?\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"cashier\",\r\n            option: \"Pembayaran di kasir\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleDecrease(e) {\r\n    if (e.foodAmount > 1) {\r\n      e.foodAmount -= 1;\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  handleIncrease(e) {\r\n    e.foodAmount += 1;\r\n    this.forceUpdate();\r\n  }\r\n\r\n  handleDelete(e) {\r\n    let filteredCart;\r\n    cart.forEach((store) => {\r\n      let filteredStore = store.food.filter((data) => {\r\n        if(data.productId === e.productId) {\r\n          if(data.foodNote !== e.foodNote) {\r\n            return data\r\n          }\r\n        } else {\r\n          return data\r\n        }\r\n      });\r\n      store.food = filteredStore;\r\n      if(store.food.length === 0) {\r\n        filteredCart = cart.filter((filterStore) => {\r\n          return filterStore.mid !== store.mid;\r\n        });\r\n        localStorage.setItem(\"cart\",JSON.stringify(filteredCart))\r\n        let addedMerchants = []\r\n        filteredCart.forEach((cart) => {\r\n          addedMerchants.push(cart.mid)\r\n          Cookies.set(\"addedMerchants\", addedMerchants)\r\n        })\r\n        if(addedMerchants.length < 2) {\r\n          window.location.href = Cookies.get(\"lastProduct\")\r\n        } else {\r\n          window.location.reload()\r\n        }\r\n      }\r\n    });\r\n    this.forceUpdate();\r\n  }\r\n  handleOption = (data) => {\r\n    if(this.props.noTable.table !== \"\") {\r\n      if(data == 1) {\r\n        let newUrl = window.location.search\r\n        let changeTable = newUrl.slice(0, -1)\r\n        changeTable += 0\r\n        window.location.href = changeTable \r\n      } else {\r\n        let value = Cookies.get(\"lastProduct\")\r\n        console.log(value);\r\n        let getPrevTable = value.charAt(value.length - 1)\r\n        let newUrl = window.location.search\r\n        let changeTable = newUrl.slice(0, -1)\r\n        changeTable += getPrevTable\r\n        window.location.href = changeTable \r\n      }\r\n    }\r\n    if(this.state.currentModalTitle === \"Cara makan anda?\") {\r\n      if(data === 0 || this.props.noTable.table > 0) {\r\n        this.setState({biz_type: \"DINE_IN\"})\r\n        this.setState({eat_type: \"Makan di tempat\"})\r\n      } else {\r\n        this.setState({biz_type: \"TAKE_AWAY\"})\r\n        this.setState({eat_type: \"Bungkus / Takeaway\"})\r\n      }\r\n    } else if (this.state.currentModalTitle === \"Bayar pakai apa?\") {\r\n      if(data === 0) {\r\n        this.setState({paymentType: \"PAY_BY_CASHIER\"})\r\n        this.setState({paymentOption: \"Pembayaran di kasir\"})\r\n      }\r\n    }\r\n  }\r\n  handlePayment = () => {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let totalAmount = 0;\r\n    let data = cart;\r\n    data.forEach((store) => {\r\n      store.food.forEach((food) => {\r\n        totalAmount = totalAmount + food.foodPrice * food.foodAmount;\r\n      });\r\n    });\r\n\r\n    let merchantIds = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n    merchantIds = merchantIds.filter((merchant) => {\r\n      return merchant !== \"\"\r\n    })\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n\r\n    merchantIds.forEach((merchant) => {\r\n      var requestData = {\r\n        products: [{\r\n          product_id :\"\",\r\n          notes: \"\",\r\n          qty: 0\r\n        }],\r\n        payment_with: this.state.paymentType,\r\n        mid: merchant,\r\n        prices: totalAmount,\r\n        biz_type: this.state.biz_type,\r\n        table_no: \"1\"\r\n      }\r\n      requestData.products.pop()\r\n      cart.forEach((merchant) => {\r\n        let addedMerchants = Cookies.get(\"addedMerchants\")\r\n        if(addedMerchants.includes(merchant.mid)) {\r\n          merchant.food.forEach((data) => {\r\n            if(data.productId !== \"\") {\r\n              requestData.products.push({\r\n                product_id: data.productId,\r\n                notes: data.foodNote,\r\n                qty: data.foodAmount,\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n      \r\n      Axios(address + \"/txn/v1/txn-post/\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-request-id\": uuid,\r\n          \"x-request-timestamp\": date,\r\n          \"x-client-id\": clientId,\r\n          \"x-signature\": signature,\r\n          \"token\": auth.token,\r\n        },\r\n        method: \"POST\",\r\n        data: requestData,\r\n      })\r\n      .then((res) => {\r\n        localStorage.removeItem(\"cart\")\r\n        alert(\"Pembelian telah berhasil.\")\r\n        window.location.href = \"/status\"\r\n      })\r\n      .catch((err) => {\r\n        if(err.response.data !== undefined) {\r\n          alert(err.response.data.err_message)\r\n        }\r\n      });\r\n    })\r\n  };\r\n\r\n  render() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let modal;\r\n    let paymentButton;\r\n    if (auth.isLoggedIn === false) {\r\n      paymentButton = (\r\n        <Link to={\"/login\"} className={\"iconButton\"}>\r\n          <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n          <img src={frontIcon} alt={\"checklist\"} />\r\n        </Link>\r\n      );\r\n    } else {\r\n      paymentButton = (\r\n        <button className={\"iconButton\"} onClick={() => this.handlePayment()}>\r\n          <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n          <img src={frontIcon} alt={\"checklist\"} />\r\n        </button>\r\n      );\r\n    }\r\n    if (this.state.showModal === true) {\r\n      modal = (\r\n        <CartModal\r\n          isShow={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n          title={this.state.currentModalTitle}\r\n          detailOptions={this.state.currentModal}\r\n          handleData = {this.handleOption}\r\n          notable = {this.props.noTable}\r\n        />\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n\r\n    let data = cart;\r\n    let totalAmount = 0;\r\n    data.forEach((store) => {\r\n      store.food.forEach((food) => {\r\n        totalAmount = totalAmount + food.foodPrice * food.foodAmount;\r\n      });\r\n    });\r\n    let storeList = data.filter((store) => {\r\n      if (store.mid !== \"\") {\r\n        return store;\r\n      }\r\n    });\r\n\r\n    let contentView = storeList.map((store) => {\r\n      let itemListView = data.map((cartData) => {\r\n        if(cartData.mid === store.mid) {\r\n          return store.food.map((food) => {\r\n            return (\r\n              <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col xs={3} md={1}>\r\n                <img\r\n                  src={food.foodImage}\r\n                  alt={\"food\"}\r\n                  className={\"cartFoodImage\"}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContentFood\"}>{food.foodName}</p>\r\n                    <p className={\"cartContentPrice\"}>Catatan:</p>\r\n                    <p className={\"cartContentPrice\"}>{food.foodNote}</p>\r\n                    <p className={\"cartContentPrice\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(food.foodPrice)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <button\r\n                      className={\"iconButton\"}\r\n                      onClick={() => this.handleDelete(food)}\r\n                    >\r\n                      <img src={removeIcon} alt={\"remove icon\"} />\r\n                    </button>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <ButtonGroup className={\"cartModalButtonGroup\"}>\r\n                      <Button\r\n                        onClick={() => this.handleDecrease(food)}\r\n                        variant=\"cartModalMiniButton\"\r\n                      >\r\n                        -\r\n                      </Button>\r\n                      <Form.Control\r\n                        value={food.foodAmount}\r\n                        className=\"cartModalField\"\r\n                        disabled\r\n                      ></Form.Control>\r\n                      <Button\r\n                        onClick={() => this.handleIncrease(food)}\r\n                        variant=\"cartModalMiniButton\"\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </ButtonGroup>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            )\r\n          })\r\n        }\r\n      });\r\n      return (\r\n        <>\r\n          <Row>\r\n            <Col xs={0} md={3} />\r\n            <Col>\r\n              <p className={\"cartTitle\"}>{store.storeName}</p>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={0} md={3} />\r\n            <Col xs={1} md={1}>\r\n              <img src={storeIcon} className={\"cartIcon\"} alt={\"store icon\"} />\r\n            </Col>\r\n            <Col>\r\n              <Row>\r\n                <Col>\r\n                  <p className={\"cartNote\"}>Store Location</p>\r\n                  <p className={\"cartTitle\"}>{store.storeDesc}</p>\r\n                  <p className={\"cartNote\"}>\r\n                    <b>{store.storeDistance}</b>\r\n                  </p>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col xs={2} md={3}>\r\n              <button className={\"iconButton\"}>\r\n                <img\r\n                  src={chevronImage}\r\n                  onClick={() => this.handleDetail()}\r\n                  alt={\"chevron right\"}\r\n                />\r\n              </button>\r\n            </Col>\r\n          </Row>\r\n          {itemListView}\r\n        </>\r\n      );\r\n    });\r\n\r\n    let paymentImage;\r\n    let eatImage;\r\n    if(this.state.biz_type === \"DINE_IN\") {\r\n      eatImage = dineinIcon;\r\n    } else if (this.state.biz_type === \"TAKE_AWAY\") {\r\n      eatImage = takeawayIcon;\r\n    }\r\n    if(this.state.paymentType === \"PAY_BY_CASHIER\") {\r\n      paymentImage = cashierIcon\r\n    }\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n          <Row>\r\n            <Col><p className={\"cartTitle\"}>Pilih cara makan anda</p></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs ={1} md={1}>\r\n              <img src={eatImage} class=\"cartModalImage\" alt=\"icon\" />\r\n            </Col>\r\n            <Col>{this.state.eat_type}</Col>\r\n          </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"eat-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Bayar pakai apa?</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs ={1} md={1}>\r\n                <img src={paymentImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>\r\n                {this.state.paymentOption}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"pay-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        {contentView}\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Rincian Pembayaran</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Total harga barang:</p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Diskon:</p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(totalAmount)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(0)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className={\"cartPayment\"}>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Total Belanja Kamu</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartFinalPrice\"}>\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(totalAmount)}\r\n                </p>\r\n              </Col>\r\n              <Col className={\"cartFinalButton\"}>{paymentButton}</Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        {modal}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","D:\\PIKAPP\\pikapp-web\\src\\View\\Store\\StoreView.js",["124","125"],"import React from \"react\";\r\nimport { Col, Row, Image } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, clientId, googleKey } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Geocode from \"react-geocode\"\r\n\r\nexport class StoreView extends React.Component {\r\n  state = {\r\n    location: \"\",\r\n    data: {\r\n      title: \"\",\r\n      image: \"\",\r\n      desc: \"\",\r\n      data: [\r\n        {\r\n          address: \"\",\r\n          rating: \"\",\r\n          logo: \"\",\r\n          distance: \"\",\r\n          storeId: \"\",\r\n          storeName: \"\",\r\n          storeDesc: \"\",\r\n          storeImage: \"\",\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  componentDidMount() {\r\n    Cookies.set(\"homePage\", window.location.search)\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    const value = queryString.parse(window.location.search);\r\n    console.log(value);\r\n    var longitude = \"\";\r\n    var latitude = \"\";\r\n    var merchant = \"\";\r\n    // let longlat = JSON.parse(localStorage.getItem(\"longlat\"))\r\n    // let googlonglat = JSON.parse(localStorage.getItem(\"googlonglat\"))\r\n\r\n    if(localStorage.getItem(\"longlat\")) {\r\n      var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n      latitude = getLocation.lat\r\n      longitude = getLocation.lon\r\n    } else if(localStorage.getItem(\"googlonglat\")) {\r\n      var googLocation = JSON.parse(localStorage.getItem(\"googlonglat\"))\r\n      latitude = googLocation.lat\r\n      longitude = googLocation.lon\r\n    } else {\r\n      window.location.href = \"/login\"\r\n    }\r\n\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    } \r\n    else {\r\n      longitude = value.longitude || longitude\r\n      latitude = value.latitude || latitude\r\n      if(window.location.href.includes('?latitude') || window.location.href.includes('store?')) {\r\n        \r\n      } else {\r\n        window.location.href = window.location.href + `?latitude=${latitude}&longitude=${longitude}`\r\n      }\r\n    }\r\n    longitude = value.longitude || longitude\r\n    latitude = value.latitude || latitude\r\n    merchant = value.merchant;\r\n\r\n    //GOOGLE GEOCODE\r\n    // Geocode.setApiKey(googleKey)\r\n    // Geocode.fromLatLng(latitude,longitude)\r\n    // .then((res) => {\r\n    //   console.log(res.results[0].formatted_address);\r\n    //   this.setState({location: res.results[0].formatted_address})\r\n    // })\r\n    // .catch((err) => {\r\n    //   this.setState({location: \"Tidak tersedia\"})\r\n    // })\r\n\r\n    //OPENCAGE API\r\n    let opencagelonglat = latitude + \",\" + longitude\r\n    Axios.get(`https://api.opencagedata.com/geocode/v1/json?`,{\r\n        params:{\r\n            key: 'cdeab36e4fec4073b0de60ff6b595c70',\r\n            q: opencagelonglat\r\n        }\r\n    }).then((res)=> {\r\n      console.log(res.data.results[0].formatted);\r\n      this.setState({location: res.data.results[0].formatted})\r\n    }).catch((err) => {\r\n      this.setState({location: \"Tidak tersedia\"})\r\n    })\r\n\r\n    let addressRoute;\r\n    if (merchant === undefined) {\r\n      addressRoute =\r\n        address + \"home/v1/merchant/\" + longitude + \"/\" + latitude + \"/ALL/\";\r\n    } else {\r\n      addressRoute =\r\n        address +\r\n        \"home/v1/merchant/\" +\r\n        longitude +\r\n        \"/\" +\r\n        latitude +\r\n        \"/\" +\r\n        merchant\r\n        + \"/\"\r\n    }\r\n    var stateData;\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    Axios(addressRoute, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"token\": \"PUBLIC\",\r\n        \"category\": \"1\",\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n          stateData = { ...this.state.data };\r\n          let responseDatas = res.data;\r\n          stateData.data.pop();\r\n          responseDatas.results.forEach((data) => {\r\n            stateData.data.push({\r\n                address: data.merchant_address,\r\n                rating: data.merchant_rating,\r\n                logo: data.merchant_logo,\r\n                distance: data.merchant_distance,\r\n                storeId: data.mid,\r\n                storeName: data.merchant_name,\r\n                storeDesc: \"\",\r\n                storeImage: data.merchant_pict,\r\n            })\r\n          })\r\n          this.setState({ data: stateData });\r\n      })\r\n      .catch((err) => {\r\n      });\r\n\r\n    // var data = { ...this.state.data };\r\n    // data.title = \"Location\";\r\n    // data.image = \"\";\r\n    // data.desc = \"This is a store desc\";\r\n    // data.data.pop();\r\n    // data.data.push({\r\n    //   address: \"address\",\r\n    //   rating: \"1\",\r\n    //   logo: \"logo\",\r\n    //   distance: \"1\",\r\n    //   storeId: \"1\",\r\n    //   storeName: \"name\",\r\n    //   storeDesc: \"\",\r\n    //   storeImage: \"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\",\r\n    // });\r\n    // this.setState({ data: data });\r\n\r\n  }\r\n\r\n  storeClick = (e) => {\r\n    var currentMerchant = {\r\n      mid: \"\",\r\n      storeName: \"\",\r\n      storeDesc: \"\",\r\n      distance: \"\",\r\n      storeImage: \"\",\r\n      storeAdress: \"\",\r\n      storeRating: \"\",\r\n    };\r\n    currentMerchant.mid = e.storeId;\r\n    currentMerchant.storeName = e.storeName;\r\n    currentMerchant.storeDesc = \"Desc\";\r\n    currentMerchant.distance = e.distance;\r\n    currentMerchant.storeImage = e.storeImage;\r\n    currentMerchant.storeAdress = e.address;\r\n    currentMerchant.storeRating = e.rating;\r\n\r\n    Cookies.set(\"currentMerchant\", currentMerchant, {expires: 1})\r\n  }\r\n  handleDetail(data) {\r\n    return <Link to={\"/status\"}></Link>;\r\n  }\r\n\r\n  render() {\r\n    const storeDatas = this.state.data.data.map((data) => {\r\n      return data;\r\n    });\r\n    var allCards = storeDatas.map((cardData) => {\r\n      return (\r\n        <Row>\r\n          <Col xs={3} md={3}>\r\n            <Image\r\n              src={cardData.storeImage}\r\n              rounded\r\n              fluid\r\n              className=\"storeImage\"\r\n            />\r\n          </Col>\r\n          <Col xs={9} md={6}>\r\n            <Row>\r\n              <Col xs={7} md={9}>\r\n                <h5 className=\"foodTitle\">{cardData.storeName}</h5>\r\n                <p className=\"storeDesc\">{cardData.storeDesc}</p>\r\n                <div className=\"foodButton\">\r\n                  <Link\r\n                    className={\"btn-cartPika\"}\r\n                    to={\"/store?mid=\" + cardData.storeId}\r\n                    style={{\r\n                      padding: 8,\r\n                      textDecoration: \"none\",\r\n                      color: \"black\",\r\n                    }}\r\n                    onClick={()=> this.storeClick(cardData)}\r\n                  >\r\n                    Go to store\r\n                  </Link>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col xs={4} md={1}/>\r\n          <Col xs={0} md={4} className=\"storeColumn\">\r\n            <h6 className=\"\" style={{ textAlign: \"left\" }}>\r\n              Lokasi:\r\n            </h6>\r\n            <p className=\"storeLabel\" style={{ textAlign: \"left\" }}>\r\n              {this.state.location}\r\n            </p>\r\n          </Col>\r\n          <Col />\r\n        </Row>\r\n        <Row />\r\n        <Row>\r\n          <Col md={12}>{allCards}</Col>\r\n        </Row>\r\n        <Row></Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\PIKAPP\\pikapp-web\\src\\View\\Auth\\FormView.js",[],"D:\\PIKAPP\\pikapp-web\\src\\View\\Main\\JumbotronView.js",[],"D:\\PIKAPP\\pikapp-web\\src\\View\\Product\\ProductView.js",[],"D:\\PIKAPP\\pikapp-web\\src\\View\\Profile\\ProfileView.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Asset\\Constant\\APIConstant.js",["126","127","128"],"export const address = \"https://dev-api.pikapp.id/\";\r\n// export const address = \"https://api.pikapp.id/\";\r\n\r\nvar secretDev = \"21f6fc80-cfdb-11ea-87d0-0242ac130003\"\r\nvar secretProd = \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\"\r\nexport const secret = secretDev;\r\n\r\nvar clientIdDev = \"abf0e2a9-e9ee-440f-8563-94481c64b797\"\r\nvar clientIdProd = \"d4aummjdkbzdsd46vygjvcy235ywmhkm\"\r\nexport const clientId = clientIdDev;\r\n// googleKeyDev need to activate billing which later should pay after expired\r\nvar googleKeyProd = \"AIzaSyBMG_JpxmoPEBH6fpveaowU2vkWYrZEw1Y\"\r\nvar googleKeyDev = \"AIzaSyAikqroR5x4BrRv5Yj-tWgUcqvjEKUysh4\"\r\nexport const googleKey = googleKeyDev;\r\n\r\nexport const jwtSecret = \"Er3lzchUa489bdlg35PCaGMKk2YzflBHCMue2jIAy9nFENvokE0JUbwytMFSvrajK8gYDttMdvzWw0OBRydt7pXfAAd1DTxWvE0Hc\"\r\n","D:\\PIKAPP\\pikapp-web\\src\\Component\\Modal\\PikaModal.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Component\\Modal\\CartModal.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Component\\TextField\\PikaTextField.js",[],["129","130"],"D:\\PIKAPP\\pikapp-web\\src\\Component\\Button\\PikaButton.js",[],"D:\\PIKAPP\\pikapp-web\\src\\Master\\MerchantQR.js",["131","132","133","134"],"import React, { useEffect, useState } from \"react\";\r\nimport { geolocated } from \"react-geolocated\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport { address, clientId, googleKey } from \"../Asset/Constant/APIConstant\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst MerchantResto = (props) => {\r\n  const [merchant, setmerchant] = useState([\r\n    {\r\n      address: \"\",\r\n      rating: \"\",\r\n      logo: \"\",\r\n      distance: \"\",\r\n      storeId: \"\",\r\n      storeName: \"\",\r\n      storeDesc: \"\",\r\n      storeImage: \"\",\r\n    },\r\n  ]);\r\n  const [latitude, setlatitude] = useState(\"\");\r\n  const [longitude, setlongitude] = useState(\"\");\r\n  let history = useHistory();\r\n\r\n  const getUserLocation = () => {\r\n    Axios.post(`https://www.googleapis.com/geolocation/v1/geolocate?key=${googleKey}`)\r\n    .then((res)=> {\r\n      let latitude = res.data.location.lat\r\n      let longitude = res.data.location.lng\r\n      let longlat = {lat: latitude, lon: longitude}\r\n      console.log(latitude, longitude);\r\n      setlatitude(latitude)\r\n      setlongitude(longitude)\r\n      localStorage.setItem(\"googlonglat\", JSON.stringify(longlat))\r\n    })\r\n    .catch((err)=> console.log(err))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.coords) {\r\n      let latitude = props.coords.latitude;\r\n      let longitude = props.coords.longitude;\r\n      let longlat = { lat: latitude, lon: longitude };\r\n      console.log(latitude, longitude);\r\n      localStorage.setItem(\"longlat\", JSON.stringify(longlat));\r\n    } else {\r\n      getUserLocation()\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.coords) {\r\n      let latitude = props.coords.latitude;\r\n      let longitude = props.coords.longitude;\r\n      let longlat = { lat: latitude, lon: longitude };\r\n      console.log(latitude, longitude);\r\n      localStorage.setItem(\"longlat\", JSON.stringify(longlat));\r\n      getMerchantData(latitude, longitude)\r\n    } else {\r\n      getMerchantData(latitude, longitude)\r\n    }\r\n  });\r\n\r\n  const getMerchantData = (lat, lon) => {\r\n    if (merchant[0].storeId == \"\") {\r\n      let addressRoute =\r\n        address + \"home/v1/merchant/\" + lon + \"/\" + lat + \"/ALL/\";\r\n      var stateData;\r\n      let uuid = uuidV4();\r\n      uuid = uuid.replaceAll(\"-\", \"\");\r\n      const date = new Date().toISOString();\r\n      Axios(addressRoute, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-request-id\": uuid,\r\n          \"x-request-timestamp\": date,\r\n          \"x-client-id\": clientId,\r\n          token: \"PUBLIC\",\r\n          category: \"1\",\r\n        },\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          stateData = [{ ...merchant }];\r\n          let responseDatas = res.data;\r\n          stateData.pop();\r\n          responseDatas.results.forEach((data) => {\r\n            stateData.push({\r\n              address: data.merchant_address,\r\n              rating: data.merchant_rating,\r\n              logo: data.merchant_logo,\r\n              distance: data.merchant_distance,\r\n              storeId: data.mid,\r\n              storeName: data.merchant_name,\r\n              storeDesc: \"\",\r\n              storeImage: data.merchant_pict,\r\n            });\r\n          });\r\n          console.log(stateData);\r\n          console.log(props.match.params.mid);\r\n          console.log(stateData[0].storeId);\r\n          let matchmid = stateData.filter((val) => {\r\n            return val.storeId == props.match.params.mid;\r\n          });\r\n          console.log(matchmid[0].storeId);\r\n          var currentMerchant = {\r\n            mid: \"\",\r\n            storeName: \"\",\r\n            storeDesc: \"\",\r\n            distance: \"\",\r\n            storeImage: \"\",\r\n            storeAdress: \"\",\r\n            storeRating: \"\",\r\n          };\r\n          currentMerchant.mid = matchmid[0].storeId;\r\n          currentMerchant.storeName = matchmid[0].storeName;\r\n          currentMerchant.storeDesc = \"Desc\";\r\n          currentMerchant.distance = matchmid[0].distance;\r\n          currentMerchant.storeImage = matchmid[0].storeImage;\r\n          currentMerchant.storeAdress = matchmid[0].address;\r\n          currentMerchant.storeRating = matchmid[0].rating;\r\n          Cookies.set(\"currentMerchant\", currentMerchant, { expires: 1 });\r\n          history.push(\r\n            \"/store?mid=\" +\r\n              matchmid[0].storeId +\r\n              \"&table=\" +\r\n              props.match.params.notab\r\n          );\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default geolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: false,\r\n  },\r\n  userDecisionTimeout: 5000,\r\n})(MerchantResto);\r\n\r\n// export default MerchantResto\r\n","D:\\PIKAPP\\pikapp-web\\src\\Master\\ProductLayoutDev.js",["135"],"import React from \"react\";\r\nimport MainNavigation from \"./MainNavigation\";\r\n// import { ProductView } from \"../View/Product/ProductView\";\r\nimport { ProductView } from \"../View/Product/ProductViewDev\";\r\n\r\nexport default class MainLayout extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className='mainLayout'>\r\n            <ProductView />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","D:\\PIKAPP\\pikapp-web\\src\\View\\Product\\ProductViewDev.js",["136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],"import React from \"react\";\r\nimport { prominent } from \"color.js\";\r\nimport rgbHex from 'rgb-hex'\r\nimport { Col, Row, Image, Card, Tabs, Tab, Container } from \"react-bootstrap\";\r\nimport { PikaButton } from \"../../Component/Button/PikaButton\";\r\nimport { PikaModal } from \"../../Component/Modal/PikaModal\";\r\nimport queryString from \"query-string\";\r\nimport { cart } from \"../../index.js\";\r\nimport cartIcon from \"../../Asset/Icon/cart_icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Storeimg2 from '../../Asset/Illustration/storeimg.jpg'\r\nimport Storeimg from '../../Asset/Illustration/storeimg2.png'\r\nimport Productimg from '../../Asset/Illustration/productimg.png'\r\nimport Logopikapp from '../../Asset/Logo/logo4x.png'\r\nimport NotifIcon from '../../Asset/Icon/bell.png'\r\nimport ProfileIcon from '../../Asset/Icon/avatar.png'\r\nimport OpenHourIcon from '../../Asset/Icon/hour.png'\r\nimport CoinIcon from '../../Asset/Icon/coin.png'\r\nimport LocationIcon from '../../Asset/Icon/location.png'\r\nimport PhoneIcon from '../../Asset/Icon/phone.png'\r\nimport StarIcon from '../../Asset/Icon/star.png'\r\nimport ArrowIcon from '../../Asset/Icon/arrowselect.png'\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n};\r\n\r\nexport class ProductView extends React.Component {\r\n  state = {\r\n    testColor: false,\r\n    testingchange: false, //only for testing, would be remove\r\n    showModal: false,\r\n    data: {\r\n      mid: \"\",\r\n      title: \"\",\r\n      image: \"\",\r\n      desc: \"\",\r\n      address: \"\",\r\n      rating: \"\",\r\n      phone: \"\",\r\n      data: [\r\n        {\r\n          productId: \"\",\r\n          category: \"\",\r\n          foodName: \"\",\r\n          foodDesc: \"\",\r\n          foodPrice: 0,\r\n          foodImage: \"\",\r\n          foodExt: [\r\n            {\r\n              name: \"\",\r\n              amount: 0,\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      currentData: {\r\n        productId: \"\",\r\n        category: \"\",\r\n        foodName: \"\",\r\n        foodDesc: \"\",\r\n        foodPrice: 0,\r\n        foodImage: \"\",\r\n        foodExt: [\r\n          {\r\n            name: \"\",\r\n            amount: 0,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    backColor1: \"\",\r\n    backColor2: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.body.style.backgroundColor = 'white'\r\n    Cookies.set(\"lastProduct\", window.location.href, {expires: 1})\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    const notab = value.table || \"\"\r\n    let addressRoute = address + \"home/v1/list/product/\";\r\n    var stateData;\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    Axios(addressRoute, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"token\": \"PUBLIC\",\r\n        \"mid\": mid,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n    .then((res) => {\r\n        stateData = { ...this.state.data };\r\n        let responseDatas = res.data.results;\r\n        stateData.data.pop();\r\n        stateData.mid = mid;\r\n        stateData.title = currentMerchant.storeName;\r\n        stateData.image = currentMerchant.storeImage;\r\n        stateData.desc = currentMerchant.storeDistance;\r\n        stateData.address = currentMerchant.storeAdress;\r\n        stateData.rating = currentMerchant.storeRating;\r\n        stateData.phone = \"081296000823\";\r\n        stateData.notable = notab\r\n        stateData.data.push({\r\n          category: \"All Category\",\r\n          productId: \"\",\r\n          foodName: \"\",\r\n          foodDesc: \"\",\r\n          foodPrice: \"\",\r\n          foodImage: \"\",\r\n        })\r\n        responseDatas.forEach((data) => {\r\n          stateData.data.push({\r\n              productId: data.product_id,\r\n              foodName: data.product_name,\r\n              foodDesc: \"\",\r\n              foodPrice: data.product_price,\r\n              foodImage: data.product_picture[0],\r\n          })\r\n        })\r\n        prominent(Storeimg, { amount: 3 }).then((color) => {\r\n          console.log(color); // [241, 221, 63]\r\n          var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n          var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n          this.brightenColor(merchantColor, 70, productColor, 60)\r\n          this.setState({ data: stateData });\r\n        });\r\n    })\r\n    .catch((err) => {\r\n    });\r\n  }\r\n\r\n  //testing changebackground\r\n  changeBackground = () => {\r\n    this.setState({testingchange: !this.state.testingchange, testColor: true})\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if(this.state.testColor == true) {\r\n      if(this.state.testingchange == false) {\r\n        prominent(Storeimg, { amount: 3 }).then((color) => {\r\n          console.log(color); // [241, 221, 63]\r\n          var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n          var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n          this.brightenColor(merchantColor, 70, productColor, 60)\r\n        });\r\n      } else {\r\n        prominent(Storeimg2, { amount: 3 }).then((color) => {\r\n          console.log(color); // [241, 221, 63]\r\n          var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n          var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n          this.brightenColor(merchantColor, 70, productColor, 60)\r\n        });\r\n      }\r\n    }\r\n  }\r\n  //testing changebackground\r\n\r\n  brightenColor = (hex, percent, hex2, percent2) => {\r\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\r\n    //backColor1\r\n    if(hex.length == 3){\r\n        hex = hex.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r = parseInt(hex.substr(0, 2), 16),\r\n        g = parseInt(hex.substr(2, 2), 16),\r\n        b = parseInt(hex.substr(4, 2), 16);\r\n\r\n    let brightColor =  '#' +\r\n       ((0|(1<<8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +\r\n       ((0|(1<<8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +\r\n       ((0|(1<<8) + b + (256 - b) * percent / 100).toString(16)).substr(1);\r\n\r\n    //backColor2\r\n    if(hex2.length == 3){\r\n      hex2 = hex2.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r2 = parseInt(hex2.substr(0, 2), 16),\r\n        g2 = parseInt(hex2.substr(2, 2), 16),\r\n        b2 = parseInt(hex2.substr(4, 2), 16);\r\n\r\n    let brightColor2 =  '#' +\r\n      ((0|(1<<8) + r2 + (256 - r2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0|(1<<8) + g2 + (256 - g2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0|(1<<8) + b2 + (256 - b2) * percent2 / 100).toString(16)).substr(1);\r\n\r\n    console.log(brightColor, brightColor2);\r\n    this.setState({backColor1: brightColor, testColor: false})\r\n    document.body.style.backgroundColor = brightColor2;\r\n  }\r\n\r\n  handlePhone = (phone) => {\r\n    phone.substring(1)\r\n    let waNumber = '62' + phone\r\n    window.location.href = `https://wa.me/${waNumber}`\r\n  }\r\n\r\n  handleDetail(data) {\r\n    this.setState({ currentData: data });\r\n    this.setState({ showModal: true });\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data;\r\n  };\r\n\r\n  handleAddCart = () => {\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    this.setModal(false);\r\n    var isStorePresent = false;\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        isStorePresent = true;\r\n      }\r\n    });\r\n\r\n    var isDuplicate = false;\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        data.food.forEach((food) => {\r\n          if (food.productId === this.state.currentData.productId) {\r\n            isDuplicate = true;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    var isFound = false\r\n    if (isStorePresent === true) {\r\n      if (isDuplicate === true) {\r\n        cart.forEach((data) => {\r\n          if(isFound === false) {\r\n            if (data.mid === this.state.data.mid) {\r\n              data.food.forEach((food) => {\r\n                if(isFound === false) {\r\n                  if(food.foodNote === currentExt.note) {\r\n                    if (food.productId === this.state.currentData.productId) {\r\n                      isFound = true\r\n                      food.foodAmount += currentExt.detailCategory[0].amount;\r\n                    }\r\n                  }\r\n                } \r\n              });\r\n            }\r\n          }\r\n        })\r\n        if(isFound === false) {\r\n          var isAdded = false\r\n          cart.forEach((data) => {\r\n              if (data.mid === this.state.data.mid) {\r\n                data.food.forEach((food) => {\r\n                  if(isAdded === false) {\r\n                    isAdded = true\r\n                    data.food.push({\r\n                      productId: this.state.currentData.productId,\r\n                      foodName: this.state.currentData.foodName,\r\n                      foodPrice: this.state.currentData.foodPrice,\r\n                      foodImage: this.state.currentData.foodImage,\r\n                      foodAmount: currentExt.detailCategory[0].amount,\r\n                      foodNote: currentExt.note,\r\n                    });\r\n                  }\r\n              });\r\n            }\r\n          })\r\n        };\r\n      } else {\r\n        cart.forEach((data) => {\r\n          if (data.mid === this.state.data.mid) {\r\n            data.food.push({\r\n              productId: this.state.currentData.productId,\r\n              foodName: this.state.currentData.foodName,\r\n              foodPrice: this.state.currentData.foodPrice,\r\n              foodImage: this.state.currentData.foodImage,\r\n              foodAmount: currentExt.detailCategory[0].amount,\r\n              foodNote: currentExt.note,\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      cart.push({\r\n        mid: mid,\r\n        storeName: currentMerchant.storeName,\r\n        storeDesc: currentMerchant.storeDesc,\r\n        storeDistance: currentMerchant.distance,\r\n        food: [\r\n          {\r\n            productId: this.state.currentData.productId,\r\n            foodName: this.state.currentData.foodName,\r\n            foodPrice: this.state.currentData.foodPrice,\r\n            foodImage: this.state.currentData.foodImage,\r\n            foodAmount: currentExt.detailCategory[0].amount,\r\n            foodNote: currentExt.note,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n    let addedMerchants = []\r\n    if(Cookies.get(\"addedMerchants\") === undefined) {\r\n      if(!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    } else {\r\n      addedMerchants = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n      if(!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    }\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    const date = new Date().toISOString();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"/txn/v1/cart-post/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"POST\",\r\n      data: {\r\n        mid: this.state.data.mid,\r\n        pid: this.state.currentData.productId,\r\n        qty: currentExt.detailCategory[0].amount,\r\n        notes: currentExt.note,\r\n      }\r\n    })\r\n    .then((res) => {\r\n    })\r\n    .catch((err) => {\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let modal;\r\n    if (this.state.showModal === true) {\r\n      modal = (\r\n        <PikaModal\r\n          isShow={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n          datas={this.state.currentData}\r\n          handleClick={this.handleAddCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n    const storeDatas = this.state.data.data.map((data) => {\r\n      return data;\r\n    });\r\n\r\n    let categories = [];\r\n    categories = storeDatas.filter((data) => {\r\n      if (!categories.includes(data.category)) {\r\n        return categories.push(data.category);\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    let cartButton;\r\n    if (cart.length > 1) {\r\n      cartButton = (\r\n        <Link to={\"/cart?table=\" + this.state.data.notable} className={\"btn-productCart\"}>\r\n          <img src={cartIcon} alt={\"cart\"} />\r\n        </Link>\r\n      );\r\n    } else {\r\n      cartButton = <></>;\r\n    }\r\n    console.log(categories);\r\n    console.log(storeDatas);\r\n    const contentView = categories.map((data) => {\r\n      if (data.category === \"All Category\") {\r\n        var allCards = storeDatas.map((cardData) => {\r\n          if (cardData.category === \"All Category\") {\r\n            return null;\r\n          } else {\r\n            return (\r\n              <div className='product-merchant' onClick={() => this.handleDetail(cardData)}>\r\n                <div className='product-img'>\r\n                  <img src={cardData.foodImage? cardData.foodImage : Productimg} style={{objectFit: 'cover'}} width='100%' height='100%' />\r\n                </div>\r\n\r\n                <div className='product-detail-mob'>\r\n                  <div className='product-detail'>\r\n                    <div className='product-star'>\r\n                      <img className='product-star-img' src={StarIcon} />\r\n                      <h6 className='product-star-rating'>5.0</h6>\r\n                    </div>\r\n\r\n                    <div className='product-name'>\r\n                      {cardData.foodName}\r\n                    </div>\r\n\r\n                    <div className='product-desc'>\r\n                      {cardData.foodDesc? cardData.foodDesc : \"Product Description\"}\r\n                    </div>\r\n\r\n                    <div className='product-price'>\r\n                      {Intl.NumberFormat(\"id-ID\").format(cardData.foodPrice)}\r\n                    </div>\r\n                  </div>\r\n                  <div className='product-price-mob'>\r\n                    {Intl.NumberFormat(\"id-ID\").format(cardData.foodPrice)}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              // <Row>\r\n              //   <Col xs={4} md={4} lg={3}>\r\n              //     <Image\r\n              //       src={cardData.foodImage}\r\n              //       rounded\r\n              //       fluid\r\n              //       className=\"foodImage\"\r\n              //     />\r\n              //   </Col>\r\n              //   <Col xs={8} md={8} lg={9}>\r\n              //     <Row>\r\n              //       <Col xs={7} md={6} lg={9}>\r\n              //         <h5 className=\"foodTitle\">{cardData.foodName}</h5>\r\n              //         <p className=\"foodDesc\">{cardData.foodDesc}</p>\r\n              //         <div className=\"foodButton\">\r\n              //           <PikaButton\r\n              //             title=\"ADD TO CART\"\r\n              //             buttonStyle=\"cartPika\"\r\n              //             handleClick={() => this.handleDetail(cardData)}\r\n              //           />\r\n              //         </div>\r\n              //       </Col>\r\n              //       <Col xs={5} md={3} lg={3}>\r\n              //         <h6 className=\"foodPrice\">\r\n              //           {Intl.NumberFormat(\"id-ID\", {\r\n              //             style: \"currency\",\r\n              //             currency: \"IDR\",\r\n              //           }).format(cardData.foodPrice)}\r\n              //         </h6>\r\n              //       </Col>\r\n              //     </Row>\r\n              //   </Col>\r\n              // </Row>\r\n            );\r\n          }\r\n        });\r\n        return (\r\n          // <Tab eventKey={data.category} title={data.category}>\r\n          //   <Row>\r\n          //     <Col>\r\n          //       <h5 className=\"foodHeader\">{data.category}</h5>\r\n          //     </Col>\r\n          //   </Row>\r\n          //   {allCards}\r\n          // </Tab>\r\n          allCards\r\n        );\r\n      } else {\r\n        // var cards = storeDatas.map((cardData) => {\r\n        //   if (data.category === cardData.category) {\r\n        //     return (\r\n        //       <div className='product-merchant' onClick={() => this.handleDetail(cardData)}>\r\n        //         <div className='product-img'>\r\n        //           <img src={cardData.foodImage? cardData.foodImage : Productimg} style={{objectFit: 'cover'}} width='100%' height='100%' />\r\n        //         </div>\r\n\r\n        //         <div className='product-detail-mob'>\r\n        //           <div className='product-detail'>\r\n        //             <div className='product-star'>\r\n        //               <img className='product-star-img' src={StarIcon} />\r\n        //               <h6 className='product-star-rating'>5.0</h6>\r\n        //             </div>\r\n\r\n        //             <div className='product-name'>\r\n        //               {cardData.foodName}\r\n        //             </div>\r\n\r\n        //             <div className='product-desc'>\r\n        //               {cardData.foodDesc}\r\n        //             </div>\r\n\r\n        //             <div className='product-price'>\r\n        //               {/* {Intl.NumberFormat(\"id-ID\", {\r\n        //                   style: \"currency\",\r\n        //                   currency: \"IDR\",\r\n        //                 }).format(cardData.foodPrice)} */}\r\n        //                 {cardData.foodPrice}\r\n        //             </div>\r\n        //           </div>\r\n        //           <div className='product-price-mob'>\r\n        //             {cardData.foodPrice}\r\n        //           </div>\r\n        //         </div>\r\n        //       </div>\r\n        //       // <Card>\r\n        //       //   <Row>\r\n        //       //     <Col xs={4} md={3}>\r\n        //       //       <Image\r\n        //       //         src={cardData.foodImage}\r\n        //       //         rounded\r\n        //       //         fluid\r\n        //       //         className=\"foodImage\"\r\n        //       //       />\r\n        //       //     </Col>\r\n        //       //     <Col xs={8} md={9}>\r\n        //       //     <Row>\r\n        //       //       <Col xs={7} md={9}>\r\n        //       //         <h5 className=\"foodTitle\">{cardData.foodName}</h5>\r\n        //       //         <p className=\"foodDesc\">{cardData.foodDesc}</p>\r\n        //       //         <div className=\"foodButton\">\r\n        //       //           <PikaButton\r\n        //       //             title=\"ADD TO CART\"\r\n        //       //             buttonStyle=\"cartPika\"\r\n        //       //             handleClick={() => this.handleDetail(cardData)}\r\n        //       //           />\r\n        //       //         </div>\r\n        //       //       </Col>\r\n        //       //       <Col xs={5} md={3}>\r\n        //       //         <h6 className=\"foodPrice\">\r\n        //       //           {Intl.NumberFormat(\"id-ID\", {\r\n        //       //             style: \"currency\",\r\n        //       //             currency: \"IDR\",\r\n        //       //           }).format(cardData.foodPrice)}\r\n        //       //         </h6>\r\n        //       //       </Col>\r\n        //       //     </Row>\r\n        //       //   </Col>\r\n        //       //   </Row>\r\n        //       // </Card>\r\n        //     );\r\n        //   } else {\r\n        //     return null;\r\n        //   }\r\n        // });\r\n        // return (\r\n        //   // <Tab eventKey={data.category} title={data.category}>\r\n        //   //   <Row>\r\n        //   //     <Col>\r\n        //   //       <h5 className=\"foodHeader\">{data.category}</h5>\r\n        //   //     </Col>\r\n        //   //   </Row>\r\n        //   //   {cards}\r\n        //   // </Tab>\r\n        //   cards\r\n        // );\r\n      }\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div className='storeBanner'>\r\n            {//only for testing, would be remove\r\n              this.state.testingchange == false ?\r\n              <img src={Storeimg} style={{objectFit: 'cover'}} width='100%' height='100%' />\r\n              :\r\n              <img src={Storeimg2} style={{objectFit: 'cover'}} width='100%' height='100%' />\r\n            }\r\n            <div className='iconBanner'>\r\n              <Link to={\"/profile\"}>\r\n                <div className='profileIcon-sec'>\r\n                    <div className='profileIcon'>\r\n                        <span className='reactProfIcons'>\r\n                            <img className='profileicon-img' src={ProfileIcon} />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n              </Link>\r\n\r\n              <Link to={\"/status\"}>\r\n                <div className='notifIcon-sec'>\r\n                    <div className='notifIcon'>\r\n                        <span className='reactNotifIcons'>\r\n                            <img className='notificon-img' src={NotifIcon} />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n              </Link>\r\n            </div>\r\n        </div>\r\n        <div className='merchant-section' style={{backgroundColor: this.state.backColor1}}>\r\n            <div className='merchant-info'>\r\n                <div className='top-merchantInfo'>\r\n                    <div className='inside-topMerchantInfo'>\r\n                        <div className='merchant-title'>\r\n                            <div className='merchant-logo'>\r\n                              <img src={this.state.data.image? this.state.data.image : Productimg} style={{objectFit: 'cover'}} width='100%' height='100%' />\r\n                            </div>\r\n\r\n                            <div className='merchant-name'>\r\n                                <div className='merchant-mainName'>\r\n                                  {this.state.data.title}\r\n                                </div>\r\n\r\n                                <div className='merchant-categName'>\r\n                                    <div className='merchant-allcateg'>Merchant Category</div>\r\n                                    <div className='merchant-starInfo'>\r\n                                        <img className='star-img' src={StarIcon} />\r\n                                        <div className='merchant-star'>{this.state.data.rating? this.state.data.rating : \"No Rating\"}</div>\r\n                                        {/* <div className='star-votes'>(50+ Upvotes)</div> */}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='merchant-call-sec' onClick={()=> this.handlePhone(this.state.data.phone)}>\r\n                            <div className='merchant-call'>\r\n                                <span className='merchantCall-icon'>\r\n                                    <img className='merchantCall-img' src={PhoneIcon} />\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='bottom-merchantInfo'>\r\n                    <div className='inside-bottomMerchantInfo'>\r\n                        <div className='merchantdetail-section'>\r\n                            <div className='icon-based'>\r\n                                <img className='openhouricon' src={OpenHourIcon} />\r\n                            </div>\r\n\r\n                            <div className='detail-info'>\r\n                                <div className='top-detail-info'>Open</div>\r\n                                <div className='bottom-detail-info'>Jum (08.00 - 20.00)</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='merchantdetail-section'>\r\n                            <div className='icon-based'>\r\n                                <img className='coinicon' src={CoinIcon} />\r\n                            </div>\r\n\r\n                            <div className='detail-info'>\r\n                                <div className='top-detail-info'>$$$</div>\r\n                                <div className='bottom-detail-info'>50 K - 100 K</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='merchantdetail-section'>\r\n                            <div className='icon-based'>\r\n                                <img className='locationicon' src={LocationIcon} />\r\n                            </div>\r\n\r\n                            <div className='detail-info'>\r\n                                <div className='top-detail-info'>Store Address</div>\r\n                                <div className='bottom-detail-info'>{this.state.data.address}</div>\r\n                            </div>\r\n                        </div>     \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='merchant-category' onClick={()=> this.changeBackground()}>\r\n                <div className='select-category'>\r\n                    <div className='listCategory'>\r\n                        <h2 className='categoryName'>Rice Box</h2>\r\n\r\n                        <div className='arrow-based' >\r\n                            <img className='arrowicon' src={ArrowIcon} />\r\n                        </div>\r\n                    </div>\r\n                </div>    \r\n            </div>\r\n        </div>\r\n        <div className='product-layout' style={{backgroundColor: '#ece7dc'}}>\r\n          <div className='mainproduct-sec'>\r\n            <div className='product-section'>\r\n              <h2 className='product-categ'>Rice Box</h2>\r\n\r\n              <div className='list-product'>\r\n                {contentView}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='pikapp-info'>\r\n              <h3 className='pikappInfo'>Digital Menu By</h3>\r\n              <img className='Logopikapp' src={Logopikapp} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {modal}\r\n        {cartButton}\r\n\r\n        {/* <Row>\r\n          <Col xs={4} md={2}>\r\n            <Image\r\n              src={this.state.data.image}\r\n              roundedCircle\r\n              className=\"storeImage\"\r\n            />\r\n          </Col>\r\n          <Col xs={8} md={4} className=\"storeColumn\">\r\n            <h2 className=\"storeLabel\" style={{ textAlign: \"left\" }}>\r\n              {this.state.data.title}\r\n            </h2>\r\n            <p className=\"storeLabel\" style={{ textAlign: \"left\" }}>\r\n              {this.state.data.desc}\r\n            </p>\r\n          </Col>\r\n          <Col />\r\n        </Row>\r\n        <Row />\r\n        <Row>\r\n          <Col md={12}>\r\n            <Tabs defaultActiveKey=\"All Category\">{contentView}</Tabs>\r\n          </Col>\r\n        </Row>\r\n        {modal}\r\n        {cartButton} */}\r\n      </>\r\n    );\r\n  }\r\n}",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":345,"column":49,"nodeType":"172","messageId":"173","endLine":345,"endColumn":51},{"ruleId":"170","severity":1,"message":"171","line":423,"column":38,"nodeType":"172","messageId":"173","endLine":423,"endColumn":40},{"ruleId":"170","severity":1,"message":"171","line":508,"column":38,"nodeType":"172","messageId":"173","endLine":508,"endColumn":40},{"ruleId":"170","severity":1,"message":"171","line":593,"column":38,"nodeType":"172","messageId":"173","endLine":593,"endColumn":40},{"ruleId":"170","severity":1,"message":"174","line":90,"column":52,"nodeType":"172","messageId":"173","endLine":90,"endColumn":54},{"ruleId":"175","severity":1,"message":"176","line":121,"column":15,"nodeType":"177","messageId":"178","endLine":121,"endColumn":17},{"ruleId":"170","severity":1,"message":"174","line":293,"column":41,"nodeType":"172","messageId":"173","endLine":293,"endColumn":43},{"ruleId":"170","severity":1,"message":"171","line":300,"column":46,"nodeType":"172","messageId":"173","endLine":300,"endColumn":48},{"ruleId":"179","severity":1,"message":"180","line":5,"column":29,"nodeType":"181","messageId":"182","endLine":5,"endColumn":38},{"ruleId":"179","severity":1,"message":"183","line":9,"column":8,"nodeType":"181","messageId":"182","endLine":9,"endColumn":15},{"ruleId":"179","severity":1,"message":"184","line":5,"column":5,"nodeType":"181","messageId":"182","endLine":5,"endColumn":15},{"ruleId":"179","severity":1,"message":"185","line":9,"column":5,"nodeType":"181","messageId":"182","endLine":9,"endColumn":17},{"ruleId":"179","severity":1,"message":"186","line":12,"column":5,"nodeType":"181","messageId":"182","endLine":12,"endColumn":18},{"ruleId":"164","replacedBy":"187"},{"ruleId":"166","replacedBy":"188"},{"ruleId":"179","severity":1,"message":"189","line":10,"column":20,"nodeType":"181","messageId":"182","endLine":10,"endColumn":31},{"ruleId":"190","severity":1,"message":"191","line":50,"column":6,"nodeType":"192","endLine":50,"endColumn":8,"suggestions":"193"},{"ruleId":"175","severity":1,"message":"176","line":66,"column":29,"nodeType":"177","messageId":"178","endLine":66,"endColumn":31},{"ruleId":"175","severity":1,"message":"176","line":104,"column":32,"nodeType":"177","messageId":"178","endLine":104,"endColumn":34},{"ruleId":"179","severity":1,"message":"194","line":2,"column":8,"nodeType":"181","messageId":"182","endLine":2,"endColumn":22},{"ruleId":"179","severity":1,"message":"195","line":4,"column":10,"nodeType":"181","messageId":"182","endLine":4,"endColumn":13},{"ruleId":"179","severity":1,"message":"196","line":4,"column":15,"nodeType":"181","messageId":"182","endLine":4,"endColumn":18},{"ruleId":"179","severity":1,"message":"197","line":4,"column":20,"nodeType":"181","messageId":"182","endLine":4,"endColumn":25},{"ruleId":"179","severity":1,"message":"198","line":4,"column":27,"nodeType":"181","messageId":"182","endLine":4,"endColumn":31},{"ruleId":"179","severity":1,"message":"199","line":4,"column":33,"nodeType":"181","messageId":"182","endLine":4,"endColumn":37},{"ruleId":"179","severity":1,"message":"200","line":4,"column":39,"nodeType":"181","messageId":"182","endLine":4,"endColumn":42},{"ruleId":"179","severity":1,"message":"201","line":4,"column":44,"nodeType":"181","messageId":"182","endLine":4,"endColumn":53},{"ruleId":"179","severity":1,"message":"202","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":20},{"ruleId":"175","severity":1,"message":"176","line":172,"column":29,"nodeType":"177","messageId":"178","endLine":172,"endColumn":31},{"ruleId":"175","severity":1,"message":"176","line":173,"column":35,"nodeType":"177","messageId":"178","endLine":173,"endColumn":37},{"ruleId":"175","severity":1,"message":"176","line":195,"column":19,"nodeType":"177","messageId":"178","endLine":195,"endColumn":21},{"ruleId":"175","severity":1,"message":"176","line":209,"column":20,"nodeType":"177","messageId":"178","endLine":209,"endColumn":22},{"ruleId":"170","severity":1,"message":"171","line":436,"column":47,"nodeType":"172","messageId":"173","endLine":436,"endColumn":49},{"ruleId":"203","severity":1,"message":"204","line":445,"column":19,"nodeType":"205","endLine":445,"endColumn":140},{"ruleId":"203","severity":1,"message":"204","line":451,"column":23,"nodeType":"205","endLine":451,"endColumn":74},{"ruleId":"175","severity":1,"message":"176","line":614,"column":40,"nodeType":"177","messageId":"178","endLine":614,"endColumn":42},{"ruleId":"203","severity":1,"message":"204","line":615,"column":15,"nodeType":"205","endLine":615,"endColumn":93},{"ruleId":"203","severity":1,"message":"204","line":617,"column":15,"nodeType":"205","endLine":617,"endColumn":94},{"ruleId":"203","severity":1,"message":"204","line":624,"column":29,"nodeType":"205","endLine":624,"endColumn":82},{"ruleId":"203","severity":1,"message":"204","line":634,"column":29,"nodeType":"205","endLine":634,"endColumn":78},{"ruleId":"203","severity":1,"message":"204","line":647,"column":31,"nodeType":"205","endLine":647,"endColumn":158},{"ruleId":"203","severity":1,"message":"204","line":658,"column":41,"nodeType":"205","endLine":658,"endColumn":84},{"ruleId":"203","severity":1,"message":"204","line":668,"column":37,"nodeType":"205","endLine":668,"endColumn":89},{"ruleId":"203","severity":1,"message":"204","line":678,"column":33,"nodeType":"205","endLine":678,"endColumn":84},{"ruleId":"203","severity":1,"message":"204","line":688,"column":33,"nodeType":"205","endLine":688,"endColumn":76},{"ruleId":"203","severity":1,"message":"204","line":698,"column":33,"nodeType":"205","endLine":698,"endColumn":84},{"ruleId":"203","severity":1,"message":"204","line":715,"column":29,"nodeType":"205","endLine":715,"endColumn":74},{"ruleId":"203","severity":1,"message":"204","line":733,"column":15,"nodeType":"205","endLine":733,"endColumn":62},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],["206"],["207"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.filter() expects a value to be returned at the end of arrow function.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'googleKey' is defined but never used.","Identifier","unusedVar","'Geocode' is defined but never used.","'secretProd' is assigned a value but never used.","'clientIdProd' is assigned a value but never used.","'googleKeyProd' is assigned a value but never used.",["206"],["207"],"'setmerchant' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.coords'. Either include it or remove the dependency array.","ArrayExpression",["208"],"'MainNavigation' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Image' is defined but never used.","'Card' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Container' is defined but never used.","'PikaButton' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},"Update the dependencies array to be: [props.coords]",{"range":"211","text":"212"},[1590,1592],"[props.coords]"]