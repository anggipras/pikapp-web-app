[{"D:\\PIKAPP\\pikapp-frontend\\src\\index.js":"1","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\AuthLayout.js":"2","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\CartLayout.js":"3","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\StatusLayout.js":"4","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\MerchantQR.js":"5","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\StoreLayout.js":"6","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\ProfileLayout.js":"7","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\MainNavigation.js":"8","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\DetailNavigation.js":"9","D:\\PIKAPP\\pikapp-frontend\\src\\Asset\\Constant\\ColorConstant.js":"10","D:\\PIKAPP\\pikapp-frontend\\src\\Asset\\Constant\\APIConstant.js":"11","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Main\\JumbotronView.js":"12","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Auth\\FormView.js":"13","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Cart\\CartView.js":"14","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Store\\StoreView.js":"15","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Profile\\ProfileView.js":"16","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Status\\StatusView.js":"17","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Button\\PikaButton.js":"18","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Modal\\PikaModal.js":"19","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\TextField\\PikaTextField.js":"20","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Modal\\CartModal.js":"21","D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Reducers\\index.js":"22","D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Reducers\\AllReducers.js":"23","D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Actions\\index.js":"24","D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Actions\\ButtonAction.js":"25","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\ProductLayout.js":"26","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Product\\ProductView.js":"27","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Menu\\MenuDetail.js":"28","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Menu\\MenuSelection.js":"29","D:\\PIKAPP\\pikapp-frontend\\src\\App.js":"30","D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Store.js":"31","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\CartLayoutDev.js":"32","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Cart\\CartViewDev.js":"33","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Modal\\CartModalDev.js":"34"},{"size":485,"mtime":1617790499511,"results":"35","hashOfConfig":"36"},{"size":2443,"mtime":1617961007962,"results":"37","hashOfConfig":"36"},{"size":532,"mtime":1617958739375,"results":"38","hashOfConfig":"36"},{"size":865,"mtime":1614170607873,"results":"39","hashOfConfig":"36"},{"size":3955,"mtime":1617966013583,"results":"40","hashOfConfig":"36"},{"size":646,"mtime":1617686402111,"results":"41","hashOfConfig":"36"},{"size":656,"mtime":1617686402109,"results":"42","hashOfConfig":"36"},{"size":1089,"mtime":1614170607871,"results":"43","hashOfConfig":"36"},{"size":860,"mtime":1617790499495,"results":"44","hashOfConfig":"36"},{"size":80,"mtime":1614170607813,"results":"45","hashOfConfig":"36"},{"size":785,"mtime":1614170607813,"results":"46","hashOfConfig":"36"},{"size":831,"mtime":1614170607877,"results":"47","hashOfConfig":"36"},{"size":13372,"mtime":1617848344961,"results":"48","hashOfConfig":"36"},{"size":29920,"mtime":1618217972336,"results":"49","hashOfConfig":"36"},{"size":13409,"mtime":1618202913149,"results":"50","hashOfConfig":"36"},{"size":6333,"mtime":1617686402123,"results":"51","hashOfConfig":"36"},{"size":25067,"mtime":1617686402126,"results":"52","hashOfConfig":"36"},{"size":991,"mtime":1617686402096,"results":"53","hashOfConfig":"36"},{"size":5545,"mtime":1615274987063,"results":"54","hashOfConfig":"36"},{"size":650,"mtime":1617686402101,"results":"55","hashOfConfig":"36"},{"size":2200,"mtime":1614170607869,"results":"56","hashOfConfig":"36"},{"size":144,"mtime":1617686402114,"results":"57","hashOfConfig":"36"},{"size":1799,"mtime":1617945370431,"results":"58","hashOfConfig":"36"},{"size":30,"mtime":1617686402113,"results":"59","hashOfConfig":"36"},{"size":877,"mtime":1617946483382,"results":"60","hashOfConfig":"36"},{"size":274,"mtime":1617790499497,"results":"61","hashOfConfig":"36"},{"size":43185,"mtime":1617964028351,"results":"62","hashOfConfig":"36"},{"size":17977,"mtime":1618277641102,"results":"63","hashOfConfig":"36"},{"size":30270,"mtime":1618277671681,"results":"64","hashOfConfig":"36"},{"size":1882,"mtime":1617956332370,"results":"65","hashOfConfig":"36"},{"size":169,"mtime":1617946593987,"results":"66","hashOfConfig":"36"},{"size":970,"mtime":1617677766615,"results":"67","hashOfConfig":"36"},{"size":23678,"mtime":1617677745963,"results":"68","hashOfConfig":"36"},{"size":5133,"mtime":1618215079997,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1xfhsff",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"144"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"72"},"D:\\PIKAPP\\pikapp-frontend\\src\\index.js",[],["151","152"],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\AuthLayout.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\CartLayout.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\StatusLayout.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\MerchantQR.js",["153","154","155"],"import React, { useEffect, useState } from \"react\";\r\nimport { geolocated } from \"react-geolocated\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport { address, clientId } from \"../Asset/Constant/APIConstant\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst MerchantResto = (props) => {\r\n  // const [merchant, setmerchant] = useState([\r\n  //   {\r\n  //     address: \"\",\r\n  //     rating: \"\",\r\n  //     logo: \"\",\r\n  //     distance: \"\",\r\n  //     storeId: \"\",\r\n  //     storeName: \"\",\r\n  //     storeDesc: \"\",\r\n  //     storeImage: \"\",\r\n  //   },\r\n  // ]);\r\n  const [longlatad, setlonglat] = useState(\"\");\r\n  const [page, setpage] = useState(0);\r\n  const [pageCond, setpageCond] = useState(false);\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (props.coords) {\r\n      let latitude = props.coords.latitude;\r\n      let longitude = props.coords.longitude;\r\n      let longlat = { lat: latitude, lon: longitude };\r\n      console.log(latitude, longitude);\r\n      localStorage.setItem(\"longlat\", JSON.stringify(longlat));\r\n    } else {\r\n      setlonglat(\"getloc succeed\")\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.coords) {\r\n      let latitude = props.coords.latitude;\r\n      let longitude = props.coords.longitude;\r\n      let longlat = { lat: latitude, lon: longitude };\r\n      console.log(latitude, longitude);\r\n      console.log(longlatad);\r\n      localStorage.setItem(\"longlat\", JSON.stringify(longlat));\r\n      getMerchantData(latitude, longitude)\r\n    }\r\n  });\r\n\r\n  const getMerchantData = (lat, lon) => {\r\n    let addressRoute =\r\n      address + \"home/v2/merchant/\" + lon + \"/\" + lat + \"/ALL/\";\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n\r\n    Axios(addressRoute, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"token\": \"PUBLIC\",\r\n        \"category\": \"1\",\r\n      },\r\n      method: \"GET\",\r\n      params: {\r\n        page: page,\r\n        size: 6\r\n      }\r\n    })\r\n      .then((res) => {\r\n        let responseDatas = res.data.results;\r\n        responseDatas.forEach((dataMerch, indexMerch) => {\r\n          if (dataMerch.mid === props.match.params.mid) {\r\n            // condition where api response and params at url match\r\n            let stateData = []\r\n            stateData.push(dataMerch)\r\n            var currentMerchant = {\r\n              mid: \"\",\r\n              storeName: \"\",\r\n              storeDesc: \"\",\r\n              distance: \"\",\r\n              storeImage: \"\",\r\n              storeAdress: \"\",\r\n              storeRating: \"\",\r\n            };\r\n            currentMerchant.mid = dataMerch.mid;\r\n            currentMerchant.storeName = dataMerch.merchant_name;\r\n            currentMerchant.storeDesc = \"Desc\";\r\n            currentMerchant.distance = dataMerch.merchant_distance;\r\n            currentMerchant.storeImage = dataMerch.merchant_pict;\r\n            currentMerchant.storeAdress = dataMerch.merchant_address;\r\n            currentMerchant.storeRating = dataMerch.merchant_rating;\r\n            Cookies.set(\"currentMerchant\", currentMerchant, { expires: 1 });\r\n            localStorage.setItem('selectedMerchant', JSON.stringify(stateData))\r\n            history.push(\r\n              \"/store?mid=\" +\r\n              dataMerch.mid +\r\n              \"&table=\" +\r\n              props.match.params.notab\r\n            );\r\n          } else {\r\n            if (indexMerch === responseDatas.length-1) {\r\n              let nextPage = page\r\n              nextPage++\r\n              setpage(nextPage)\r\n            }\r\n          }\r\n        })\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default geolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: false,\r\n  },\r\n  userDecisionTimeout: 5000,\r\n})(MerchantResto);\r\n","D:\\PIKAPP\\pikapp-frontend\\src\\Master\\StoreLayout.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\ProfileLayout.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\MainNavigation.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\DetailNavigation.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Asset\\Constant\\ColorConstant.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Asset\\Constant\\APIConstant.js",["156","157","158"],"export const address = \"https://dev-api.pikapp.id/\";\r\n// export const address = \"https://api.pikapp.id/\";\r\n\r\nvar secretDev = \"21f6fc80-cfdb-11ea-87d0-0242ac130003\"\r\nvar secretProd = \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\"\r\nexport const secret = secretDev;\r\n\r\nvar clientIdDev = \"abf0e2a9-e9ee-440f-8563-94481c64b797\"\r\nvar clientIdProd = \"d4aummjdkbzdsd46vygjvcy235ywmhkm\"\r\nexport const clientId = clientIdDev;\r\n// googleKeyDev need to activate billing which later should pay after expired\r\nvar googleKeyProd = \"AIzaSyBMG_JpxmoPEBH6fpveaowU2vkWYrZEw1Y\"\r\nvar googleKeyDev = \"AIzaSyAikqroR5x4BrRv5Yj-tWgUcqvjEKUysh4\"\r\nexport const googleKey = googleKeyDev;\r\n\r\nexport const jwtSecret = \"Er3lzchUa489bdlg35PCaGMKk2YzflBHCMue2jIAy9nFENvokE0JUbwytMFSvrajK8gYDttMdvzWw0OBRydt7pXfAAd1DTxWvE0Hc\"\r\n","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Main\\JumbotronView.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\View\\Auth\\FormView.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\View\\Cart\\CartView.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173"],"import React from \"react\";\r\nimport PikappLogo from \"../../Asset/Logo/logo4x.png\";\r\nimport ArrowDownColor from \"../../Asset/Icon/ArrowDownColor.png\";\r\nimport ArrowRightWhite from \"../../Asset/Icon/ArrowRightWhite.png\";\r\nimport diningTableColor from \"../../Asset/Icon/diningTableColor.png\";\r\nimport takeawayColor from \"../../Asset/Icon/takeawayColor.png\";\r\nimport CashierPayment from \"../../Asset/Icon/CashierPayment.png\";\r\nimport OvoPayment from \"../../Asset/Icon/ovo_icon.png\";\r\nimport checklistLogo from \"../../Asset/Icon/checklist.png\";\r\nimport ArrowBack from \"../../Asset/Icon/arrow-left.png\";\r\n// import { CartModal } from \"../../Component/Modal/CartModal\";\r\nimport CartModalDev from \"../../Component/Modal/CartModalDev\";\r\nimport { cart } from \"../../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, secret, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Loader from 'react-loader'\r\nimport MenuDetail from '../../Component/Menu/MenuDetail'\r\nimport { connect } from \"react-redux\";\r\nimport { EditMenuCart } from '../../Redux/Actions'\r\n\r\nvar options = {\r\n  lines: 13,\r\n  length: 20,\r\n  width: 10,\r\n  radius: 30,\r\n  scale: 0.25,\r\n  corners: 1,\r\n  color: '#000',\r\n  opacity: 0.25,\r\n  rotate: 0,\r\n  direction: 1,\r\n  speed: 1,\r\n  trail: 60,\r\n  fps: 20,\r\n  shadow: false,\r\n  hwaccel: false,\r\n};\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: []\r\n};\r\n\r\nvar currentTotal = 0\r\n\r\nvar finalProduct = [\r\n  {\r\n    totalPrice: 20000,\r\n    discountPrice: 0,\r\n  },\r\n]\r\n\r\nclass CartView extends React.Component {\r\n  state = {\r\n    notable: \"\",\r\n    showModal: false,\r\n    currentModalTitle: \"\",\r\n    paymentOption: \"Pembayaran Di Kasir\",\r\n    paymentType: \"PAY_BY_CASHIER\",\r\n    biz_type: this.props.noTable !== undefined ? this.props.noTable > 0 ? \"DINE_IN\" : \"TAKE_AWAY\" : \"DINE_IN\",\r\n    eat_type: this.props.noTable !== undefined ? this.props.noTable > 0 ? \"Makan Di Tempat\" : \"Bungkus / Takeaway\" : \"Makan Di Tempat\",\r\n    indexOptionEat: this.props.noTable !== undefined ? this.props.noTable > 0 ? 0 : 1 : 0,\r\n    indexOptionPay: 0,\r\n    currentModal: [\r\n      {\r\n        image: \"\",\r\n        option: \"\",\r\n      },\r\n    ],\r\n    loadButton: true,\r\n    showMenuDet: false,\r\n    filteredCart: [],\r\n    currentData: {},\r\n    themid: '',\r\n    indexEdit: 0,\r\n    updateData: ''\r\n  };\r\n\r\n  handleDetail(data) {\r\n    if (data === \"eat-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Pilih Cara Makan Anda\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"dineIn\",\r\n            option: \"Makan Di Tempat\",\r\n          },\r\n          {\r\n            image: \"takeaway\",\r\n            option: \"Takeaway / Bungkus\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"pay-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Bayar Pakai Apa\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"cashier\",\r\n            option: \"Pembayaran Di Kasir\",\r\n          },\r\n          {\r\n            image: \"ovo\",\r\n            option: \"Pembayaran Ovo\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"payment-detail\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Rincian Pembayaran\" });\r\n      this.setState({\r\n        currentModal: finalProduct\r\n      });\r\n    }\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleDecrease(e, ind, mid) {\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    if (e.foodAmount > 1) {\r\n      let filteredStore = []\r\n      allCart.forEach((store) => {\r\n        if (store.mid === mid) {\r\n          filteredStore = store.food.filter((data, index) => {\r\n            return index === ind\r\n          })\r\n\r\n          let { foodAmount, foodTotalPrice } = filteredStore[0]\r\n\r\n          let countAmount = foodTotalPrice - (foodTotalPrice / foodAmount)\r\n\r\n          filteredStore[0].foodTotalPrice = countAmount\r\n          filteredStore[0].foodAmount = foodAmount - 1\r\n          store.food[ind] = filteredStore[0]\r\n        }\r\n      });\r\n\r\n      localStorage.setItem('cart', JSON.stringify(allCart))\r\n      this.setState({ updateData: 'updated' })\r\n    } else {\r\n      let filteredCart;\r\n      let addedMerchants = []\r\n      let newAllCart = []\r\n      allCart.forEach((store) => {\r\n        if (store.mid === mid) {\r\n          let filteredStore = store.food.filter((data, index) => {\r\n            return index !== ind\r\n          })\r\n\r\n          if (filteredStore.length === 0) {\r\n            filteredCart = cart.filter((filterStore) => {\r\n              return filterStore.mid !== store.mid;\r\n            });\r\n            localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\r\n            filteredCart.forEach((cart) => {\r\n              addedMerchants.push(cart.mid)\r\n              Cookies.set(\"addedMerchants\", addedMerchants)\r\n            })\r\n          } else {\r\n            let newFilter = store.food\r\n            newFilter = []\r\n            filteredStore.forEach((val) => {\r\n              newFilter.push(val)\r\n            })\r\n            store.food = newFilter\r\n            newAllCart.push(store)\r\n          }\r\n        } else {\r\n          newAllCart.push(store)\r\n        }\r\n      });\r\n\r\n      if (newAllCart.length < 2) {\r\n        cart.splice(1)\r\n        localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n        window.history.back()\r\n      } else {\r\n        let filterMerchantCart = newAllCart.filter(valueCart => {\r\n          return valueCart.mid === mid\r\n        })\r\n        localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n        if (filterMerchantCart.length) {\r\n          this.setState({ updateData: 'updated' })\r\n        } else {\r\n          window.history.back()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleIncrease(e, ind, mid) {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === ind\r\n        })\r\n\r\n        let { foodAmount, foodTotalPrice } = filteredStore[0]\r\n\r\n        let countAmount = foodTotalPrice + (foodTotalPrice / foodAmount)\r\n\r\n        filteredStore[0].foodTotalPrice = countAmount\r\n        filteredStore[0].foodAmount = foodAmount + 1\r\n        store.food[ind] = filteredStore[0]\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(allCart))\r\n    this.setState({ updateData: 'updated' })\r\n  }\r\n\r\n  handleOption = (data) => {\r\n    let valueTab\r\n    if (this.props.noTable !== undefined) {\r\n      if (this.state.currentModalTitle === \"Pilih Cara Makan Anda\") {\r\n        if (data == 1) {\r\n          valueTab = 0\r\n          valueTab.toString()\r\n          localStorage.setItem('table', valueTab)\r\n        } else {\r\n          valueTab = localStorage.getItem('lastTable')\r\n          valueTab.toString()\r\n          localStorage.setItem('table', valueTab)\r\n        }\r\n      }\r\n    }\r\n    if (this.state.currentModalTitle === \"Pilih Cara Makan Anda\") {\r\n      if (data == 0) {\r\n        this.setState({ biz_type: \"DINE_IN\", eat_type: \"Makan Di Tempat\", indexOptionEat: 0 })\r\n      } else {\r\n        this.setState({ biz_type: \"TAKE_AWAY\", eat_type: \"Bungkus / Takeaway\", indexOptionEat: data })\r\n      }\r\n    } else if (this.state.currentModalTitle === \"Bayar Pakai Apa\") {\r\n      if (data === 0) {\r\n        this.setState({ paymentType: \"PAY_BY_CASHIER\", paymentOption: \"Pembayaran Di Kasir\", indexOptionPay: 0 })\r\n      } else {\r\n        this.setState({ paymentType: \"WALLET_OVO\", paymentOption: \"Pembayaran Ovo\", indexOptionPay: data })\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePayment = () => {\r\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    let storageData = JSON.parse(localStorage.getItem('cart'))\r\n    let noTab = this.props.noTable ? this.props.noTable : 0\r\n    let allMenu = storageData.filter(filterCart => {\r\n      return filterCart.mid === currentCartMerchant.mid\r\n    })\r\n    let selectedProd = []\r\n\r\n    allMenu[0].food.forEach(selectMenu => {\r\n      let newlistArr = ''\r\n      selectMenu.foodListCheckbox.forEach((val) => {\r\n        val.forEach((val2) => {\r\n          return newlistArr += `${val2.name}, `\r\n        })\r\n      })\r\n\r\n      selectMenu.foodListRadio.forEach((val) => {\r\n        val.forEach((val2) => {\r\n          return newlistArr += `${val2.name}, `\r\n        })\r\n      })\r\n\r\n      newlistArr += selectMenu.foodNote\r\n\r\n      selectedProd.push({\r\n        product_id: selectMenu.productId,\r\n        notes: newlistArr,\r\n        qty: selectMenu.foodAmount\r\n      })\r\n    })\r\n\r\n    console.log(selectedProd);\r\n    console.log(this.state.paymentType);\r\n    console.log(finalProduct[0].totalPrice.toString());\r\n    console.log(this.state.biz_type);\r\n    console.log(currentCartMerchant.mid);\r\n    console.log(noTab.toString());\r\n\r\n    // this.setState({ loadButton: false })\r\n\r\n\r\n    // let merchantIds = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n    // merchantIds = merchantIds.filter((merchant) => {\r\n    //   return merchant !== \"\"\r\n    // })\r\n    // let uuid = uuidV4();\r\n    // uuid = uuid.replaceAll(\"-\", \"\");\r\n    // const date = new Date().toISOString();\r\n    // let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n\r\n    // merchantIds.forEach((merchant) => {\r\n    //   var requestData = {\r\n    //     products: [{\r\n    //       product_id: \"\",\r\n    //       notes: \"\",\r\n    //       qty: 0\r\n    //     }],\r\n    //     payment_with: this.state.paymentType,\r\n    //     mid: merchant,\r\n    //     prices: totalAmount,\r\n    //     biz_type: this.state.biz_type,\r\n    //     table_no: \"1\"\r\n    //   }\r\n    //   requestData.products.pop()\r\n    //   cart.forEach((merchant) => {\r\n    //     let addedMerchants = Cookies.get(\"addedMerchants\")\r\n    //     if (addedMerchants.includes(merchant.mid)) {\r\n    //       merchant.food.forEach((data) => {\r\n    //         if (data.productId !== \"\") {\r\n    //           requestData.products.push({\r\n    //             product_id: data.productId,\r\n    //             notes: data.foodNote,\r\n    //             qty: data.foodAmount,\r\n    //           })\r\n    //         }\r\n    //       })\r\n    //     }\r\n    //   })\r\n\r\n    //   Axios(address + \"/txn/v1/txn-post/\", {\r\n    //     headers: {\r\n    //       \"Content-Type\": \"application/json\",\r\n    //       \"x-request-id\": uuid,\r\n    //       \"x-request-timestamp\": date,\r\n    //       \"x-client-id\": clientId,\r\n    //       \"x-signature\": signature,\r\n    //       \"token\": auth.token,\r\n    //     },\r\n    //     method: \"POST\",\r\n    //     data: requestData,\r\n    //   })\r\n    //     .then((res) => {\r\n    //       localStorage.removeItem(\"cart\")\r\n    //       alert(\"Pembelian telah berhasil.\")\r\n    //       window.location.href = \"/status\"\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       if (err.response.data !== undefined) {\r\n    //         alert(err.response.data.err_message)\r\n    //         this.setState({ loadButton: true })\r\n    //       }\r\n    //     });\r\n    // })\r\n  };\r\n\r\n  newListAllChoices = (food) => {\r\n    let newlistArr = ''\r\n    food.foodListCheckbox.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    food.foodListRadio.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name}, `\r\n      })\r\n    })\r\n    return <h5 className='cartList-content-choice'>{newlistArr}</h5>\r\n  }\r\n\r\n  onEditCart = (ind, mid) => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === ind\r\n        })\r\n      }\r\n    });\r\n\r\n    var objFilteredCart = {\r\n      productId: filteredStore[0].productId,\r\n      foodName: filteredStore[0].foodName,\r\n      foodDesc: \"\",\r\n      foodCategory: filteredStore[0].foodCategory,\r\n      foodPrice: filteredStore[0].foodPrice,\r\n      foodImage: filteredStore[0].foodImage,\r\n      foodNote: filteredStore[0].foodNote,\r\n      foodListCheckbox: filteredStore[0].foodListCheckbox,\r\n      foodListRadio: filteredStore[0].foodListRadio,\r\n      foodTotalPrice: filteredStore[0].foodTotalPrice,\r\n      foodExt: [\r\n        {\r\n          name: \"\",\r\n          amount: filteredStore[0].foodAmount,\r\n        },\r\n      ],\r\n    }\r\n\r\n    this.setState({ showMenuDet: true, filteredCart: filteredStore, currentData: objFilteredCart, indexEdit: ind, themid: mid })\r\n    this.props.EditMenuCart(true)\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  handleCartAmount = (price) => {\r\n    currentTotal = price\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleAmount={this.handleCartAmount}\r\n          handleClick={this.handleSaveCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data\r\n  }\r\n\r\n  handleSaveCart = () => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === this.state.themid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === this.state.indexEdit\r\n        })\r\n\r\n        filteredStore[0].foodAmount = currentExt.detailCategory[0].amount\r\n        filteredStore[0].foodListCheckbox = currentExt.listcheckbox\r\n        filteredStore[0].foodListRadio = currentExt.listradio\r\n        filteredStore[0].foodNote = currentExt.note\r\n        filteredStore[0].foodTotalPrice = currentTotal\r\n\r\n        store.food[this.state.indexEdit] = filteredStore[0]\r\n      }\r\n    });\r\n    localStorage.setItem('cart', JSON.stringify(allCart))\r\n    this.setState({ updateData: 'updated' })\r\n  }\r\n\r\n  render() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      window.location.href = \"/login\"\r\n    }\r\n    let modal;\r\n    // let paymentButton;\r\n    // if (auth.isLoggedIn === false) {\r\n    //   paymentButton = (\r\n    //     <Link to={\"/login\"} className={\"iconButton\"}>\r\n    //       <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n    //       <img src={frontIcon} alt={\"checklist\"} />\r\n    //     </Link>\r\n    //   );\r\n    // } else {\r\n    //   if (this.state.loadButton) {\r\n    //     paymentButton = (\r\n    //       <button className={\"iconButton\"} onClick={() => this.handlePayment()}>\r\n    //         <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n    //         <img src={frontIcon} alt={\"checklist\"} />\r\n    //       </button>\r\n    //     );\r\n    //   } else {\r\n    //     paymentButton = (\r\n    //       <Loader loaded={this.state.loadButton} options={options} className=\"spinner\" />\r\n    //     )\r\n    //   }\r\n    // }\r\n\r\n    if (this.state.showModal === true) {\r\n      modal = (\r\n        <CartModalDev\r\n          isShow={this.state.showModal}\r\n          onHide={() => this.setModal(false)}\r\n          title={this.state.currentModalTitle}\r\n          detailOptions={this.state.currentModal}\r\n          handleData={this.handleOption}\r\n          indexOptionEat={this.state.indexOptionEat}\r\n          indexOptionPay={this.state.indexOptionPay}\r\n        />\r\n      );\r\n    } else {\r\n      modal = <></>\r\n    }\r\n\r\n    let storageData = JSON.parse(localStorage.getItem('cart'))\r\n    let data = storageData;\r\n    let storeList = data.filter((store) => {\r\n      if (store.mid !== \"\") {\r\n        return store;\r\n      }\r\n    });\r\n\r\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    let contentView = storeList.map((store) => {\r\n      let storeFood\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        storeFood = store.food.map((food, index) => {\r\n          return (\r\n            <div key={index} className='cartList-content'>\r\n              <div className='cartList-content-frame'>\r\n                <img className='cartList-content-image' src={food.foodImage} alt='' />\r\n              </div>\r\n\r\n              <div className='cartList-content-detail'>\r\n                <div className='cartList-content-detail-left'>\r\n                  <h2 className='cartList-content-title'>{food.foodName}</h2>\r\n                  {this.newListAllChoices(food)}\r\n                  <h5 className='cartList-content-notes'>{food.foodNote}</h5>\r\n                  <h3 className='cartList-content-price'>{Intl.NumberFormat(\"id-ID\").format(food.foodTotalPrice)}</h3>\r\n                </div>\r\n\r\n                <div className='cartList-content-detail-right'>\r\n                  <div className='cartList-editButton' onClick={() => this.onEditCart(index, store.mid)}>\r\n                    <div className='cartList-editWord'>EDIT</div>\r\n                  </div>\r\n\r\n                  <div className='cartList-amountBox'>\r\n                    <div className='cartList-amountBox-inside'>\r\n                      <div className='cartList-minusBox' onClick={() => this.handleDecrease(food, index, store.mid)}>\r\n                        <div className='cartList-minusSym'>\r\n                          -\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className='cartList-numberArea'>\r\n                        {food.foodAmount}\r\n                      </div>\r\n\r\n                      <div className='cartList-plusBox' onClick={() => this.handleIncrease(food, index, store.mid)}>\r\n                        <div className='cartList-plusSym'>\r\n                          +\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      return storeFood\r\n    });\r\n\r\n    let detailView = storeList.map((store, index) => {\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        return (\r\n          <div key={index} className='cart-storeBox'>\r\n            <div className='cart-storeBox-header'>\r\n              <div className='cart-storeBox-title'>\r\n                {store.storeName}\r\n              </div>\r\n\r\n              <div className='cart-storeBox-distance'>\r\n                {store.storeDistance}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='cart-storeBox-content'>\r\n              <h4 className='cart-storeBox-descArea'>\r\n                {store.storeDesc}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    });\r\n\r\n    let totalPaymentShow = storeList.map(store => {\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        let countAllProduct = 0\r\n        store.food.forEach(food => {\r\n          countAllProduct += food.foodTotalPrice\r\n        })\r\n        return countAllProduct\r\n      }\r\n    });\r\n\r\n    finalProduct = [\r\n      {\r\n        totalPrice: totalPaymentShow[0],\r\n        discountPrice: 0,\r\n      },\r\n    ]\r\n\r\n    let paymentImage;\r\n    let eatImage;\r\n    if (this.state.biz_type === \"DINE_IN\") {\r\n      eatImage = diningTableColor;\r\n    } else if (this.state.biz_type === \"TAKE_AWAY\") {\r\n      eatImage = takeawayColor;\r\n    }\r\n    if (this.state.paymentType === \"PAY_BY_CASHIER\") {\r\n      paymentImage = CashierPayment\r\n    } else if (this.state.paymentType === \"WALLET_OVO\") {\r\n      paymentImage = OvoPayment\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className='cartLayout'>\r\n          <div className='cartTitle'>\r\n            <span className='logopikappCenter' onClick={() => window.history.back()} >\r\n              <img className='LogoPikappCart' src={ArrowBack} alt='' />\r\n            </span>\r\n\r\n            <h2 className='confirmationOrder'>Konfirmasi Pesanan Anda</h2>\r\n          </div>\r\n\r\n          <div className='cartContent'>\r\n            <div className='cart-LeftSide'>\r\n              <div className='cartList'>\r\n                <div className='cartList-header'>\r\n                  <h4 className='cartList-title'>\r\n                    Item Yang Dibeli\r\n                  </h4>\r\n                </div>\r\n\r\n                {contentView}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='cart-RightSide'>\r\n              <div className='flex-RightSide'>\r\n                {detailView}\r\n\r\n                <div className='cart-foodService' onClick={() => this.handleDetail(\"eat-method\")}>\r\n                  <div className='cart-foodService-header'>\r\n                    <div className='cart-foodService-title'>\r\n                      Pilih Cara Makan Anda\r\n                    </div>\r\n\r\n                    <div className='cart-foodService-selectButton' >\r\n                      <img className='cart-foodService-selectIcon' src={ArrowDownColor} alt='' />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className='cart-foodService-content'>\r\n                    <div className='cart-foodService-descArea'>\r\n                      <span>\r\n                        <img className='cart-foodService-logo' src={eatImage} alt='' />\r\n                      </span>\r\n\r\n                      <h3 className='cart-foodService-words'>\r\n                        {this.state.eat_type}\r\n                      </h3>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='cart-paymentService' onClick={() => this.handleDetail(\"pay-method\")}>\r\n                  <div className='cart-paymentService-header'>\r\n                    <div className='cart-paymentService-title'>\r\n                      Bayar Pakai Apa?\r\n                    </div>\r\n\r\n                    <div className='cart-paymentService-selectButton'>\r\n                      <img className='cart-paymentService-selectIcon' src={ArrowDownColor} alt='' />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className='cart-paymentService-content'>\r\n                    <div className='cart-paymentService-descArea'>\r\n                      <span>\r\n                        <img className='cart-paymentService-logo' src={paymentImage} alt='' />\r\n                      </span>\r\n\r\n                      <h3 className='cart-paymentService-words'>\r\n                        {this.state.paymentOption}\r\n                      </h3>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='cart-checkoutArea'>\r\n                  <div className='cart-TotalAmount' onClick={() => this.handleDetail(\"payment-detail\")}>\r\n                    <h3 className='cart-TotalAmount-title'>Total Bayar</h3>\r\n\r\n                    <div className='cart-TotalAmount-bottom'>\r\n                      <h2 className='cart-TotalAmount-price'>Rp. {Intl.NumberFormat(\"id-ID\").format(totalPaymentShow)}</h2>\r\n\r\n                      <img className='cart-TotalAmount-detailArrow' src={ArrowDownColor} alt='' />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className='cart-OrderButton' onClick={() => this.handlePayment()}>\r\n                    <div className='cart-OrderButton-content'>\r\n                      <span className='cart-OrderButton-Frame'>\r\n                        <img className='cart-OrderButton-checklist' src={checklistLogo} alt='' />\r\n                      </span>\r\n\r\n                      <h1 className='cart-OrderButton-word'>PESAN</h1>\r\n                    </div>\r\n\r\n                    <span>\r\n                      <img className='cart-OrderButton-orderArrow' src={ArrowRightWhite} alt='' />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='cartLayout-mob'>\r\n          <div className='cart-checkoutArea-mob'>\r\n\r\n            <div className='cart-TotalAmount-mob' onClick={() => this.handleDetail(\"payment-detail\")}>\r\n              <h3 className='cart-TotalAmount-title-mob'>Total Bayar</h3>\r\n\r\n              <div className='cart-TotalAmount-bottom-mob'>\r\n                <h2 className='cart-TotalAmount-price-mob'>Rp. {Intl.NumberFormat(\"id-ID\").format(totalPaymentShow)}</h2>\r\n\r\n                <span className='cart-TotalAmount-detailArrowCenter-mob'>\r\n                  <img className='cart-TotalAmount-detailArrow-mob' src={ArrowDownColor} alt='' />\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='cart-OrderButton-mob' onClick={() => this.handlePayment()}>\r\n              <div className='cart-OrderButton-content-mob'>\r\n                <span className='cart-OrderButton-Frame-mob'>\r\n                  <img className='cart-OrderButton-checklist-mob' src={checklistLogo} alt='' />\r\n                </span>\r\n\r\n                <h1 className='cart-OrderButton-word-mob'>PESAN</h1>\r\n              </div>\r\n\r\n              <span className='cart-OrderButton-orderArrowCenter-mob'>\r\n                <img className='cart-OrderButton-orderArrow-mob' src={ArrowRightWhite} alt='' />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {modal}\r\n        {this.menuDetail()}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col><p className={\"cartTitle\"}>Pilih cara makan anda</p></Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={1}>\r\n                <img src={eatImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>{this.state.eat_type}</Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"eat-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Bayar pakai apa?</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={1}>\r\n                <img src={paymentImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>\r\n                {this.state.paymentOption}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"pay-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        {contentView}\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Rincian Pembayaran</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Total harga barang:</p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Diskon:</p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(totalAmount)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(0)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className={\"cartPayment\"}>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Total Belanja Kamu</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartFinalPrice\"}>\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(totalAmount)}\r\n                </p>\r\n              </Col>\r\n              <Col className={\"cartFinalButton\"}>{paymentButton}</Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        {modal}\r\n        {this.menuDetail()} */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { EditMenuCart })(CartView)","D:\\PIKAPP\\pikapp-frontend\\src\\View\\Store\\StoreView.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\View\\Profile\\ProfileView.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\View\\Status\\StatusView.js",["174","175","176","177"],"import React from \"react\";\r\nimport { Row, Col, Nav, Card, Modal } from \"react-bootstrap\";\r\nimport unpaidIcon from \"../../Asset/Icon/unpaid_status.png\";\r\nimport unpaidActiveIcon from \"../../Asset/Icon/unpaid_active_status.png\";\r\nimport packIcon from \"../../Asset/Icon/pack_status.png\";\r\nimport packActiveIcon from \"../../Asset/Icon/pack_active_status.png\";\r\nimport sendIcon from \"../../Asset/Icon/send_status.png\";\r\nimport sendActiveIcon from \"../../Asset/Icon/send_active_status.png\";\r\nimport reviewIcon from \"../../Asset/Icon/review_status.png\";\r\nimport reviewActiveIcon from \"../../Asset/Icon/review_active_status.png\";\r\nimport placeholderIcon from \"../../Asset/Icon/placeholder_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport categoryFoodIcon from \"../../Asset/Icon/category_food_icon.png\";\r\nimport pickupStatusIcon from \"../../Asset/Icon/pickup_status_icon.png\";\r\nimport cashierStatusIcon from \"../../Asset/Icon/cashier_icon.png\"\r\nimport ovoIcon from \"../../Asset/Icon/ovo_icon.png\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport Axios from \"axios\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport Cookies from \"js-cookie\"\r\n\r\nexport class StatusView extends React.Component {\r\n  state = {\r\n    showModal: false,\r\n    activeTab: 1,\r\n    data: [\r\n      {\r\n        title: \"\",\r\n        distance: \"\",\r\n        quantity: \"\",\r\n        status: \"\",\r\n        biz_type: \"\",\r\n        payment: \"\",\r\n        transactionId: \"\",\r\n        transactionTime: \"\",\r\n      },\r\n    ],\r\n    currentModal: {\r\n      transactionId: \"\",\r\n      transactionTime:\"\",\r\n      storeName: \"Store\",\r\n      storeLocation: \"Location\",\r\n      storeDistance: \"Distance\",\r\n      status: \"Status\",\r\n      payment: \"Cash\",\r\n      biz_type: \"\",\r\n      food: [\r\n        {\r\n          productId: \"\",\r\n          name: \"\",\r\n          price: 0,\r\n          image: \"\",\r\n          note: \"\",\r\n          quantity: 1,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n  handleDetail(transId) {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/\" + transId + \"/txn-detail/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var resultModal = {...this.currentModal}\r\n        resultModal.transactionId = results.transaction_id\r\n        resultModal.transactionTime = results.transaction_time\r\n        resultModal.storeName = results.merchant_name\r\n        resultModal.storeDistance = \"\"\r\n        resultModal.storeLocation = \"\"\r\n        resultModal.status = results.status\r\n        resultModal.biz_type = results.biz_type\r\n        resultModal.payment = results.payment_with\r\n        resultModal.food = []\r\n        results.detail_products.forEach((product) => {\r\n          resultModal.food.push({\r\n            name: product.product_name,\r\n            price: product.price,\r\n            quantity: product.qty,\r\n            image: product.image,\r\n            note: product.notes\r\n          })\r\n        })\r\n        this.setState({\r\n          currentModal: resultModal\r\n        })\r\n      })\r\n      .catch((err) => {\r\n      });\r\n      \r\n    this.setModal(true);\r\n  }\r\n\r\n  handleSelect(tabIndex) {\r\n    this.setState({ activeTab: tabIndex });\r\n  }\r\n\r\n  componentDidMount() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/txn-history/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var stateData = {...this.state}\r\n        stateData.data.pop()\r\n        results.forEach((result) => {\r\n          stateData.data.push({\r\n            title: result.merchant_name,\r\n            distance: \"\",\r\n            quantity: result.total_product,\r\n            status: result.status,\r\n            biz_type: result.biz_type,\r\n            payment: result.payment_with,\r\n            transactionId: result.transaction_id,\r\n            transactionTime: result.transaction_time,\r\n          })\r\n        })\r\n        this.setState({data: stateData.data});\r\n      })\r\n      .catch((err) => {\r\n      });\r\n    // var state = { ...this.state };\r\n    // state.data.pop();\r\n    // state.data.push({\r\n    //   title: \"Food1\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food4\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food2\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"pick\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food3\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"send\",\r\n    // });\r\n    // this.setState({ data: state.data });\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    let modalList = this.state.currentModal.food;\r\n\r\n    let modalListView = modalList.map((data) => {\r\n      return (\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={placeholderIcon} class=\"statusFoodIcon\" alt=\"food icon\"/>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodname\">{data.name}</p>\r\n                <p class=\"statusFoodPrice\">\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(data.price)}\r\n                </p>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodQuantity\">{data.quantity}x</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <p class=\"statusFoodNote\">Catatan: {data.note}</p>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    });\r\n    let currentTotal = 0;\r\n    modalList.forEach((data) => {\r\n      currentTotal = currentTotal + data.price * data.quantity;\r\n    });\r\n    if (this.state.showModal === true) {\r\n      let payImage;\r\n      let payLabel;\r\n      if(this.state.currentModal.payment === \"PAY_BY_CASHIER\") {\r\n        payImage = cashierStatusIcon;\r\n        payLabel = \"Cashier\"\r\n      } else if(this.state.currentModal.payment === \"WALLET\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Cash\"\r\n      } else if(this.state.currentModal.payment === \"VA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Virtual\"\r\n      } else if(this.state.currentModal.payment === \"WALLET_OVO\") {\r\n        payImage = ovoIcon;\r\n        payLabel = \"OVO\"\r\n      } else if(this.state.currentModal.payment === \"WALLET_DANA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"DANA\"\r\n      } \r\n      modal = (\r\n        <Modal\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n          show={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              <p class=\"statusNoteLabel\">No Pesanan.</p>\r\n              <p class=\"statusNoteHeader\">{this.state.currentModal.transactionId}</p>\r\n              <p class=\"statusNoteLabel\">{this.state.currentModal.transactionTime}</p>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={categoryFoodIcon} class=\"statusStoreIcon\" alt=\"category icon\"/>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusStoreName\">\r\n                  {this.state.currentModal.storeName}\r\n                </p>\r\n                <p class=\"statusStoreLabel\">store location</p>\r\n                <p class=\"statusStoreLocation\">\r\n                  {this.state.currentModal.storeLocation}\r\n                </p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={pickupStatusIcon} class=\"statusStoreStatusIcon\"  alt=\"pickup status\"/>\r\n              </Col>\r\n              <Col>\r\n                <span class=\"statusStoreLabel\">status: </span>\r\n                <span class=\"statusStoreStatus\">\r\n                  {this.state.currentModal.status}\r\n                </span>\r\n                <span class=\"statusStoreDistance\">\r\n                  {this.state.currentModal.storeDistance}\r\n                </span>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStorePaymentLabel\">Metode Pembayaran</p>\r\n                <img src={payImage} class=\"statusFoodIcon\" alt=\"status icon\"></img>\r\n                <span class=\"statusStorePayment\">\r\n                      {payLabel}\r\n                    </span>\r\n              </Col>\r\n            </Row>\r\n            {modalListView}\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStoreTotal\">Total Pembayaran</p>\r\n              </Col>\r\n              <Col>\r\n                {Intl.NumberFormat(\"id-ID\", {\r\n                  style: \"currency\",\r\n                  currency: \"IDR\",\r\n                }).format(currentTotal)}\r\n              </Col>\r\n            </Row>\r\n          </Modal.Body>\r\n          <Modal.Footer />\r\n        </Modal>\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n    let notPaidImage;\r\n    let contentView;\r\n\r\n    let currentState = this.state.activeTab;\r\n    if (currentState === 1) {\r\n      notPaidImage = unpaidActiveIcon;\r\n      contentView = this.state.data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = cashierStatusIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"OPEN\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      notPaidImage = unpaidIcon;\r\n    }\r\n\r\n    let packImage;\r\n    if (currentState === 2) {\r\n      packImage = packActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"PAID\" || value.status === \"MERCHANT_CONFIRM\" || value.status === \"CUSTOMER_ACCEPTED\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      packImage = packIcon;\r\n    }\r\n\r\n    let sendImage;\r\n    if (currentState === 3) {\r\n      sendImage = sendActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"DELIVER\" || value.status === \"ON_PROCESS\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt =\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      sendImage = sendIcon;\r\n    }\r\n\r\n    let reviewImage;\r\n    if (currentState === 4) {\r\n      reviewImage = reviewActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        if (value.status === \"CLOSE\" || value.status === \"FINALIZE\") {\r\n          let bizImage;\r\n          let bizLabel;\r\n          let payImage;\r\n          let payLabel;\r\n          if(value.payment === \"PAY_BY_CASHIER\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cashier\"\r\n          } else if(value.payment === \"WALLET\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cash\"\r\n          } else if(value.payment === \"VA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Virtual\"\r\n          } else if(value.payment === \"WALLET_OVO\") {\r\n            payImage = ovoIcon;\r\n            payLabel = \"OVO\"\r\n          } else if(value.payment === \"WALLET_DANA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"DANA\"\r\n          } \r\n          if(value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if(value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          if(value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if(value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt =\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt = \"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      reviewImage = reviewIcon;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Nav variant=\"tabs\" defaultActiveKey={\"not-paid\"}>\r\n          <Nav.Item>\r\n            <Nav.Link\r\n              eventKey={\"not-paid\"}\r\n              onClick={() => this.handleSelect(1)}\r\n            >\r\n              <Row>\r\n                <img\r\n                  src={notPaidImage}\r\n                  alt={\"unpaid\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Belum Bayar</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"pack\"} onClick={() => this.handleSelect(2)}>\r\n              <Row>\r\n                <img src={packImage} alt={\"pack\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Dikemas</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"send\"} onClick={() => this.handleSelect(3)}>\r\n              <Row>\r\n                <img src={sendImage} alt={\"send\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Siap / Dikirim</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"review\"} onClick={() => this.handleSelect(4)}>\r\n              <Row>\r\n                <img\r\n                  src={reviewImage}\r\n                  alt={\"review\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Beri Penilaian</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        {contentView}\r\n        {modal}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Button\\PikaButton.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Modal\\PikaModal.js",[],["178","179"],"D:\\PIKAPP\\pikapp-frontend\\src\\Component\\TextField\\PikaTextField.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Modal\\CartModal.js",[],["180","181"],"D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Reducers\\index.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Reducers\\AllReducers.js",["182"],"const INITIAL_STATE = {\r\n    buttonLoad: true,\r\n    validQTY: 0,\r\n    openSelect: false,\r\n    foodCateg: '',\r\n    checkboxes: [],\r\n    checkboxesTotal: [],\r\n    mandatCheckCond: false,\r\n    mandatCheck: false,\r\n    radiobutton: [],\r\n    mandatRadioCond: false,\r\n    mandatRadio: false,\r\n    totalAmountProd: 0,\r\n    openMenuCart: false\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return { ...state, buttonLoad: false }\r\n        case \"DONELOAD\":\r\n            return { ...state, buttonLoad: true }\r\n        case \"VALIDATIONQTY\":\r\n            return { ...state, validQTY: action.payload }\r\n        case \"OPENSELECT\":\r\n            return { ...state, openSelect: action.payload }\r\n        case \"FOODCATEG\":\r\n            return { ...state, foodCateg: action.payload }\r\n        case \"CHECKBOXES\":\r\n            return { ...state, checkboxes: action.payload }\r\n        case \"MANDATCHECKCOND\":\r\n            return { ...state, mandatCheckCond: action.payload }\r\n        case \"MANDATCHECK\":\r\n            return { ...state, mandatCheck: action.payload }\r\n        case \"COUNTCHECKBOX\":\r\n            return { ...state, checkboxesTotal: action.payload }\r\n        case \"RADIOBUTTON\":\r\n            return { ...state, radiobutton: action.payload }\r\n        case \"MANDATRADIOCOND\":\r\n            return { ...state, mandatRadioCond: action.payload }\r\n        case \"MANDATRADIO\":\r\n            return { ...state, mandatRadio: action.payload }\r\n        case \"COUNTTOTAL\":\r\n            return { ...state, totalAmountProd: action.payload }\r\n        case \"EDITCART\":\r\n            return { ...state, openMenuCart: action.payload }\r\n        case \"DEFAULTSTATE\":\r\n            return INITIAL_STATE\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Actions\\index.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Actions\\ButtonAction.js",[],["183","184"],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\ProductLayout.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\View\\Product\\ProductView.js",["185","186","187","188","189"],"import React from \"react\";\r\nimport { prominent } from \"color.js\";\r\nimport rgbHex from 'rgb-hex'\r\n// import PikaModal from \"../../Component/Modal/PikaModal\";\r\nimport MenuDetail from \"../../Component/Menu/MenuDetail\";\r\nimport queryString from \"query-string\";\r\n// import { cart } from \"../../App\";\r\nimport cartIcon from \"../../Asset/Icon/cart_icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { address, clientId } from \"../../Asset/Constant/APIConstant\";\r\n// import { v4 as uuidV4 } from \"uuid\";\r\n// import sha256 from \"crypto-js/hmac-sha256\";\r\n// import Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Storeimg2 from '../../Asset/Illustration/storeimg.jpg'\r\nimport Storeimg from '../../Asset/Illustration/storeimg2.png'\r\n// import Productimg from '../../Asset/Illustration/productimg.png'\r\nimport Logopikapp from '../../Asset/Logo/logo4x.png'\r\nimport NotifIcon from '../../Asset/Icon/bell.png'\r\nimport ProfileIcon from '../../Asset/Icon/avatar.png'\r\nimport OpenHourIcon from '../../Asset/Icon/hour.png'\r\nimport CoinIcon from '../../Asset/Icon/coin.png'\r\nimport LocationIcon from '../../Asset/Icon/location.png'\r\nimport PhoneIcon from '../../Asset/Icon/phone.png'\r\nimport StarIcon from '../../Asset/Icon/star.png'\r\nimport ArrowIcon from '../../Asset/Icon/arrowselect.png'\r\nimport Skeleton from 'react-loading-skeleton'\r\nimport { connect } from 'react-redux'\r\nimport { ValidQty, OpenSelect } from '../../Redux/Actions'\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: [],\r\n  foodTotal: 0,\r\n};\r\n\r\nvar currentTotal = 0\r\n\r\nclass ProductView extends React.Component {\r\n  state = {\r\n    page: 0, //products pagination\r\n    size: 3, //set amount of products to be shown in frontend\r\n    boolpage: false,\r\n    productPage: [], //set how many page of product merchant from backend server\r\n    idCateg: [], //set current product page of specific size of loaded products\r\n    testColor: false,\r\n    testingchange: false, //only for testing, would be remove\r\n    showModal: false, // show customization of selected menu such as qty, notes and more advance choice\r\n    showMenuDet: false, //show menu detail\r\n    data: {\r\n      mid: \"\",\r\n      title: \"\",\r\n      image: \"\",\r\n      desc: \"\",\r\n      address: \"\",\r\n      rating: \"\",\r\n      phone: \"\",\r\n      currentData: {\r\n        productId: \"\",\r\n        category: \"\",\r\n        foodName: \"\",\r\n        foodDesc: \"\",\r\n        foodPrice: 0,\r\n        foodImage: \"\",\r\n        foodExt: [\r\n          {\r\n            name: \"\",\r\n            amount: 0,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    backColor1: \"\", //merchant info background color\r\n    backColor2: \"\", //products info background color\r\n    categName: \"All Categories\", //initial for dropdown select\r\n    allProductsandCategories: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //mapping from API\r\n    productCategpersize: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //tobe shown in products area\r\n    choosenIndCateg: null, //index of category selected when load more products in selected category\r\n    counterLoad: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.ValidQty(0)\r\n    document.body.style.backgroundColor = 'white'\r\n    Cookies.set(\"lastProduct\", window.location.href, { expires: 1 })\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      window.location.href = \"/login\"\r\n    }\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    const notab = value.table || \"\"\r\n    let selectedMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\r\n    let filtersizeMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\r\n\r\n    let stateData = { ...this.state.data };\r\n    stateData.mid = mid;\r\n    stateData.title = currentMerchant.storeName;\r\n    stateData.image = currentMerchant.storeImage;\r\n    stateData.desc = currentMerchant.storeDistance;\r\n    stateData.address = currentMerchant.storeAdress;\r\n    stateData.rating = currentMerchant.storeRating;\r\n    stateData.phone = \"081296000823\";\r\n    stateData.notable = notab\r\n    var productCateg = []\r\n    var idCateg = []\r\n    var productPage = []\r\n    productCateg = selectedMerchant[0].categories.map((categ) => {\r\n      idCateg.push(0)\r\n      productPage.push(this.state.size)\r\n      return categ\r\n    })\r\n\r\n    productCateg.forEach((val) => {\r\n      val.category_products = []\r\n    })\r\n\r\n    productCateg.forEach((categProd) => {\r\n      selectedMerchant[0].products.forEach((allproducts) => {\r\n        if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\r\n          categProd.category_products.push({\r\n            productId: allproducts.product_id,\r\n            category: allproducts.product_category,\r\n            foodName: allproducts.product_name,\r\n            foodDesc: \"\",\r\n            foodPrice: allproducts.product_price,\r\n            foodImage: allproducts.product_picture1,\r\n            foodExt: [\r\n              {\r\n                name: \"\",\r\n                amount: 0,\r\n              },\r\n            ],\r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    let productPerSize = filtersizeMerchant[0].categories.map((categ) => {\r\n      return categ\r\n    })\r\n\r\n    productPerSize.forEach((val) => {\r\n      val.category_products = []\r\n    })\r\n\r\n    productPerSize.forEach((categProd) => {\r\n      filtersizeMerchant[0].products.forEach((allproducts) => {\r\n        if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\r\n          categProd.category_products.push({\r\n            productId: allproducts.product_id,\r\n            category: allproducts.product_category,\r\n            foodName: allproducts.product_name,\r\n            foodDesc: \"\",\r\n            foodPrice: allproducts.product_price,\r\n            foodImage: allproducts.product_picture1,\r\n            foodExt: [\r\n              {\r\n                name: \"\",\r\n                amount: 0,\r\n              },\r\n            ],\r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    let firstShownProduct = []\r\n    productPerSize.forEach((categProd, indexcategProd) => {\r\n      firstShownProduct.push(categProd)\r\n      let newFilter = categProd.category_products.filter((valProd, indexvalProd) => {\r\n        return indexvalProd < this.state.size\r\n      })\r\n      categProd.category_products = newFilter\r\n      firstShownProduct[indexcategProd].category_products = []\r\n      firstShownProduct[indexcategProd].category_products = newFilter\r\n    })\r\n\r\n    // console.log(productCateg);\r\n    // console.log(firstShownProduct);\r\n    prominent(Storeimg, { amount: 3 }).then((color) => {\r\n      // return RGB color for example [241, 221, 63]\r\n      var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n      var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n      this.brightenColor(merchantColor, 70, productColor, 60)\r\n      this.setState({ data: stateData, allProductsandCategories: productCateg, productCategpersize: productPerSize, idCateg, productPage });\r\n      document.addEventListener('scroll', this.loadMoreMerchant)\r\n    });\r\n\r\n    // var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n    // var latitude = getLocation.lat\r\n    // var longitude = getLocation.lon\r\n    // const value = queryString.parse(window.location.search);\r\n    // const mid = value.mid;\r\n    // const notab = value.table || \"\"\r\n    // let addressRoute = `${address}home/v2/merchant/${longitude}/${latitude}/${currentMerchant.storeName}/`\r\n    // var stateData;\r\n    // let uuid = uuidV4();\r\n    // uuid = uuid.replaceAll(\"-\", \"\");\r\n    // const date = new Date().toISOString();\r\n    // Axios(addressRoute, {\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     \"x-request-id\": uuid,\r\n    //     \"x-request-timestamp\": date,\r\n    //     \"x-client-id\": clientId,\r\n    //     \"token\": \"PUBLIC\",\r\n    //     \"category\": \"1\",\r\n    //   },\r\n    //   method: \"GET\",\r\n    //   params: {\r\n    //     page: 0,\r\n    //     size: this.state.size\r\n    //   }\r\n    // })\r\n    //   .then((res) => {\r\n    //     stateData = { ...this.state.data };\r\n    //     let responseDatas = res.data.results;\r\n    //     stateData.mid = mid;\r\n    //     stateData.title = currentMerchant.storeName;\r\n    //     stateData.image = currentMerchant.storeImage;\r\n    //     stateData.desc = currentMerchant.storeDistance;\r\n    //     stateData.address = currentMerchant.storeAdress;\r\n    //     stateData.rating = currentMerchant.storeRating;\r\n    //     stateData.phone = \"081296000823\";\r\n    //     stateData.notable = notab\r\n    //     var productCateg = []\r\n    //     var idCateg = []\r\n    //     var pageProduct = []\r\n    //     responseDatas.forEach((data) => {\r\n    //       if (data.mid === mid) {\r\n    //         productCateg = data.categories.map((categ) => {\r\n    //           idCateg.push(1)\r\n    //           pageProduct.push(res.data.total_pages - 1)\r\n    //           return categ\r\n    //         })\r\n\r\n    //         productCateg.forEach((val) => {\r\n    //           val.category_products = []\r\n    //         })\r\n\r\n    //         productCateg.forEach((categProd) => {\r\n    //           data.products.forEach((allproducts) => {\r\n    //             if (categProd.category_id == allproducts.product_category) {\r\n    //               categProd.category_products.push({\r\n    //                 productId: allproducts.product_id,\r\n    //                 category: allproducts.product_category,\r\n    //                 foodName: allproducts.product_name,\r\n    //                 foodDesc: \"\",\r\n    //                 foodPrice: allproducts.product_price,\r\n    //                 foodImage: allproducts.product_picture1,\r\n    //                 foodExt: [\r\n    //                   {\r\n    //                     name: \"\",\r\n    //                     amount: 0,\r\n    //                   },\r\n    //                 ],\r\n    //               })\r\n    //             }\r\n    //           })\r\n    //         })\r\n    //       }\r\n    //     })\r\n    //     console.log(productCateg);\r\n    //     console.log(pageProduct);\r\n    //     console.log(idCateg);\r\n    //     prominent(Storeimg, { amount: 3 }).then((color) => {\r\n    //       // return RGB color for example [241, 221, 63]\r\n    //       var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n    //       var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n    //       this.brightenColor(merchantColor, 70, productColor, 60)\r\n    //       this.setState({ data: stateData, allProductsandCategories: productCateg, idCateg, productPage: pageProduct });\r\n    //       document.addEventListener('scroll', this.loadMoreMerchant)\r\n    //     });\r\n    //   })\r\n    //   .catch((err) => {\r\n    //   });\r\n  }\r\n\r\n  //testing changebackground\r\n  changeBackground = () => {\r\n    this.setState({ testingchange: !this.state.testingchange, testColor: true })\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.testColor === true) {\r\n      if (this.state.testingchange === false) {\r\n        prominent(Storeimg, { amount: 3 }).then((color) => {\r\n          var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n          var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n          this.brightenColor(merchantColor, 70, productColor, 60)\r\n        });\r\n      } else {\r\n        prominent(Storeimg2, { amount: 3 }).then((color) => {\r\n          var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n          var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n          this.brightenColor(merchantColor, 70, productColor, 60)\r\n        });\r\n      }\r\n    }\r\n\r\n    // if (this.state.idCateg) { //load more products with selected index of category\r\n    //   this.state.idCateg.forEach((val, index) => {\r\n    //     if (index === this.state.choosenIndCateg) {\r\n    //       if (val > 0) {\r\n    //         if (this.state.boolpage === true) {\r\n    //           this.loadProducts(index)\r\n    //         } else {\r\n    //           document.addEventListener('scroll', this.loadMoreMerchant)\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   })\r\n    // }\r\n\r\n    if (this.state.idCateg[this.state.choosenIndCateg] > 0) { //load more products with selected index of category\r\n      if (this.state.boolpage === true) {\r\n        this.loadProducts(this.state.choosenIndCateg)\r\n      } else {\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n      }\r\n    }\r\n\r\n  }\r\n  //testing changebackground\r\n\r\n  brightenColor = (hex, percent, hex2, percent2) => {\r\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\r\n    //backColor1\r\n    if (hex.length == 3) {\r\n      hex = hex.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r = parseInt(hex.substr(0, 2), 16),\r\n      g = parseInt(hex.substr(2, 2), 16),\r\n      b = parseInt(hex.substr(4, 2), 16);\r\n\r\n    let brightColor = '#' +\r\n      ((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16)).substr(1);\r\n\r\n    //backColor2\r\n    if (hex2.length == 3) {\r\n      hex2 = hex2.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r2 = parseInt(hex2.substr(0, 2), 16),\r\n      g2 = parseInt(hex2.substr(2, 2), 16),\r\n      b2 = parseInt(hex2.substr(4, 2), 16);\r\n\r\n    let brightColor2 = '#' +\r\n      ((0 | (1 << 8) + r2 + (256 - r2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + g2 + (256 - g2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + b2 + (256 - b2) * percent2 / 100).toString(16)).substr(1);\r\n\r\n    this.setState({ backColor1: brightColor, backColor2: brightColor2, testColor: false })\r\n    document.body.style.backgroundColor = '#' + hex;\r\n  }\r\n\r\n  loadProducts = (indexOfCateg) => {\r\n    let getindexProd = this.state.allProductsandCategories[indexOfCateg].category_products\r\n    let loadtheProd = getindexProd.filter((valProd, indvalProd) => {\r\n      return indvalProd >= this.state.idCateg[indexOfCateg] && indvalProd < this.state.productPage[indexOfCateg]\r\n    })\r\n\r\n    let updatedProduct = this.state.productCategpersize\r\n    updatedProduct.forEach((value, index) => {\r\n      if (index === indexOfCateg) {\r\n        loadtheProd.forEach((valLoadProd) => {\r\n          value.category_products.push(valLoadProd)\r\n        })\r\n      }\r\n    })\r\n\r\n    this.setState({ boolpage: false, productCategpersize: updatedProduct })\r\n    document.addEventListener('scroll', this.loadMoreMerchant)\r\n\r\n    // const value = queryString.parse(window.location.search);\r\n    // const mid = value.mid;\r\n    // var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n    // var latitude = getLocation.lat\r\n    // var longitude = getLocation.lon\r\n    // let addressRoute = `${address}home/v2/merchant/${longitude}/${latitude}/ALL/`\r\n    // var stateData;\r\n    // let uuid = uuidV4();\r\n    // uuid = uuid.replaceAll(\"-\", \"\");\r\n    // const date = new Date().toISOString();\r\n    // var inputPage = this.state.idCateg\r\n    // inputPage[indexOfCateg] -= 1\r\n    // Axios(addressRoute, {\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     \"x-request-id\": uuid,\r\n    //     \"x-request-timestamp\": date,\r\n    //     \"x-client-id\": clientId,\r\n    //     \"token\": \"PUBLIC\",\r\n    //     \"category\": \"1\",\r\n    //   },\r\n    //   method: \"GET\",\r\n    //   params: {\r\n    //     page: inputPage[indexOfCateg],\r\n    //     size: this.state.size\r\n    //   }\r\n    // })\r\n    //   .then((res) => {\r\n    //     stateData = { ...this.state.data };\r\n    //     let responseDatas = res.data.results;\r\n    //     responseDatas.forEach((data) => {\r\n    //       if (data.mid === mid) {\r\n    //         this.state.productCategpersize.forEach((categProd, indexAllCateg) => {\r\n    //           data.products.forEach((allproducts) => {\r\n    //             if (categProd.category_id == allproducts.product_category) {\r\n    //               if (indexAllCateg == indexOfCateg) {\r\n    //                 categProd.category_products.push({\r\n    //                   productId: allproducts.product_id,\r\n    //                   category: allproducts.product_category,\r\n    //                   foodName: allproducts.product_name,\r\n    //                   foodDesc: \"\",\r\n    //                   foodPrice: allproducts.product_price,\r\n    //                   foodImage: allproducts.product_picture1,\r\n    //                   foodExt: [\r\n    //                     {\r\n    //                       name: \"\",\r\n    //                       amount: 0,\r\n    //                     },\r\n    //                   ],\r\n    //                 })\r\n    //               }\r\n    //             }\r\n    //           })\r\n    //         })\r\n    //       }\r\n    //     })\r\n    //     this.setState({ boolpage: false })\r\n    //     document.addEventListener('scroll', this.loadMoreMerchant)\r\n    //   })\r\n    //   .catch((err) => {\r\n    //   });\r\n  }\r\n\r\n  handlePhone = (phone) => { //go to Whatsapp chat\r\n    phone.substring(1)\r\n    let waNumber = '62' + phone\r\n    window.location.href = `https://wa.me/${waNumber}`\r\n  }\r\n\r\n  handleDetail(data) {\r\n    this.setState({ currentData: data });\r\n    this.setState({ showMenuDet: true });\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data;\r\n  };\r\n\r\n  handleAddCart = () => {\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    this.setModal(false);\r\n    var isStorePresent = false;\r\n    let cart = JSON.parse(localStorage.getItem('cart'))\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        isStorePresent = true;\r\n      }\r\n    });\r\n\r\n    let duplicateProduct = []\r\n    var isDuplicate = false;\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        data.food.forEach((food) => {\r\n          if (food.productId === this.state.currentData.productId) {\r\n            isDuplicate = true;\r\n            duplicateProduct.push(food)\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    var isDuplicateSelection = false\r\n    let indexOfspesificCart = 0 //get index of spesific cart product after break loop or match condition\r\n    if (isStorePresent && isDuplicate) {\r\n      let countAllSelection = 0\r\n      let sizecartArr = 0 //size cart of spesific index\r\n      let sizecurrentArr = 0 //size current selected menu\r\n\r\n      //loop list checkbox from current menu selection\r\n      currentExt.listcheckbox.forEach((currentfirstVal) => {\r\n        currentfirstVal.forEach((currentnestedVal) => {\r\n          if (currentnestedVal.name) {\r\n            sizecurrentArr += 1\r\n          }\r\n        })\r\n      })\r\n\r\n      //loop list radio from current menu selection\r\n      currentExt.listradio.forEach((currentfirstVal) => {\r\n        currentfirstVal.forEach((currentnestedVal) => {\r\n          if (currentnestedVal.name) {\r\n            sizecurrentArr += 1\r\n          }\r\n        })\r\n      })\r\n\r\n      let boolSpesificInd = true //to break following loop\r\n      duplicateProduct.forEach((menuProd, index) => {\r\n        if (boolSpesificInd) {\r\n          //loop list checkbox from cart\r\n          menuProd.foodListCheckbox.forEach(firstVal => {\r\n            firstVal.forEach(nestedVal => {\r\n              if (nestedVal.name) {\r\n                sizecartArr += 1\r\n              }\r\n            })\r\n          })\r\n\r\n          //loop list radio from cart\r\n          menuProd.foodListRadio.forEach(firstVal => {\r\n            firstVal.forEach(nestedVal => {\r\n              if (nestedVal.name) {\r\n                sizecartArr += 1\r\n              }\r\n            })\r\n          })\r\n\r\n          console.log(sizecartArr);\r\n          console.log(sizecurrentArr);\r\n          if (sizecartArr === sizecurrentArr) {\r\n            menuProd.foodListCheckbox.forEach((firstVal) => {\r\n              firstVal.forEach((nestedVal) => {\r\n\r\n                //loop listcheckbox from current advance selection to be match with added cart\r\n                currentExt.listcheckbox.forEach((currentfirstVal) => {\r\n                  currentfirstVal.forEach((currentnestedVal) => {\r\n                    if (nestedVal.name === currentnestedVal.name) {\r\n                      countAllSelection += 1\r\n                    }\r\n                  })\r\n                })\r\n              })\r\n            })\r\n\r\n            // loop radio from added cart\r\n            menuProd.foodListRadio.forEach((firstVal) => {\r\n              firstVal.forEach((nestedVal) => {\r\n\r\n                //loop radio from current advance selection to be match with added cart\r\n                currentExt.listradio.forEach((currentfirstVal) => {\r\n                  currentfirstVal.forEach((currentnestedVal) => {\r\n                    if (nestedVal.name === currentnestedVal.name) {\r\n                      countAllSelection += 1\r\n                    }\r\n                  })\r\n                })\r\n              })\r\n            })\r\n\r\n            if (sizecartArr === countAllSelection) {\r\n              if (menuProd.foodNote === currentExt.note) {\r\n                indexOfspesificCart = index\r\n                isDuplicateSelection = true\r\n                boolSpesificInd = false\r\n              } else {\r\n                sizecartArr = 0\r\n                countAllSelection = 0\r\n              }\r\n            } else {\r\n              sizecartArr = 0\r\n              countAllSelection = 0\r\n            }\r\n          } else {\r\n            sizecartArr = 0\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    var isFound = false\r\n    if (isStorePresent === true) {\r\n      if (isDuplicate === true) {\r\n        if (isDuplicateSelection) {\r\n          console.log('duplicate');\r\n          cart.forEach((data) => {\r\n            if (isFound === false) {\r\n              if (data.mid === this.state.data.mid) {\r\n                console.log('same mid');\r\n                // data.food.forEach((food) => {\r\n                //   if (isFound === false) {\r\n                //     if (food.foodNote === currentExt.note) {\r\n                //       if (food.productId === this.state.currentData.productId) {\r\n                //         isFound = true\r\n                //         food.foodAmount += currentExt.detailCategory[0].amount;\r\n                //       }\r\n                //     }\r\n                //   }\r\n                // });\r\n\r\n                if (isFound === false) {\r\n                  if (duplicateProduct[indexOfspesificCart].foodNote === currentExt.note) {\r\n                    isFound = true\r\n                    duplicateProduct[indexOfspesificCart].foodAmount += currentExt.detailCategory[0].amount\r\n                    duplicateProduct[indexOfspesificCart].foodTotalPrice += currentTotal\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n          if (isFound === false) {\r\n            var isAdded = false\r\n            cart.forEach((data) => {\r\n              if (data.mid === this.state.data.mid) {\r\n                data.food.forEach((food) => {\r\n                  if (isAdded === false) {\r\n                    isAdded = true\r\n                    data.food.push({\r\n                      productId: this.state.currentData.productId,\r\n                      foodName: this.state.currentData.foodName,\r\n                      foodPrice: this.state.currentData.foodPrice,\r\n                      foodImage: this.state.currentData.foodImage,\r\n                      foodCategory: currentExt.foodCategory,\r\n                      foodAmount: currentExt.detailCategory[0].amount,\r\n                      foodNote: currentExt.note,\r\n                      foodListCheckbox: currentExt.listcheckbox,\r\n                      foodListRadio: currentExt.listradio,\r\n                      foodTotalPrice: currentTotal\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            })\r\n          };\r\n        } else {\r\n          console.log('noduplicate choice');\r\n          cart.forEach((data) => {\r\n            if (data.mid === this.state.data.mid) {\r\n              data.food.push({\r\n                productId: this.state.currentData.productId,\r\n                foodName: this.state.currentData.foodName,\r\n                foodPrice: this.state.currentData.foodPrice,\r\n                foodImage: this.state.currentData.foodImage,\r\n                foodCategory: currentExt.foodCategory,\r\n                foodAmount: currentExt.detailCategory[0].amount,\r\n                foodNote: currentExt.note,\r\n                foodListCheckbox: currentExt.listcheckbox,\r\n                foodListRadio: currentExt.listradio,\r\n                foodTotalPrice: currentTotal\r\n              });\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        console.log('noduplicate product');\r\n        cart.forEach((data) => {\r\n          if (data.mid === this.state.data.mid) {\r\n            data.food.push({\r\n              productId: this.state.currentData.productId,\r\n              foodName: this.state.currentData.foodName,\r\n              foodPrice: this.state.currentData.foodPrice,\r\n              foodImage: this.state.currentData.foodImage,\r\n              foodCategory: currentExt.foodCategory,\r\n              foodAmount: currentExt.detailCategory[0].amount,\r\n              foodNote: currentExt.note,\r\n              foodListCheckbox: currentExt.listcheckbox,\r\n              foodListRadio: currentExt.listradio,\r\n              foodTotalPrice: currentTotal\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      cart.push({\r\n        mid: mid,\r\n        storeName: currentMerchant.storeName,\r\n        storeDesc: currentMerchant.storeDesc,\r\n        storeDistance: currentMerchant.distance,\r\n        food: [\r\n          {\r\n            productId: this.state.currentData.productId,\r\n            foodName: this.state.currentData.foodName,\r\n            foodPrice: this.state.currentData.foodPrice,\r\n            foodImage: this.state.currentData.foodImage,\r\n            foodCategory: currentExt.foodCategory,\r\n            foodAmount: currentExt.detailCategory[0].amount,\r\n            foodNote: currentExt.note,\r\n            foodListCheckbox: currentExt.listcheckbox,\r\n            foodListRadio: currentExt.listradio,\r\n            foodTotalPrice: currentTotal\r\n          },\r\n        ],\r\n      });\r\n    }\r\n    let addedMerchants = []\r\n    if (Cookies.get(\"addedMerchants\") === undefined) {\r\n      if (!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    } else {\r\n      addedMerchants = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n      if (!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    }\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    alert('berhasil masuk cart')\r\n    // var auth = {\r\n    //   isLogged: false,\r\n    //   token: \"\",\r\n    //   new_event: true,\r\n    //   recommendation_status: false,\r\n    //   email: \"\",\r\n    // };\r\n    // if (Cookies.get(\"auth\") !== undefined) {\r\n    //   auth = JSON.parse(Cookies.get(\"auth\"))\r\n    // }\r\n    // if (auth.isLogged === false) {\r\n    //   var lastLink = { value: window.location.href }\r\n    //   Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n    //   window.location.href = \"/login\"\r\n    // }\r\n    // let uuid = uuidV4();\r\n    // const date = new Date().toISOString();\r\n    // uuid = uuid.replaceAll(\"-\", \"\");\r\n    // let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    // Axios(address + \"/txn/v1/cart-post/\", {\r\n    //   headers: {\r\n    //     \"Content-Type\": \"application/json\",\r\n    //     \"x-request-id\": uuid,\r\n    //     \"x-request-timestamp\": date,\r\n    //     \"x-client-id\": clientId,\r\n    //     \"x-signature\": signature,\r\n    //     \"token\": auth.token,\r\n    //   },\r\n    //   method: \"POST\",\r\n    //   data: {\r\n    //     mid: this.state.data.mid,\r\n    //     pid: this.state.currentData.productId,\r\n    //     qty: currentExt.detailCategory[0].amount,\r\n    //     notes: currentExt.note,\r\n    //   }\r\n    // })\r\n    //   .then((res) => {\r\n    //   })\r\n    //   .catch((err) => {\r\n    //   });\r\n  };\r\n\r\n  changeMenu = () => {\r\n    this.props.OpenSelect(!this.props.AllRedu.openSelect)\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  changeHeader = (menu) => {\r\n    this.props.OpenSelect(false)\r\n    this.setState({ categName: menu })\r\n  }\r\n\r\n  isBottom = (el) => {\r\n    return (el.getBoundingClientRect().top + 100) <= window.innerHeight\r\n  }\r\n\r\n  stopAndLoadMore = (ind) => {\r\n    // console.log(ind);\r\n    // console.log(this.state.idCateg[ind]);\r\n    // console.log(this.state.productPage[ind]);\r\n    if (this.state.productCategpersize[ind].category_products.length < this.state.allProductsandCategories[ind].category_products.length) {\r\n      // console.log('testloadmore');\r\n      var openidCateg = [...this.state.idCateg]\r\n      openidCateg[ind] += this.state.size\r\n\r\n      var openproductPage = [...this.state.productPage]\r\n      openproductPage[ind] += this.state.size\r\n\r\n      this.setState({ idCateg: openidCateg, productPage: openproductPage, boolpage: true, choosenIndCateg: ind })\r\n    } else {\r\n      // console.log('nambah');\r\n      var num = this.state.counterLoad\r\n      num++\r\n      this.setState({ counterLoad: num })\r\n    }\r\n  }\r\n\r\n  loadMoreMerchant = () => {\r\n    this.state.productCategpersize.forEach((val, ind) => {\r\n      var wrappedElement = document.getElementById(ind)\r\n      if (this.isBottom(wrappedElement)) {\r\n        // console.log(this.state.counterLoad, 'counterLoad');\r\n        // console.log(wrappedElement.id, 'wrap');\r\n        if (wrappedElement.id == this.state.counterLoad) {\r\n          // console.log(ind, 'selected index');\r\n          document.removeEventListener('scroll', this.loadMoreMerchant)\r\n          this.stopAndLoadMore(ind)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  contentView = () => {\r\n    return this.state.productCategpersize.map((categ, indcateg) => {\r\n      return (\r\n        <div key={indcateg} className='product-section'>\r\n          <h2 id={categ.category_name.toLocaleLowerCase()} className='product-categ'>{categ.category_name.toLocaleLowerCase() || <Skeleton height={30} width={100} />}</h2>\r\n\r\n          <div className='list-product'>\r\n            {\r\n              categ.category_products.map((product, indprod) => {\r\n                return (\r\n                  <div key={indprod} className='product-merchant' onClick={() => this.handleDetail(product)}>\r\n                    <div className='product-img'>\r\n                      {\r\n                        product.foodImage ?\r\n                          <img src={product.foodImage} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n                          :\r\n                          <Skeleton height={120} style={{ paddingTop: 50 }} />\r\n                      }\r\n                    </div>\r\n\r\n                    <div className='product-detail-mob'>\r\n                      <div className='product-detail'>\r\n                        <div className='product-star'>\r\n                          <img className='product-star-img' src={StarIcon} alt='' />\r\n                          <h6 className='product-star-rating'>5.0</h6>\r\n                        </div>\r\n\r\n                        <div className='product-name'>\r\n                          {product.foodName || <Skeleton style={{ paddingTop: 10 }} />}\r\n                        </div>\r\n\r\n                        <div className='product-desc'>\r\n                          {product.foodDesc ? product.foodDesc : \"Product Description\"}\r\n                        </div>\r\n\r\n                        <div className='product-price'>\r\n                          {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\r\n                        </div>\r\n                      </div>\r\n                      <div className='product-price-mob'>\r\n                        {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          {\r\n            this.state.productCategpersize[indcateg].category_products.length < this.state.allProductsandCategories[indcateg].category_products.length ?\r\n              <div id={indcateg}>\r\n                <Skeleton style={{ paddingTop: 100, borderRadius: 30 }} />\r\n              </div>\r\n              :\r\n              <div id={indcateg}>\r\n                {/* <Skeleton style={{paddingTop:100, borderRadius: 30}} /> */}\r\n              </div>\r\n          }\r\n        </div>\r\n      );\r\n    })\r\n  }\r\n\r\n  handleCartAmount = (price) => {\r\n    currentTotal = price\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleCateg={this.state.productCategpersize}\r\n          handleAmount={this.handleCartAmount}\r\n          handleClick={this.handleAddCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.state.productCategpersize[0].category_products.length);\r\n    // console.log(this.state.allProductsandCategories[0].category_products.length);\r\n    // let modal;\r\n    // if (this.state.showModal === true) {\r\n    //   modal = (\r\n    //     <PikaModal\r\n    //       isShow={() => this.setModal(true)}\r\n    //       onHide={() => this.setModal(false)}\r\n    //       datas={this.state.currentData}\r\n    //       handleClick={this.handleAddCart}\r\n    //       handleData={this.handleCart}\r\n    //     />\r\n    //   );\r\n    // } else {\r\n    //   modal = <></>;\r\n    // }\r\n\r\n    let cartButton;\r\n    const value = queryString.parse(window.location.search);\r\n    const notab = value.table || \"\"\r\n    if (JSON.parse(localStorage.getItem('cart'))) {\r\n      let allCart = JSON.parse(localStorage.getItem('cart'))\r\n      let filterMerchantCart = allCart.filter(cartVal => {\r\n        return this.state.data.mid === cartVal.mid\r\n      })\r\n      if (filterMerchantCart.length) {\r\n        localStorage.setItem('table', notab)\r\n        localStorage.setItem('lastTable', notab)\r\n        if (filterMerchantCart[0].mid) {\r\n          cartButton = (\r\n            <Link to={\"/cart\"} className={\"btn-productCart\"}>\r\n              <img src={cartIcon} alt='' />\r\n            </Link>\r\n          );\r\n        } else {\r\n          cartButton = <></>;\r\n        }\r\n      } else {\r\n        cartButton = <></>;\r\n      }\r\n    } else {\r\n      let cart = JSON.parse(localStorage.getItem('cart'))\r\n      if (cart.length > 1) {\r\n        localStorage.setItem('table', notab)\r\n        localStorage.setItem('lastTable', notab)\r\n        cartButton = (\r\n          <Link to={\"/cart\"} className={\"btn-productCart\"}>\r\n            <img src={cartIcon} alt={\"cart\"} />\r\n          </Link>\r\n        );\r\n      } else {\r\n        cartButton = <></>;\r\n      }\r\n    }\r\n\r\n    if (this.state.categName !== \"All Categories\") {\r\n      if (this.props.AllRedu.openSelect === false) {\r\n        //scroll to selected menu\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n        document.getElementById(this.state.categName).scrollIntoView({ behavior: \"smooth\" })\r\n        this.setState({ categName: 'All Categories' })\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className='storeBanner' onClick={() => this.changeBackground()}>\r\n          {//only for testing, would be remove\r\n            this.state.testingchange === false ?\r\n              <img src={Storeimg} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n              :\r\n              <img src={Storeimg2} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n          }\r\n          <div className='iconBanner'>\r\n            <Link to={\"/profile\"}>\r\n              <div className='profileIcon-sec'>\r\n                <div className='profileIcon'>\r\n                  <span className='reactProfIcons'>\r\n                    <img className='profileicon-img' src={ProfileIcon} alt='' />\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n\r\n            <Link to={\"/status\"}>\r\n              <div className='notifIcon-sec'>\r\n                <div className='notifIcon'>\r\n                  <span className='reactNotifIcons'>\r\n                    <img className='notificon-img' src={NotifIcon} alt='' />\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className='merchant-section' style={{ backgroundColor: this.state.backColor1 }}>\r\n          <div className='inside-merchantSection'>\r\n            <div className='merchant-info'>\r\n              <div className='top-merchantInfo'>\r\n                <div className='inside-topMerchantInfo'>\r\n                  <div className='merchant-title'>\r\n                    <div className='merchant-logo'>\r\n                      <img src={this.state.data.image || <Skeleton />} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n                    </div>\r\n\r\n                    <div className='merchant-name'>\r\n                      <div className='merchant-mainName'>\r\n                        {this.state.data.title || <Skeleton style={{ paddingTop: 30, width: 200 }} />}\r\n                      </div>\r\n\r\n                      <div className='merchant-categName'>\r\n                        <div className='merchant-allcateg'>Merchant Category</div>\r\n                        <div className='merchant-starInfo'>\r\n                          {\r\n                            this.state.data.rating ?\r\n                              <>\r\n                                <img className='star-img' src={StarIcon} alt='' />\r\n                                <div className='merchant-star'>{this.state.data.rating}</div>\r\n                              </>\r\n                              :\r\n                              <Skeleton width={50} />\r\n                          }\r\n                          {/* <div className='star-votes'>(50+ Upvotes)</div> */}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchant-call-sec' onClick={() => this.handlePhone(this.state.data.phone)}>\r\n                    <div className='merchant-call'>\r\n                      <span className='merchantCall-icon'>\r\n                        <img className='merchantCall-img' src={PhoneIcon} alt='' />\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='bottom-merchantInfo'>\r\n                <div className='inside-bottomMerchantInfo'>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='openhouricon' src={OpenHourIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>Open</div>\r\n                      <div className='bottom-detail-info'>Jum (08.00 - 20.00)</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='coinicon' src={CoinIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>$$$</div>\r\n                      <div className='bottom-detail-info'>50 K - 100 K</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='locationicon' src={LocationIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>Store Address</div>\r\n                      <div className='bottom-detail-info'>{this.state.data.address || <Skeleton style={{ paddingTop: 30, width: 100 }} />}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='merchant-category'>\r\n              <div className='select-category'>\r\n                <div className='listCategory'>\r\n                  <h2 className='categoryName'>{this.state.categName}</h2>\r\n\r\n                  <div className='arrow-based' onClick={() => this.changeMenu()} >\r\n                    <img className='arrowicon' src={ArrowIcon} alt='' />\r\n                  </div>\r\n                </div>\r\n\r\n                {\r\n                  this.props.AllRedu.openSelect ?\r\n                    <div className='custom-options'>\r\n                      <span className='custom-optionCloser' defaultValue='Rice Box'>Closer</span>\r\n                      {\r\n                        this.state.productCategpersize.map((menuCategory, index) => (\r\n                          <span key={index} className='custom-option' onClick={() => this.changeHeader(menuCategory.category_name.toLocaleLowerCase())}>{menuCategory.category_name.toLocaleLowerCase()}</span>\r\n                        ))\r\n                      }\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='product-layout' style={{ backgroundColor: this.state.backColor2 }}>\r\n          <div className='mainproduct-sec'>\r\n            {this.contentView()}\r\n\r\n            <div className='pikapp-info'>\r\n              <h3 className='pikappInfo'>Digital Menu By</h3>\r\n              <img className='Logopikapp' src={Logopikapp} alt='' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* {modal} */}\r\n        {cartButton}\r\n        {this.menuDetail()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { ValidQty, OpenSelect })(ProductView)","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Menu\\MenuDetail.js",["190","191","192","193","194"],"D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Menu\\MenuSelection.js",["195","196","197","198","199","200","201","202","203"],"D:\\PIKAPP\\pikapp-frontend\\src\\App.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Redux\\Store.js",[],"D:\\PIKAPP\\pikapp-frontend\\src\\Master\\CartLayoutDev.js",[],["204","205"],"D:\\PIKAPP\\pikapp-frontend\\src\\View\\Cart\\CartViewDev.js",["206","207","208","209"],"import React from \"react\";\r\nimport { Row, Col, Button, ButtonGroup, Form } from \"react-bootstrap\";\r\nimport chevronImage from \"../../Asset/Icon/chevron_right.png\";\r\nimport removeIcon from \"../../Asset/Icon/remove_icon.png\";\r\nimport storeIcon from \"../../Asset/Icon/store_icon.png\";\r\nimport checklistIcon from \"../../Asset/Icon/checklist_icon.png\";\r\nimport frontIcon from \"../../Asset/Icon/front_icon.png\";\r\nimport cashierIcon from \"../../Asset/Icon/cashier_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport { CartModal } from \"../../Component/Modal/CartModal\";\r\nimport { cart } from \"../../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, secret, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Loader from 'react-loader'\r\nimport MenuDetail from '../../Component/Menu/MenuDetail'\r\nimport { connect } from \"react-redux\";\r\nimport { EditMenuCart } from '../../Redux/Actions'\r\n\r\nvar options = {\r\n  lines: 13,\r\n  length: 20,\r\n  width: 10,\r\n  radius: 30,\r\n  scale: 0.25,\r\n  corners: 1,\r\n  color: '#000',\r\n  opacity: 0.25,\r\n  rotate: 0,\r\n  direction: 1,\r\n  speed: 1,\r\n  trail: 60,\r\n  fps: 20,\r\n  shadow: false,\r\n  hwaccel: false,\r\n};\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: []\r\n};\r\n\r\nclass CartView extends React.Component {\r\n  state = {\r\n    notable: \"\",\r\n    showModal: false,\r\n    currentModalTitle: \"\",\r\n    paymentOption: \"Pembayaran di kasir\",\r\n    paymentType: \"PAY_BY_CASHIER\",\r\n    biz_type: this.props.noTable.table !== \"\" ? this.props.noTable.table > 0 ? \"DINE_IN\" : \"TAKE_AWAY\" : \"DINE_IN\",\r\n    eat_type: this.props.noTable.table !== \"\" ? this.props.noTable.table > 0 ? \"Makan di tempat\" : \"Bungkus / Takeaway\" : \"Makan di tempat\",\r\n    currentModal: [\r\n      {\r\n        image: \"\",\r\n        option: \"\",\r\n      },\r\n    ],\r\n    loadButton: true,\r\n    showMenuDet: false,\r\n    filteredCart: [],\r\n    currentData: {},\r\n    themid: '',\r\n    indexEdit: 0,\r\n  };\r\n\r\n  handleDetail(data) {\r\n    if (data === \"eat-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Cara makan anda?\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"dineIn\",\r\n            option: \"Makan di tempat\",\r\n          },\r\n          {\r\n            image: \"takeaway\",\r\n            option: \"Bungkus / Takeaway\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"pay-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Bayar pakai apa?\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"cashier\",\r\n            option: \"Pembayaran di kasir\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleDecrease(e) {\r\n    if (e.foodAmount > 1) {\r\n      e.foodAmount -= 1;\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  handleIncrease(e) {\r\n    e.foodAmount += 1;\r\n    this.forceUpdate();\r\n  }\r\n\r\n  handleDelete(e, ind, mid) {\r\n    let filteredCart;\r\n    let addedMerchants = []\r\n    let newAllCart = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        let filteredStore = store.food.filter((data, index) => {\r\n          return index !== ind\r\n        })\r\n\r\n        if (filteredStore.length === 0) {\r\n          filteredCart = cart.filter((filterStore) => {\r\n            return filterStore.mid !== store.mid;\r\n          });\r\n          localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\r\n          filteredCart.forEach((cart) => {\r\n            addedMerchants.push(cart.mid)\r\n            Cookies.set(\"addedMerchants\", addedMerchants)\r\n          })\r\n        } else {\r\n          let newFilter = store.food\r\n          newFilter = []\r\n          filteredStore.forEach((val) => {\r\n            console.log(val);\r\n            newFilter.push(val)\r\n          })\r\n          store.food = newFilter\r\n          newAllCart.push(store)\r\n        }\r\n      } else {\r\n        newAllCart.push(store)\r\n      }\r\n    });\r\n\r\n    if (newAllCart.length < 2) {\r\n      cart.splice(1)\r\n      localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n      window.history.back()\r\n      // window.location.href = Cookies.get(\"lastProduct\")\r\n    } else {\r\n      let filterMerchantCart = newAllCart.filter(valueCart=> {\r\n        return valueCart.mid === mid\r\n      })\r\n      localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n      if (filterMerchantCart.length) {\r\n        window.location.reload()\r\n      } else {\r\n        window.history.back()\r\n      }\r\n    }\r\n\r\n    // cart.forEach((store) => {\r\n    //   let filteredStore = store.food.filter((data) => {\r\n    //     if (data.productId === e.productId) {\r\n    //       if (data.foodNote !== e.foodNote) {\r\n    //         return data\r\n    //       }\r\n    //     } else {\r\n    //       return data\r\n    //     }\r\n    //   });\r\n    //   console.log(filteredStore);\r\n    //   store.food = filteredStore;\r\n    //   if (store.food.length === 0) {\r\n    //     filteredCart = cart.filter((filterStore) => {\r\n    //       return filterStore.mid !== store.mid;\r\n    //     });\r\n    //     console.log(filteredCart);\r\n    //     localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\r\n    //     let addedMerchants = []\r\n    //     filteredCart.forEach((cart) => {\r\n    //       addedMerchants.push(cart.mid)\r\n    //       Cookies.set(\"addedMerchants\", addedMerchants)\r\n    //     })\r\n    //     console.log(addedMerchants);\r\n    //     if (addedMerchants.length < 2) {\r\n    //       window.history.back()\r\n    //       // window.location.href = Cookies.get(\"lastProduct\")\r\n    //     } else {\r\n    //       console.log('ntaps bro');\r\n    //       window.location.reload()\r\n    //     }\r\n    //   } else {\r\n    //     console.log('ntaps mantaapp');\r\n    //   }\r\n    // });\r\n    this.forceUpdate();\r\n  }\r\n\r\n  handleOption = (data) => {\r\n    if (this.props.noTable.table !== \"\") {\r\n      if (data == 1) {\r\n        let newUrl = window.location.search\r\n        let changeTable = newUrl.slice(0, -1)\r\n        changeTable += 0\r\n        window.location.href = changeTable\r\n      } else {\r\n        let value = Cookies.get(\"lastProduct\")\r\n        console.log(value);\r\n        let getPrevTable = value.charAt(value.length - 1)\r\n        let newUrl = window.location.search\r\n        let changeTable = newUrl.slice(0, -1)\r\n        changeTable += getPrevTable\r\n        window.location.href = changeTable\r\n      }\r\n    }\r\n    if (this.state.currentModalTitle === \"Cara makan anda?\") {\r\n      if (data === 0 || this.props.noTable.table > 0) {\r\n        this.setState({ biz_type: \"DINE_IN\" })\r\n        this.setState({ eat_type: \"Makan di tempat\" })\r\n      } else {\r\n        this.setState({ biz_type: \"TAKE_AWAY\" })\r\n        this.setState({ eat_type: \"Bungkus / Takeaway\" })\r\n      }\r\n    } else if (this.state.currentModalTitle === \"Bayar pakai apa?\") {\r\n      if (data === 0) {\r\n        this.setState({ paymentType: \"PAY_BY_CASHIER\" })\r\n        this.setState({ paymentOption: \"Pembayaran di kasir\" })\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePayment = () => {\r\n    this.setState({ loadButton: false })\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      window.location.href = \"/login\"\r\n    }\r\n    let totalAmount = 0;\r\n    let data = cart;\r\n    data.forEach((store) => {\r\n      store.food.forEach((food) => {\r\n        totalAmount = totalAmount + food.foodPrice * food.foodAmount;\r\n      });\r\n    });\r\n\r\n    let merchantIds = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n    merchantIds = merchantIds.filter((merchant) => {\r\n      return merchant !== \"\"\r\n    })\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n\r\n    merchantIds.forEach((merchant) => {\r\n      var requestData = {\r\n        products: [{\r\n          product_id: \"\",\r\n          notes: \"\",\r\n          qty: 0\r\n        }],\r\n        payment_with: this.state.paymentType,\r\n        mid: merchant,\r\n        prices: totalAmount,\r\n        biz_type: this.state.biz_type,\r\n        table_no: \"1\"\r\n      }\r\n      requestData.products.pop()\r\n      cart.forEach((merchant) => {\r\n        let addedMerchants = Cookies.get(\"addedMerchants\")\r\n        if (addedMerchants.includes(merchant.mid)) {\r\n          merchant.food.forEach((data) => {\r\n            if (data.productId !== \"\") {\r\n              requestData.products.push({\r\n                product_id: data.productId,\r\n                notes: data.foodNote,\r\n                qty: data.foodAmount,\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n\r\n      Axios(address + \"/txn/v1/txn-post/\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-request-id\": uuid,\r\n          \"x-request-timestamp\": date,\r\n          \"x-client-id\": clientId,\r\n          \"x-signature\": signature,\r\n          \"token\": auth.token,\r\n        },\r\n        method: \"POST\",\r\n        data: requestData,\r\n      })\r\n        .then((res) => {\r\n          localStorage.removeItem(\"cart\")\r\n          alert(\"Pembelian telah berhasil.\")\r\n          window.location.href = \"/status\"\r\n        })\r\n        .catch((err) => {\r\n          if (err.response.data !== undefined) {\r\n            alert(err.response.data.err_message)\r\n            this.setState({ loadButton: true })\r\n          }\r\n        });\r\n    })\r\n  };\r\n\r\n  newListCheck = (food) => {\r\n    let newlistArr = ''\r\n    food.foodListCheckbox.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name},`\r\n      })\r\n    })\r\n    return <p>{newlistArr}</p>\r\n  }\r\n\r\n  newListRadio = (food) => {\r\n    let newlistArr = ''\r\n    food.foodListRadio.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name},`\r\n      })\r\n    })\r\n    return <p>{newlistArr}</p>\r\n  }\r\n\r\n  onEditCart = (ind, mid) => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === ind\r\n        })\r\n      }\r\n    });\r\n\r\n    var objFilteredCart = {\r\n      productId: filteredStore[0].productId,\r\n      foodName: filteredStore[0].foodName,\r\n      foodDesc: \"\",\r\n      foodCategory: filteredStore[0].foodCategory,\r\n      foodPrice: filteredStore[0].foodPrice,\r\n      foodImage: filteredStore[0].foodImage,\r\n      foodNote: filteredStore[0].foodNote,\r\n      foodListCheckbox: filteredStore[0].foodListCheckbox,\r\n      foodListRadio: filteredStore[0].foodListRadio,\r\n      foodExt: [\r\n        {\r\n          name: \"\",\r\n          amount: filteredStore[0].foodAmount,\r\n        },\r\n      ],\r\n    }\r\n\r\n    this.setState({ showMenuDet: true, filteredCart: filteredStore, currentData: objFilteredCart, indexEdit: ind, themid: mid })\r\n    this.props.EditMenuCart(true)\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleClick={this.handleSaveCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data\r\n  }\r\n\r\n  handleSaveCart = () => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === this.state.themid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === this.state.indexEdit\r\n        })\r\n\r\n        console.log(currentExt);\r\n\r\n        filteredStore[0].foodAmount = currentExt.detailCategory[0].amount\r\n        filteredStore[0].foodListCheckbox = currentExt.listcheckbox\r\n        filteredStore[0].foodListRadio = currentExt.listradio\r\n        filteredStore[0].foodNote = currentExt.note\r\n\r\n        console.log(filteredStore[0]);\r\n\r\n        store.food[this.state.indexEdit] = filteredStore[0]\r\n      }\r\n    });\r\n    localStorage.setItem('cart', JSON.stringify(allCart))\r\n    window.location.reload()\r\n  }\r\n\r\n  render() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      window.location.href = \"/login\"\r\n    }\r\n    let modal;\r\n    let paymentButton;\r\n    if (auth.isLoggedIn === false) {\r\n      paymentButton = (\r\n        <Link to={\"/login\"} className={\"iconButton\"}>\r\n          <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n          <img src={frontIcon} alt={\"checklist\"} />\r\n        </Link>\r\n      );\r\n    } else {\r\n      if (this.state.loadButton) {\r\n        paymentButton = (\r\n          <button className={\"iconButton\"} onClick={() => this.handlePayment()}>\r\n            <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n            <img src={frontIcon} alt={\"checklist\"} />\r\n          </button>\r\n        );\r\n      } else {\r\n        paymentButton = (\r\n          <Loader loaded={this.state.loadButton} options={options} className=\"spinner\" />\r\n        )\r\n      }\r\n    }\r\n    if (this.state.showModal === true) {\r\n      modal = (\r\n        <CartModal\r\n          isShow={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n          title={this.state.currentModalTitle}\r\n          detailOptions={this.state.currentModal}\r\n          handleData={this.handleOption}\r\n          notable={this.props.noTable}\r\n        />\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n\r\n    let data = cart;\r\n    let totalAmount = 0;\r\n    data.forEach((store) => {\r\n      store.food.forEach((food) => {\r\n        totalAmount = totalAmount + food.foodPrice * food.foodAmount;\r\n      });\r\n    });\r\n    let storeList = data.filter((store) => {\r\n      if (store.mid !== \"\") {\r\n        return store;\r\n      }\r\n    });\r\n\r\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    let contentView = storeList.map((store) => {\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        let itemListView = data.map((cartData) => {\r\n          if (cartData.mid === store.mid) {\r\n            return store.food.map((food, index) => {\r\n              return (\r\n                <Row>\r\n                  <Col xs={0} md={3} />\r\n                  <Col xs={3} md={1}>\r\n                    <img\r\n                      src={food.foodImage}\r\n                      alt={\"food\"}\r\n                      className={\"cartFoodImage\"}\r\n                    />\r\n                  </Col>\r\n                  <Col>\r\n                    <Row>\r\n                      <Col>\r\n                        <p className={\"cartContentFood\"}>{food.foodName}</p>\r\n                        <p>List Check: {this.newListCheck(food)}</p>\r\n                        <p>List Option: {this.newListRadio(food)}</p>\r\n                        <p className={\"cartContentPrice\"}>Catatan:</p>\r\n                        <p className={\"cartContentPrice\"}>{food.foodNote}</p>\r\n                        <p className={\"cartContentPrice\"}>\r\n                          {Intl.NumberFormat(\"id-ID\", {\r\n                            style: \"currency\",\r\n                            currency: \"IDR\",\r\n                          }).format(food.foodPrice)}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  <Col>\r\n                    <Row>\r\n                      <Col>\r\n                        <button\r\n                          className={\"iconButton\"}\r\n                          onClick={() => this.handleDelete(food, index, store.mid)}\r\n                        >\r\n                          <img src={removeIcon} alt={\"remove icon\"} />\r\n                        </button>\r\n                        <button onClick={() => this.onEditCart(index, store.mid)}>EDIT</button>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <ButtonGroup className={\"cartModalButtonGroup\"}>\r\n                          <Button\r\n                            onClick={() => this.handleDecrease(food)}\r\n                            variant=\"cartModalMiniButton\"\r\n                          >\r\n                            -\r\n                        </Button>\r\n                          <Form.Control\r\n                            value={food.foodAmount}\r\n                            className=\"cartModalField\"\r\n                            disabled\r\n                          ></Form.Control>\r\n                          <Button\r\n                            onClick={() => this.handleIncrease(food)}\r\n                            variant=\"cartModalMiniButton\"\r\n                          >\r\n                            +\r\n                        </Button>\r\n                        </ButtonGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              )\r\n            })\r\n          }\r\n        });\r\n        return (\r\n          <>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>{store.storeName}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col xs={1} md={1}>\r\n                <img src={storeIcon} className={\"cartIcon\"} alt={\"store icon\"} />\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartNote\"}>Store Location</p>\r\n                    <p className={\"cartTitle\"}>{store.storeDesc}</p>\r\n                    <p className={\"cartNote\"}>\r\n                      <b>{store.storeDistance}</b>\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col xs={2} md={3}>\r\n                <button className={\"iconButton\"}>\r\n                  <img\r\n                    src={chevronImage}\r\n                    onClick={() => this.handleDetail()}\r\n                    alt={\"chevron right\"}\r\n                  />\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n            {itemListView}\r\n          </>\r\n        );\r\n      }\r\n    });\r\n\r\n    let paymentImage;\r\n    let eatImage;\r\n    if (this.state.biz_type === \"DINE_IN\") {\r\n      eatImage = dineinIcon;\r\n    } else if (this.state.biz_type === \"TAKE_AWAY\") {\r\n      eatImage = takeawayIcon;\r\n    }\r\n    if (this.state.paymentType === \"PAY_BY_CASHIER\") {\r\n      paymentImage = cashierIcon\r\n    }\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col><p className={\"cartTitle\"}>Pilih cara makan anda</p></Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={1}>\r\n                <img src={eatImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>{this.state.eat_type}</Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"eat-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Bayar pakai apa?</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={1}>\r\n                <img src={paymentImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>\r\n                {this.state.paymentOption}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"pay-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        {contentView}\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Rincian Pembayaran</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Total harga barang:</p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Diskon:</p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(totalAmount)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(0)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className={\"cartPayment\"}>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Total Belanja Kamu</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartFinalPrice\"}>\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(totalAmount)}\r\n                </p>\r\n              </Col>\r\n              <Col className={\"cartFinalButton\"}>{paymentButton}</Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        {modal}\r\n        {this.menuDetail()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { EditMenuCart })(CartView)","D:\\PIKAPP\\pikapp-frontend\\src\\Component\\Modal\\CartModalDev.js",["210","211","212"],"import React, { useState } from 'react'\r\nimport closeNarrow from '../../Asset/Icon/closeNarrow.png'\r\nimport diningTableColor from '../../Asset/Icon/diningTableColor.png'\r\nimport takeawayColor from '../../Asset/Icon/takeawayColor.png'\r\nimport CashierPayment from '../../Asset/Icon/CashierPayment.png'\r\nimport OvoPayment from '../../Asset/Icon/ovo_icon.png'\r\nimport '../../Asset/scss/CartModal.scss'\r\n\r\nconst CartModal = (props) => {\r\n    const [radioNumEat, setradioNumEat] = useState(props.indexOptionEat)\r\n    const [radioNumPay, setradioNumPay] = useState(props.indexOptionPay)\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        props.onHide()\r\n    }\r\n\r\n    const onChangeRadio = (num, title) => {\r\n        if (title === 'Pilih Cara Makan Anda') {\r\n            setradioNumEat(num)\r\n            props.handleData(num)\r\n            props.onHide()\r\n        } else if(title === 'Bayar Pakai Apa') {\r\n            setradioNumPay(num)\r\n            props.handleData(num)\r\n            props.onHide()\r\n        }\r\n    }\r\n\r\n    const choicesCartModal = () => {\r\n        let optionList = props.detailOptions\r\n        let choicesModal = optionList.map((optionVal, keyOption) => {\r\n            let imageOption;\r\n            if (optionVal.image === \"dineIn\") {\r\n                imageOption = diningTableColor;\r\n            } else if (optionVal.image === \"takeaway\") {\r\n                imageOption = takeawayColor;\r\n            } else if (optionVal.image === \"cashier\") {\r\n                imageOption = CashierPayment;\r\n            } else if (optionVal.image === \"ovo\") {\r\n                imageOption = OvoPayment;\r\n            }\r\n\r\n            if (props.title === 'Pilih Cara Makan Anda') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailContent'>\r\n                        <div className='modalCart-radioSection'>\r\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'EATMETHOD'} defaultChecked={radioNumEat === keyOption ? true : false} />\r\n                            <label htmlFor={optionVal.image}>\r\n                                <div className='modalCart-radioSide'>\r\n                                    <img className='modalCartradio-image' src={imageOption} />\r\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (props.title === 'Bayar Pakai Apa') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailContent'>\r\n                        <div className='modalCart-radioSection'>\r\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'PAYMETHOD'} defaultChecked={radioNumPay === keyOption ? true : false} />\r\n                            <label htmlFor={optionVal.image}>\r\n                                <div className='modalCart-radioSide'>\r\n                                    <img className='modalCartradio-image' src={imageOption} />\r\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (props.title === 'Rincian Pembayaran') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailTotalPrice'>\r\n                        <div className='modalCart-totalPrice'>\r\n                            <h2 className='modalCart-totalPrice-left'>Total Harga Barang</h2>\r\n                            <h2 className='modalCart-totalPrice-right'>{Intl.NumberFormat(\"id-ID\").format(optionVal.totalPrice)}</h2>\r\n                        </div>\r\n\r\n                        <div className='modalCart-discount'>\r\n                            <h2 className='modalCart-discount-left'>Diskon</h2>\r\n                            <h2 className='modalCart-discount-right'>{optionVal.discountPrice}</h2>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n        return choicesModal\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='modalCartPage' style={{\r\n                display: props.isShow ? 'block' : 'none'\r\n            }} onClick={closeModal}>\r\n                <div className='modalCartContent' onClick={e => e.stopPropagation()}>\r\n                    <span className='iconCloseNarrow' onClick={closeModal}>\r\n                        <img src={closeNarrow} className='closeLogoNarrow' alt='' />\r\n                    </span>\r\n\r\n                    <div className='modalCart-detail'>\r\n                        <h1 className='modalCart-title'>{props.title}</h1>\r\n\r\n                        {choicesCartModal()}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartModal",{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":24,"column":10,"nodeType":"219","messageId":"220","endLine":24,"endColumn":18},{"ruleId":"217","severity":1,"message":"221","line":24,"column":20,"nodeType":"219","messageId":"220","endLine":24,"endColumn":31},{"ruleId":"222","severity":1,"message":"223","line":37,"column":6,"nodeType":"224","endLine":37,"endColumn":8,"suggestions":"225"},{"ruleId":"217","severity":1,"message":"226","line":5,"column":5,"nodeType":"219","messageId":"220","endLine":5,"endColumn":15},{"ruleId":"217","severity":1,"message":"227","line":9,"column":5,"nodeType":"219","messageId":"220","endLine":9,"endColumn":17},{"ruleId":"217","severity":1,"message":"228","line":12,"column":5,"nodeType":"219","messageId":"220","endLine":12,"endColumn":18},{"ruleId":"217","severity":1,"message":"229","line":2,"column":8,"nodeType":"219","messageId":"220","endLine":2,"endColumn":18},{"ruleId":"217","severity":1,"message":"230","line":14,"column":10,"nodeType":"219","messageId":"220","endLine":14,"endColumn":14},{"ruleId":"217","severity":1,"message":"231","line":15,"column":10,"nodeType":"219","messageId":"220","endLine":15,"endColumn":17},{"ruleId":"217","severity":1,"message":"232","line":15,"column":19,"nodeType":"219","messageId":"220","endLine":15,"endColumn":25},{"ruleId":"217","severity":1,"message":"233","line":15,"column":27,"nodeType":"219","messageId":"220","endLine":15,"endColumn":35},{"ruleId":"217","severity":1,"message":"234","line":16,"column":16,"nodeType":"219","messageId":"220","endLine":16,"endColumn":22},{"ruleId":"217","severity":1,"message":"235","line":17,"column":8,"nodeType":"219","messageId":"220","endLine":17,"endColumn":14},{"ruleId":"217","severity":1,"message":"236","line":18,"column":8,"nodeType":"219","messageId":"220","endLine":18,"endColumn":13},{"ruleId":"217","severity":1,"message":"237","line":20,"column":8,"nodeType":"219","messageId":"220","endLine":20,"endColumn":14},{"ruleId":"217","severity":1,"message":"238","line":25,"column":5,"nodeType":"219","messageId":"220","endLine":25,"endColumn":12},{"ruleId":"239","severity":1,"message":"240","line":235,"column":18,"nodeType":"241","messageId":"242","endLine":235,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":247,"column":16,"nodeType":"241","messageId":"242","endLine":247,"endColumn":18},{"ruleId":"243","severity":1,"message":"244","line":526,"column":41,"nodeType":"245","messageId":"246","endLine":526,"endColumn":43},{"ruleId":"243","severity":1,"message":"247","line":584,"column":51,"nodeType":"245","messageId":"246","endLine":584,"endColumn":53},{"ruleId":"243","severity":1,"message":"247","line":608,"column":48,"nodeType":"245","messageId":"246","endLine":608,"endColumn":50},{"ruleId":"243","severity":1,"message":"247","line":345,"column":49,"nodeType":"245","messageId":"246","endLine":345,"endColumn":51},{"ruleId":"243","severity":1,"message":"247","line":423,"column":38,"nodeType":"245","messageId":"246","endLine":423,"endColumn":40},{"ruleId":"243","severity":1,"message":"247","line":508,"column":38,"nodeType":"245","messageId":"246","endLine":508,"endColumn":40},{"ruleId":"243","severity":1,"message":"247","line":593,"column":38,"nodeType":"245","messageId":"246","endLine":593,"endColumn":40},{"ruleId":"213","replacedBy":"248"},{"ruleId":"215","replacedBy":"249"},{"ruleId":"213","replacedBy":"250"},{"ruleId":"215","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":17,"column":1,"nodeType":"254","endLine":52,"endColumn":2},{"ruleId":"213","replacedBy":"255"},{"ruleId":"215","replacedBy":"256"},{"ruleId":"239","severity":1,"message":"240","line":140,"column":35,"nodeType":"241","messageId":"242","endLine":140,"endColumn":37},{"ruleId":"239","severity":1,"message":"240","line":169,"column":35,"nodeType":"241","messageId":"242","endLine":169,"endColumn":37},{"ruleId":"239","severity":1,"message":"240","line":350,"column":20,"nodeType":"241","messageId":"242","endLine":350,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":364,"column":21,"nodeType":"241","messageId":"242","endLine":364,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":823,"column":31,"nodeType":"241","messageId":"242","endLine":823,"endColumn":33},{"ruleId":"217","severity":1,"message":"257","line":3,"column":8,"nodeType":"219","messageId":"220","endLine":3,"endColumn":17},{"ruleId":"258","severity":1,"message":"259","line":218,"column":77,"nodeType":"241","messageId":"260","endLine":218,"endColumn":78},{"ruleId":"258","severity":1,"message":"259","line":220,"column":77,"nodeType":"241","messageId":"260","endLine":220,"endColumn":78},{"ruleId":"258","severity":1,"message":"259","line":314,"column":83,"nodeType":"241","messageId":"260","endLine":314,"endColumn":84},{"ruleId":"258","severity":1,"message":"259","line":316,"column":83,"nodeType":"241","messageId":"260","endLine":316,"endColumn":84},{"ruleId":"217","severity":1,"message":"261","line":12,"column":7,"nodeType":"219","messageId":"220","endLine":12,"endColumn":24},{"ruleId":"217","severity":1,"message":"262","line":17,"column":7,"nodeType":"219","messageId":"220","endLine":17,"endColumn":21},{"ruleId":"217","severity":1,"message":"263","line":36,"column":12,"nodeType":"219","messageId":"220","endLine":36,"endColumn":28},{"ruleId":"222","severity":1,"message":"264","line":195,"column":8,"nodeType":"224","endLine":195,"endColumn":10,"suggestions":"265"},{"ruleId":"222","severity":1,"message":"266","line":335,"column":8,"nodeType":"224","endLine":335,"endColumn":31,"suggestions":"267"},{"ruleId":"258","severity":1,"message":"259","line":353,"column":192,"nodeType":"241","messageId":"260","endLine":353,"endColumn":193},{"ruleId":"268","severity":1,"message":"269","line":353,"column":400,"nodeType":"270","endLine":353,"endColumn":434},{"ruleId":"258","severity":1,"message":"259","line":369,"column":188,"nodeType":"241","messageId":"260","endLine":369,"endColumn":189},{"ruleId":"268","severity":1,"message":"269","line":369,"column":396,"nodeType":"270","endLine":369,"endColumn":430},{"ruleId":"213","replacedBy":"271"},{"ruleId":"215","replacedBy":"272"},{"ruleId":"239","severity":1,"message":"240","line":216,"column":16,"nodeType":"241","messageId":"242","endLine":216,"endColumn":18},{"ruleId":"243","severity":1,"message":"244","line":499,"column":41,"nodeType":"245","messageId":"246","endLine":499,"endColumn":43},{"ruleId":"243","severity":1,"message":"247","line":506,"column":45,"nodeType":"245","messageId":"246","endLine":506,"endColumn":47},{"ruleId":"243","severity":1,"message":"247","line":508,"column":48,"nodeType":"245","messageId":"246","endLine":508,"endColumn":50},{"ruleId":"243","severity":1,"message":"247","line":32,"column":66,"nodeType":"245","messageId":"246","endLine":32,"endColumn":68},{"ruleId":"273","severity":1,"message":"274","line":51,"column":37,"nodeType":"275","endLine":51,"endColumn":95},{"ruleId":"273","severity":1,"message":"274","line":65,"column":37,"nodeType":"275","endLine":65,"endColumn":95},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'pageCond' is assigned a value but never used.","Identifier","unusedVar","'setpageCond' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.coords'. Either include it or remove the dependency array.","ArrayExpression",["278"],"'secretProd' is assigned a value but never used.","'clientIdProd' is assigned a value but never used.","'googleKeyProd' is assigned a value but never used.","'PikappLogo' is defined but never used.","'Link' is defined but never used.","'address' is defined but never used.","'secret' is defined but never used.","'clientId' is defined but never used.","'uuidV4' is defined but never used.","'sha256' is defined but never used.","'Axios' is defined but never used.","'Loader' is defined but never used.","'options' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.",["276"],["277"],["276"],["277"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["276"],["277"],"'prodPhoto' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'checkboxDummyData' is assigned a value but never used.","'radioDummyData' is assigned a value but never used.","'indexCheckMandat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["279"],"React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'checkboxData', 'dispatch', 'props.datas.foodListCheckbox', 'props.datas.foodListRadio', 'radioData', 'totalCheckMandat', 'totalRadioMandat', and 'updateDataEdit'. Either include them or remove the dependency array.",["280"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["276"],["277"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},"Update the dependencies array to be: [props.coords]",{"range":"287","text":"288"},"Update the dependencies array to be: [AllRedu.openMenuCart, dispatch, props]",{"range":"289","text":"290"},"Update the dependencies array to be: [radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, totalCheckMandat, radioData, totalRadioMandat, dispatch]",{"range":"291","text":"292"},[1159,1161],"[props.coords]",[8602,8604],"[AllRedu.openMenuCart, dispatch, props]",[14808,14831],"[radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, totalCheckMandat, radioData, totalRadioMandat, dispatch]"]