[{"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\index.js":"1","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\CartLayout.js":"2","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StatusLayout.js":"3","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\AuthLayout.js":"4","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MerchantQR.js":"5","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProfileLayout.js":"6","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StoreLayout.js":"7","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\DetailNavigation.js":"8","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MainNavigation.js":"9","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\ColorConstant.js":"10","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\APIConstant.js":"11","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Cart\\CartView.js":"12","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Profile\\ProfileView.js":"13","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Main\\JumbotronView.js":"14","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Status\\StatusView.js":"15","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Auth\\FormView.js":"16","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Store\\StoreView.js":"17","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Button\\PikaButton.js":"18","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\PikaModal.js":"19","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\TextField\\PikaTextField.js":"20","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\CartModal.js":"21","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\index.js":"22","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\index.js":"23","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AllReducers.js":"24","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\ButtonAction.js":"25","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\App.js":"26","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Store.js":"27","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProductLayout.js":"28","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\CartLayoutDev.js":"29","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Product\\ProductView.js":"30","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Cart\\CartViewDev.js":"31","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuDetail.js":"32","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuSelection.js":"33","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\CartModalDev.js":"34","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\LoginDialog.js":"35","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\RegisterDialog.js":"36","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\PinDialog.js":"37","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ConfirmPinDialog.js":"38","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ForgotPinDialog.js":"39","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AuthenticationReducers.js":"40","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ResetPinLayout.js":"41","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\ResetPin\\ResetPinView.js":"42","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ResetPinDialog.js":"43","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ConfirmResetPinDialog.js":"44","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\NotifModal.js":"45"},{"size":485,"mtime":1617683991453,"results":"46","hashOfConfig":"47"},{"size":532,"mtime":1618198598860,"results":"48","hashOfConfig":"47"},{"size":865,"mtime":1614519902133,"results":"49","hashOfConfig":"47"},{"size":2443,"mtime":1618198598859,"results":"50","hashOfConfig":"47"},{"size":2993,"mtime":1618809804941,"results":"51","hashOfConfig":"47"},{"size":656,"mtime":1614927845136,"results":"52","hashOfConfig":"47"},{"size":646,"mtime":1617681026548,"results":"53","hashOfConfig":"47"},{"size":860,"mtime":1618570418614,"results":"54","hashOfConfig":"47"},{"size":1089,"mtime":1614519902133,"results":"55","hashOfConfig":"47"},{"size":80,"mtime":1614519902089,"results":"56","hashOfConfig":"47"},{"size":785,"mtime":1614519902089,"results":"57","hashOfConfig":"47"},{"size":30398,"mtime":1618812062456,"results":"58","hashOfConfig":"47"},{"size":6334,"mtime":1618493645289,"results":"59","hashOfConfig":"47"},{"size":831,"mtime":1614519902137,"results":"60","hashOfConfig":"47"},{"size":25073,"mtime":1618479410369,"results":"61","hashOfConfig":"47"},{"size":13372,"mtime":1618216412570,"results":"62","hashOfConfig":"47"},{"size":14597,"mtime":1618571038009,"results":"63","hashOfConfig":"47"},{"size":991,"mtime":1614927845132,"results":"64","hashOfConfig":"47"},{"size":5545,"mtime":1617683991414,"results":"65","hashOfConfig":"47"},{"size":650,"mtime":1614927845134,"results":"66","hashOfConfig":"47"},{"size":2200,"mtime":1614519902133,"results":"67","hashOfConfig":"47"},{"size":246,"mtime":1618476021711,"results":"68","hashOfConfig":"47"},{"size":30,"mtime":1614927845139,"results":"69","hashOfConfig":"47"},{"size":1799,"mtime":1618198598862,"results":"70","hashOfConfig":"47"},{"size":877,"mtime":1617683991426,"results":"71","hashOfConfig":"47"},{"size":2015,"mtime":1618568578504,"results":"72","hashOfConfig":"47"},{"size":169,"mtime":1618198598863,"results":"73","hashOfConfig":"47"},{"size":274,"mtime":1617683991424,"results":"74","hashOfConfig":"47"},{"size":970,"mtime":1617683991418,"results":"75","hashOfConfig":"47"},{"size":35311,"mtime":1618628857416,"results":"76","hashOfConfig":"47"},{"size":23678,"mtime":1617683991436,"results":"77","hashOfConfig":"47"},{"size":21454,"mtime":1618826594833,"results":"78","hashOfConfig":"47"},{"size":32917,"mtime":1618628857383,"results":"79","hashOfConfig":"47"},{"size":5133,"mtime":1618570418613,"results":"80","hashOfConfig":"47"},{"size":10657,"mtime":1618819618085,"results":"81","hashOfConfig":"47"},{"size":16904,"mtime":1618821625658,"results":"82","hashOfConfig":"47"},{"size":18886,"mtime":1618821253250,"results":"83","hashOfConfig":"47"},{"size":15674,"mtime":1618821716376,"results":"84","hashOfConfig":"47"},{"size":10063,"mtime":1618824240158,"results":"85","hashOfConfig":"47"},{"size":700,"mtime":1618810822776,"results":"86","hashOfConfig":"47"},{"size":420,"mtime":1618557125934,"results":"87","hashOfConfig":"47"},{"size":998,"mtime":1618589550398,"results":"88","hashOfConfig":"47"},{"size":7209,"mtime":1618809804940,"results":"89","hashOfConfig":"47"},{"size":6621,"mtime":1618809804938,"results":"90","hashOfConfig":"47"},{"size":862,"mtime":1618628857384,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"eto61a",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"157"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"94"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\index.js",[],["196","197"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\CartLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StatusLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\AuthLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MerchantQR.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProfileLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StoreLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\DetailNavigation.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MainNavigation.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\ColorConstant.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\APIConstant.js",["198","199","200"],"export const address = \"https://dev-api.pikapp.id/\";\r\n// export const address = \"https://api.pikapp.id/\";\r\n\r\nvar secretDev = \"21f6fc80-cfdb-11ea-87d0-0242ac130003\"\r\nvar secretProd = \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\"\r\nexport const secret = secretDev;\r\n\r\nvar clientIdDev = \"abf0e2a9-e9ee-440f-8563-94481c64b797\"\r\nvar clientIdProd = \"d4aummjdkbzdsd46vygjvcy235ywmhkm\"\r\nexport const clientId = clientIdDev;\r\n// googleKeyDev need to activate billing which later should pay after expired\r\nvar googleKeyProd = \"AIzaSyBMG_JpxmoPEBH6fpveaowU2vkWYrZEw1Y\"\r\nvar googleKeyDev = \"AIzaSyAikqroR5x4BrRv5Yj-tWgUcqvjEKUysh4\"\r\nexport const googleKey = googleKeyDev;\r\n\r\nexport const jwtSecret = \"Er3lzchUa489bdlg35PCaGMKk2YzflBHCMue2jIAy9nFENvokE0JUbwytMFSvrajK8gYDttMdvzWw0OBRydt7pXfAAd1DTxWvE0Hc\"\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Cart\\CartView.js",["201","202","203","204","205","206"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Profile\\ProfileView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Main\\JumbotronView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Status\\StatusView.js",["207","208","209","210"],"import React from \"react\";\r\nimport { Row, Col, Nav, Card, Modal } from \"react-bootstrap\";\r\nimport unpaidIcon from \"../../Asset/Icon/unpaid_status.png\";\r\nimport unpaidActiveIcon from \"../../Asset/Icon/unpaid_active_status.png\";\r\nimport packIcon from \"../../Asset/Icon/pack_status.png\";\r\nimport packActiveIcon from \"../../Asset/Icon/pack_active_status.png\";\r\nimport sendIcon from \"../../Asset/Icon/send_status.png\";\r\nimport sendActiveIcon from \"../../Asset/Icon/send_active_status.png\";\r\nimport reviewIcon from \"../../Asset/Icon/review_status.png\";\r\nimport reviewActiveIcon from \"../../Asset/Icon/review_active_status.png\";\r\nimport placeholderIcon from \"../../Asset/Icon/placeholder_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport categoryFoodIcon from \"../../Asset/Icon/category_food_icon.png\";\r\nimport pickupStatusIcon from \"../../Asset/Icon/pickup_status_icon.png\";\r\nimport cashierStatusIcon from \"../../Asset/Icon/cashier_icon.png\"\r\nimport ovoIcon from \"../../Asset/Icon/ovo_icon.png\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport Axios from \"axios\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport Cookies from \"js-cookie\"\r\n\r\nexport class StatusView extends React.Component {\r\n  state = {\r\n    showModal: false,\r\n    activeTab: 1,\r\n    data: [\r\n      {\r\n        title: \"\",\r\n        distance: \"\",\r\n        quantity: \"\",\r\n        status: \"\",\r\n        biz_type: \"\",\r\n        payment: \"\",\r\n        transactionId: \"\",\r\n        transactionTime: \"\",\r\n      },\r\n    ],\r\n    currentModal: {\r\n      transactionId: \"\",\r\n      transactionTime:\"\",\r\n      storeName: \"Store\",\r\n      storeLocation: \"Location\",\r\n      storeDistance: \"Distance\",\r\n      status: \"Status\",\r\n      payment: \"Cash\",\r\n      biz_type: \"\",\r\n      food: [\r\n        {\r\n          productId: \"\",\r\n          name: \"\",\r\n          price: 0,\r\n          image: \"\",\r\n          note: \"\",\r\n          quantity: 1,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n  handleDetail(transId) {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      // window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/\" + transId + \"/txn-detail/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var resultModal = {...this.currentModal}\r\n        resultModal.transactionId = results.transaction_id\r\n        resultModal.transactionTime = results.transaction_time\r\n        resultModal.storeName = results.merchant_name\r\n        resultModal.storeDistance = \"\"\r\n        resultModal.storeLocation = \"\"\r\n        resultModal.status = results.status\r\n        resultModal.biz_type = results.biz_type\r\n        resultModal.payment = results.payment_with\r\n        resultModal.food = []\r\n        results.detail_products.forEach((product) => {\r\n          resultModal.food.push({\r\n            name: product.product_name,\r\n            price: product.price,\r\n            quantity: product.qty,\r\n            image: product.image,\r\n            note: product.notes\r\n          })\r\n        })\r\n        this.setState({\r\n          currentModal: resultModal\r\n        })\r\n      })\r\n      .catch((err) => {\r\n      });\r\n      \r\n    this.setModal(true);\r\n  }\r\n\r\n  handleSelect(tabIndex) {\r\n    this.setState({ activeTab: tabIndex });\r\n  }\r\n\r\n  componentDidMount() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      // window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/txn-history/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var stateData = {...this.state}\r\n        stateData.data.pop()\r\n        results.forEach((result) => {\r\n          stateData.data.push({\r\n            title: result.merchant_name,\r\n            distance: \"\",\r\n            quantity: result.total_product,\r\n            status: result.status,\r\n            biz_type: result.biz_type,\r\n            payment: result.payment_with,\r\n            transactionId: result.transaction_id,\r\n            transactionTime: result.transaction_time,\r\n          })\r\n        })\r\n        this.setState({data: stateData.data});\r\n      })\r\n      .catch((err) => {\r\n      });\r\n    // var state = { ...this.state };\r\n    // state.data.pop();\r\n    // state.data.push({\r\n    //   title: \"Food1\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food4\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food2\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"pick\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food3\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"send\",\r\n    // });\r\n    // this.setState({ data: state.data });\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    let modalList = this.state.currentModal.food;\r\n\r\n    let modalListView = modalList.map((data) => {\r\n      return (\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={placeholderIcon} class=\"statusFoodIcon\" alt=\"food icon\"/>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodname\">{data.name}</p>\r\n                <p class=\"statusFoodPrice\">\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(data.price)}\r\n                </p>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodQuantity\">{data.quantity}x</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <p class=\"statusFoodNote\">Catatan: {data.note}</p>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    });\r\n    let currentTotal = 0;\r\n    modalList.forEach((data) => {\r\n      currentTotal = currentTotal + data.price * data.quantity;\r\n    });\r\n    if (this.state.showModal === true) {\r\n      let payImage;\r\n      let payLabel;\r\n      if(this.state.currentModal.payment === \"PAY_BY_CASHIER\") {\r\n        payImage = cashierStatusIcon;\r\n        payLabel = \"Cashier\"\r\n      } else if(this.state.currentModal.payment === \"WALLET\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Cash\"\r\n      } else if(this.state.currentModal.payment === \"VA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Virtual\"\r\n      } else if(this.state.currentModal.payment === \"WALLET_OVO\") {\r\n        payImage = ovoIcon;\r\n        payLabel = \"OVO\"\r\n      } else if(this.state.currentModal.payment === \"WALLET_DANA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"DANA\"\r\n      } \r\n      modal = (\r\n        <Modal\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n          show={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              <p class=\"statusNoteLabel\">No Pesanan.</p>\r\n              <p class=\"statusNoteHeader\">{this.state.currentModal.transactionId}</p>\r\n              <p class=\"statusNoteLabel\">{this.state.currentModal.transactionTime}</p>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={categoryFoodIcon} class=\"statusStoreIcon\" alt=\"category icon\"/>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusStoreName\">\r\n                  {this.state.currentModal.storeName}\r\n                </p>\r\n                <p class=\"statusStoreLabel\">store location</p>\r\n                <p class=\"statusStoreLocation\">\r\n                  {this.state.currentModal.storeLocation}\r\n                </p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={pickupStatusIcon} class=\"statusStoreStatusIcon\"  alt=\"pickup status\"/>\r\n              </Col>\r\n              <Col>\r\n                <span class=\"statusStoreLabel\">status: </span>\r\n                <span class=\"statusStoreStatus\">\r\n                  {this.state.currentModal.status}\r\n                </span>\r\n                <span class=\"statusStoreDistance\">\r\n                  {this.state.currentModal.storeDistance}\r\n                </span>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStorePaymentLabel\">Metode Pembayaran</p>\r\n                <img src={payImage} class=\"statusFoodIcon\" alt=\"status icon\"></img>\r\n                <span class=\"statusStorePayment\">\r\n                      {payLabel}\r\n                    </span>\r\n              </Col>\r\n            </Row>\r\n            {modalListView}\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStoreTotal\">Total Pembayaran</p>\r\n              </Col>\r\n              <Col>\r\n                {Intl.NumberFormat(\"id-ID\", {\r\n                  style: \"currency\",\r\n                  currency: \"IDR\",\r\n                }).format(currentTotal)}\r\n              </Col>\r\n            </Row>\r\n          </Modal.Body>\r\n          <Modal.Footer />\r\n        </Modal>\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n    let notPaidImage;\r\n    let contentView;\r\n\r\n    let currentState = this.state.activeTab;\r\n    if (currentState === 1) {\r\n      notPaidImage = unpaidActiveIcon;\r\n      contentView = this.state.data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = cashierStatusIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"OPEN\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      notPaidImage = unpaidIcon;\r\n    }\r\n\r\n    let packImage;\r\n    if (currentState === 2) {\r\n      packImage = packActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"PAID\" || value.status === \"MERCHANT_CONFIRM\" || value.status === \"CUSTOMER_ACCEPTED\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      packImage = packIcon;\r\n    }\r\n\r\n    let sendImage;\r\n    if (currentState === 3) {\r\n      sendImage = sendActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if(value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if(value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if(value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if(value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if(value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        } \r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if(value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if(value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"DELIVER\" || value.status === \"ON_PROCESS\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt =\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      sendImage = sendIcon;\r\n    }\r\n\r\n    let reviewImage;\r\n    if (currentState === 4) {\r\n      reviewImage = reviewActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        if (value.status === \"CLOSE\" || value.status === \"FINALIZE\") {\r\n          let bizImage;\r\n          let bizLabel;\r\n          let payImage;\r\n          let payLabel;\r\n          if(value.payment === \"PAY_BY_CASHIER\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cashier\"\r\n          } else if(value.payment === \"WALLET\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cash\"\r\n          } else if(value.payment === \"VA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Virtual\"\r\n          } else if(value.payment === \"WALLET_OVO\") {\r\n            payImage = ovoIcon;\r\n            payLabel = \"OVO\"\r\n          } else if(value.payment === \"WALLET_DANA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"DANA\"\r\n          } \r\n          if(value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if(value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          if(value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if(value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt =\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt = \"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      reviewImage = reviewIcon;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Nav variant=\"tabs\" defaultActiveKey={\"not-paid\"}>\r\n          <Nav.Item>\r\n            <Nav.Link\r\n              eventKey={\"not-paid\"}\r\n              onClick={() => this.handleSelect(1)}\r\n            >\r\n              <Row>\r\n                <img\r\n                  src={notPaidImage}\r\n                  alt={\"unpaid\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Belum Bayar</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"pack\"} onClick={() => this.handleSelect(2)}>\r\n              <Row>\r\n                <img src={packImage} alt={\"pack\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Dikemas</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"send\"} onClick={() => this.handleSelect(3)}>\r\n              <Row>\r\n                <img src={sendImage} alt={\"send\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Siap / Dikirim</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"review\"} onClick={() => this.handleSelect(4)}>\r\n              <Row>\r\n                <img\r\n                  src={reviewImage}\r\n                  alt={\"review\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Beri Penilaian</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        {contentView}\r\n        {modal}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Auth\\FormView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Store\\StoreView.js",["211","212"],"import React from \"react\";\r\nimport { Col, Row, Image } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, clientId, googleKey } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Geocode from \"react-geocode\"\r\nimport Skeleton from 'react-loading-skeleton'\r\nimport { connect } from 'react-redux'\r\nimport { DoneLoad } from '../../Redux/Actions'\r\n\r\nclass StoreView extends React.Component {\r\n  state = {\r\n    page: 0,\r\n    size: 6,\r\n    location: \"\",\r\n    data: {\r\n      title: \"\",\r\n      image: \"\",\r\n      desc: \"\",\r\n      data: [\r\n        {\r\n          address: \"\",\r\n          rating: \"\",\r\n          logo: \"\",\r\n          distance: \"\",\r\n          storeId: \"\",\r\n          storeName: \"\",\r\n          storeDesc: \"\",\r\n          storeImage: \"\",\r\n        },\r\n      ],\r\n    },\r\n    idCol: 0,\r\n    totalPage: 0,\r\n    boolpage: false,\r\n    loadView: true,\r\n    allMerchantAPI: [],\r\n    lat: \"\",\r\n    lon: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.DoneLoad()\r\n    Cookies.set(\"homePage\", window.location.search)\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    const value = queryString.parse(window.location.search);\r\n    var longitude = \"\";\r\n    var latitude = \"\";\r\n    var merchant = \"\";\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n\r\n        let latitude = position.coords.latitude\r\n        let longitude = position.coords.longitude\r\n        let longlat = { lat: latitude, lon: longitude }\r\n        console.log(latitude, longitude);\r\n        this.setState({ lat: latitude, lon: longitude })\r\n        localStorage.setItem(\"longlat\", JSON.stringify(longlat))\r\n        // Show a map centered at latitude / longitude.\r\n\r\n        if (localStorage.getItem(\"longlat\")) {\r\n          var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n          latitude = getLocation.lat\r\n          longitude = getLocation.lon\r\n        } else {\r\n          // window.location.href = \"/login\"\r\n        }\r\n    \r\n        if (auth.isLogged === false) {\r\n          var lastLink = { value: window.location.href }\r\n          Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n          // window.location.href = \"/login\"\r\n        }\r\n        else {\r\n          longitude = value.longitude || longitude\r\n          latitude = value.latitude || latitude\r\n          if (window.location.href.includes('?latitude') || window.location.href.includes('store?')) {\r\n    \r\n          } else {\r\n            window.location.href = window.location.href + `?latitude=${latitude}&longitude=${longitude}`\r\n          }\r\n        }\r\n        longitude = value.longitude || longitude\r\n        latitude = value.latitude || latitude\r\n        merchant = value.merchant;\r\n    \r\n        // GOOGLE GEOCODE\r\n        if (localStorage.getItem(\"address\")) {\r\n          var getAdress = JSON.parse(localStorage.getItem(\"address\"))\r\n          this.setState({ location: getAdress })\r\n        } else {\r\n          Geocode.setApiKey(googleKey)\r\n          Geocode.fromLatLng(latitude, longitude)\r\n            .then((res) => {\r\n              console.log(res.results[0].formatted_address);\r\n              this.setState({ location: res.results[0].formatted_address })\r\n              localStorage.setItem(\"address\", JSON.stringify(res.results[0].formatted_address));\r\n            })\r\n            .catch((err) => {\r\n              this.setState({ location: \"Tidak tersedia\" })\r\n            })\r\n        }\r\n\r\n        let addressRoute;\r\n        if (merchant === undefined) {\r\n          addressRoute =\r\n            address + \"home/v2/merchant/\" + longitude + \"/\" + latitude + \"/ALL/\";\r\n        } else {\r\n          addressRoute =\r\n            address +\r\n            \"home/v1/merchant/\" +\r\n            longitude +\r\n            \"/\" +\r\n            latitude +\r\n            \"/\" +\r\n            merchant\r\n            + \"/\"\r\n        }\r\n        var stateData;\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        Axios(addressRoute, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-request-id\": uuid,\r\n            \"x-request-timestamp\": date,\r\n            \"x-client-id\": clientId,\r\n            \"token\": \"PUBLIC\",\r\n            \"category\": \"1\",\r\n          },\r\n          method: \"GET\",\r\n          params: {\r\n            page: this.state.page,\r\n            size: this.state.size\r\n          }\r\n        })\r\n          .then((res) => {\r\n            console.log(res.data.results);\r\n            stateData = { ...this.state.data };\r\n            let responseDatas = res.data;\r\n            stateData.data.pop();\r\n            responseDatas.results.forEach((data) => {\r\n              stateData.data.push({\r\n                address: data.merchant_address,\r\n                rating: data.merchant_rating,\r\n                logo: data.merchant_logo,\r\n                distance: data.merchant_distance,\r\n                storeId: data.mid,\r\n                storeName: data.merchant_name,\r\n                storeDesc: \"\",\r\n                storeImage: data.merchant_pict,\r\n              })\r\n            })\r\n            this.setState({ data: stateData, loadView: false, totalPage: responseDatas.total_pages, allMerchantAPI: res.data.results });\r\n            document.addEventListener('scroll', this.loadMoreMerchant)\r\n          })\r\n          .catch((err) => {\r\n          });\r\n          });\r\n    }\r\n\r\n\r\n    // const value = queryString.parse(window.location.search);\r\n    // console.log(value);\r\n    // var longitude = \"\";\r\n    // var latitude = \"\";\r\n    // var merchant = \"\";\r\n\r\n\r\n\r\n    //OPENCAGE API\r\n    // let opencagelonglat = latitude + \",\" + longitude\r\n    // Axios.get(`https://api.opencagedata.com/geocode/v1/json?`,{\r\n    //     params:{\r\n    //         key: 'cdeab36e4fec4073b0de60ff6b595c70',\r\n    //         q: opencagelonglat\r\n    //     }\r\n    // }).then((res)=> {\r\n    //   console.log(res.data.results[0].formatted);\r\n    //   this.setState({location: res.data.results[0].formatted})\r\n    // }).catch((err) => {\r\n    //   this.setState({location: \"Tidak tersedia\"})\r\n    // })\r\n<<<<<<< HEAD\r\n=======\r\n\r\n    let addressRoute;\r\n    if (merchant === undefined) {\r\n      addressRoute =\r\n        address + \"home/v2/merchant/\" + longitude + \"/\" + latitude + \"/ALL/\";\r\n    } else {\r\n      addressRoute =\r\n        address +\r\n        \"home/v1/merchant/\" +\r\n        longitude +\r\n        \"/\" +\r\n        latitude +\r\n        \"/\" +\r\n        merchant\r\n        + \"/\"\r\n    }\r\n    var stateData;\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    Axios(addressRoute, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"token\": \"PUBLIC\",\r\n        \"category\": \"1\",\r\n      },\r\n      method: \"GET\",\r\n      params: {\r\n        page: this.state.page,\r\n        size: this.state.size\r\n      }\r\n    })\r\n      .then((res) => {\r\n        console.log(res.data.results);\r\n        stateData = { ...this.state.data };\r\n        let responseDatas = res.data;\r\n        stateData.data.pop();\r\n        responseDatas.results.forEach((data) => {\r\n          stateData.data.push({\r\n            address: data.merchant_address,\r\n            rating: data.merchant_rating,\r\n            logo: data.merchant_logo,\r\n            distance: data.merchant_distance,\r\n            storeId: data.mid,\r\n            storeName: data.merchant_name,\r\n            storeDesc: \"\",\r\n            storeImage: data.merchant_pict,\r\n          })\r\n        })\r\n        this.setState({ data: stateData, loadView: false, totalPage: responseDatas.total_pages, allMerchantAPI: res.data.results });\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n        if (res.data.results.length < 6) {\r\n          document.removeEventListener('scroll', this.loadMoreMerchant)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n      });\r\n>>>>>>> 2a7cc7fb8858c63634d832069ecca447a8a4a471\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.idCol > 0) {\r\n      if (this.state.boolpage === true) {\r\n        const value = queryString.parse(window.location.search);\r\n        var longitude = \"\";\r\n        var latitude = \"\";\r\n        var merchant = \"\";\r\n        longitude = value.longitude\r\n        latitude = value.latitude\r\n        merchant = value.merchant;\r\n\r\n        let addressRoute;\r\n        if (merchant === undefined) {\r\n          addressRoute =\r\n            address + \"home/v2/merchant/\" + longitude + \"/\" + latitude + \"/ALL/\";\r\n        } else {\r\n          addressRoute =\r\n            address +\r\n            \"home/v1/merchant/\" +\r\n            longitude +\r\n            \"/\" +\r\n            latitude +\r\n            \"/\" +\r\n            merchant\r\n            + \"/\"\r\n        }\r\n        var stateData;\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        Axios(addressRoute, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-request-id\": uuid,\r\n            \"x-request-timestamp\": date,\r\n            \"x-client-id\": clientId,\r\n            \"token\": \"PUBLIC\",\r\n            \"category\": \"1\",\r\n          },\r\n          method: \"GET\",\r\n          params: {\r\n            page: this.state.page,\r\n            size: this.state.size\r\n          }\r\n        })\r\n          .then((res) => {\r\n            stateData = { ...this.state.data };\r\n            let responseDatas = res.data;\r\n            responseDatas.results.forEach((data) => {\r\n              stateData.data.push({\r\n                address: data.merchant_address,\r\n                rating: data.merchant_rating,\r\n                logo: data.merchant_logo,\r\n                distance: data.merchant_distance,\r\n                storeId: data.mid,\r\n                storeName: data.merchant_name,\r\n                storeDesc: \"\",\r\n                storeImage: data.merchant_pict,\r\n              })\r\n            })\r\n            let updateMerchant = [...this.state.allMerchantAPI]\r\n            responseDatas.results.forEach((data) => {\r\n              updateMerchant.push(data)\r\n            })\r\n            this.setState({ boolpage: false, allMerchantAPI: updateMerchant })\r\n            document.addEventListener('scroll', this.loadMoreMerchant)\r\n            if (this.state.page === this.state.totalPage - 1) {\r\n              this.setState({ idCol: this.state.idCol + 1 })\r\n            }\r\n          })\r\n          .catch((err) => {\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  storeClick = (e) => {\r\n    let selectedStore = this.state.allMerchantAPI.filter(value => {\r\n      return value.mid === e.storeId\r\n    })\r\n    var currentMerchant = {\r\n      mid: \"\",\r\n      storeName: \"\",\r\n      storeDesc: \"\",\r\n      distance: \"\",\r\n      storeImage: \"\",\r\n      storeAdress: \"\",\r\n      storeRating: \"\",\r\n      storeLogo: \"\",\r\n    };\r\n    currentMerchant.mid = e.storeId;\r\n    currentMerchant.storeName = e.storeName;\r\n    currentMerchant.storeDesc = \"Desc\";\r\n    currentMerchant.distance = e.distance;\r\n    currentMerchant.storeImage = e.storeImage;\r\n    currentMerchant.storeAdress = e.address;\r\n    currentMerchant.storeRating = e.rating;\r\n    currentMerchant.storeLogo = e.logo;\r\n\r\n    localStorage.setItem('selectedMerchant', JSON.stringify(selectedStore))\r\n    Cookies.set(\"currentMerchant\", currentMerchant, { expires: 1 })\r\n    localStorage.setItem('page', JSON.stringify(1))\r\n  }\r\n  handleDetail(data) {\r\n    return <Link to={\"/status\"}></Link>;\r\n  }\r\n\r\n  isBottom = (el) => {\r\n    return (el.getBoundingClientRect().top + 50) <= window.innerHeight\r\n  }\r\n\r\n  loadMoreMerchant = () => {\r\n    const wrappedElement = document.getElementById(\"idCol\")\r\n    if (this.state.idCol <= this.state.page) {\r\n      if (this.isBottom(wrappedElement)) {\r\n        // console.log('testloadmore');\r\n        this.setState({ idCol: this.state.idCol + 1, page: this.state.page + 1, boolpage: true })\r\n        document.removeEventListener('scroll', this.loadMoreMerchant)\r\n      }\r\n    } else {\r\n      document.removeEventListener('scroll', this.loadMoreMerchant)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  merchantLoading = () => (\r\n    <Row>\r\n      <Col xs={3} md={3}>\r\n        <Skeleton style={{ width: 70, height: 70, marginLeft: 10 }} />\r\n      </Col>\r\n      <Col xs={9} md={6}>\r\n        <Row>\r\n          <Col xs={7} md={9}>\r\n            <Skeleton style={{ width: 100, height: 30, marginLeft: 10 }} />\r\n            <Skeleton style={{ width: 100, height: 20, marginLeft: 10 }} />\r\n            <Skeleton style={{ width: 100, height: 20, marginLeft: 10 }} />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  )\r\n\r\n  render() {\r\n    if (localStorage.getItem('page')) {\r\n      let currentPage = JSON.parse(localStorage.getItem('page'))\r\n      if (currentPage === 1) {\r\n        localStorage.setItem('page', JSON.stringify(0))\r\n        window.location.reload()\r\n      }\r\n    }\r\n    const storeDatas = this.state.data.data.map((data) => {\r\n      return data;\r\n    });\r\n    var allCards = storeDatas.map((cardData) => {\r\n      return (\r\n        <Row>\r\n          <Col xs={3} md={3}>\r\n            {\r\n              this.state.loadView ?\r\n                <Skeleton width={70} height={70} />\r\n                :\r\n                <Image\r\n                  src={cardData.storeImage}\r\n                  rounded\r\n                  fluid\r\n                  className=\"storeImage\"\r\n                />\r\n            }\r\n          </Col>\r\n          <Col xs={9} md={6}>\r\n            <Row>\r\n              <Col xs={7} md={9}>\r\n                {\r\n                  this.state.loadView ?\r\n                    <Skeleton style={{ width: 100, height: 30, marginLeft: 20 }} />\r\n                    :\r\n                    <h5 className=\"foodTitle\">{cardData.storeName}</h5>\r\n                }\r\n                <p className=\"storeDesc\">{cardData.storeDesc}</p>\r\n                {\r\n                  this.state.loadView ?\r\n                    <Skeleton style={{ width: 100, height: 20, marginLeft: 20 }} />\r\n                    :\r\n                    <div className=\"foodButton\">\r\n                      <Link\r\n                        className={\"btn-cartPika\"}\r\n                        to={\"/store?mid=\" + cardData.storeId}\r\n                        style={{\r\n                          padding: 8,\r\n                          textDecoration: \"none\",\r\n                          color: \"black\",\r\n                        }}\r\n                        onClick={() => this.storeClick(cardData)}\r\n                      >\r\n                        Go to store\r\n                    </Link>\r\n                    </div>\r\n                }\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col xs={4} md={1} />\r\n          <Col xs={0} md={4} className=\"storeColumn\">\r\n            <h6 className=\"\" style={{ textAlign: \"left\" }}>\r\n              Lokasi:\r\n            </h6>\r\n            <p className=\"storeLabel\" style={{ textAlign: \"left\" }}>\r\n              {this.state.location || <Skeleton height={20} />}\r\n            </p>\r\n          </Col>\r\n          <Col />\r\n        </Row>\r\n        <Row />\r\n        <Row>\r\n          <div>\r\n            <Col md={12}>{allCards}</Col>\r\n            {\r\n              !this.state.loadView ?\r\n                this.state.idCol <= this.state.page ?\r\n                  this.state.totalPage-1 === this.state.page ?\r\n                    null\r\n                    :\r\n                    <div id={\"idCol\"}>\r\n                      {/* <Skeleton style={{paddingTop: 100, marginTop: 10, marginLeft: 10, width: \"95%\"}} /> */}\r\n                      {this.merchantLoading()}\r\n                    </div>\r\n                  :\r\n                  null\r\n                :\r\n                null\r\n            }\r\n          </div>\r\n        </Row>\r\n        <Row></Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { DoneLoad })(StoreView)\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Button\\PikaButton.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\PikaModal.js",[],["213","214"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\TextField\\PikaTextField.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\CartModal.js",[],["215","216"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\index.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\index.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AllReducers.js",["217"],"const INITIAL_STATE = {\r\n    buttonLoad: true,\r\n    validQTY: 0,\r\n    openSelect: false,\r\n    foodCateg: '',\r\n    checkboxes: [],\r\n    checkboxesTotal: [],\r\n    mandatCheckCond: false,\r\n    mandatCheck: false,\r\n    radiobutton: [],\r\n    mandatRadioCond: false,\r\n    mandatRadio: false,\r\n    totalAmountProd: 0,\r\n    openMenuCart: false\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"LOADING\":\r\n            return { ...state, buttonLoad: false }\r\n        case \"DONELOAD\":\r\n            return { ...state, buttonLoad: true }\r\n        case \"VALIDATIONQTY\":\r\n            return { ...state, validQTY: action.payload }\r\n        case \"OPENSELECT\":\r\n            return { ...state, openSelect: action.payload }\r\n        case \"FOODCATEG\":\r\n            return { ...state, foodCateg: action.payload }\r\n        case \"CHECKBOXES\":\r\n            return { ...state, checkboxes: action.payload }\r\n        case \"MANDATCHECKCOND\":\r\n            return { ...state, mandatCheckCond: action.payload }\r\n        case \"MANDATCHECK\":\r\n            return { ...state, mandatCheck: action.payload }\r\n        case \"COUNTCHECKBOX\":\r\n            return { ...state, checkboxesTotal: action.payload }\r\n        case \"RADIOBUTTON\":\r\n            return { ...state, radiobutton: action.payload }\r\n        case \"MANDATRADIOCOND\":\r\n            return { ...state, mandatRadioCond: action.payload }\r\n        case \"MANDATRADIO\":\r\n            return { ...state, mandatRadio: action.payload }\r\n        case \"COUNTTOTAL\":\r\n            return { ...state, totalAmountProd: action.payload }\r\n        case \"EDITCART\":\r\n            return { ...state, openMenuCart: action.payload }\r\n        case \"DEFAULTSTATE\":\r\n            return INITIAL_STATE\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\ButtonAction.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\App.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Store.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProductLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\CartLayoutDev.js",[],["218","219"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Product\\ProductView.js",["220","221","222","223","224","225"],"import React from \"react\";\r\nimport { prominent } from \"color.js\";\r\nimport rgbHex from 'rgb-hex'\r\nimport MenuDetail from \"../../Component/Menu/MenuDetail\";\r\nimport queryString from \"query-string\";\r\nimport cartIcon from \"../../Asset/Icon/cart_icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Storeimg from '../../Asset/Illustration/storeimg2.jpg'\r\nimport Storeimg2 from '../../Asset/Illustration/storeimg1.png'\r\nimport Logopikapp from '../../Asset/Logo/logo4x.png'\r\nimport NotifIcon from '../../Asset/Icon/bell.png'\r\nimport ProfileIcon from '../../Asset/Icon/avatar.png'\r\nimport OpenHourIcon from '../../Asset/Icon/hour.png'\r\nimport CoinIcon from '../../Asset/Icon/coin.png'\r\nimport LocationIcon from '../../Asset/Icon/location.png'\r\nimport PhoneIcon from '../../Asset/Icon/phone.png'\r\nimport StarIcon from '../../Asset/Icon/star.png'\r\nimport ArrowIcon from '../../Asset/Icon/arrowselect.png'\r\nimport Skeleton from 'react-loading-skeleton'\r\nimport Swal from 'sweetalert2'\r\nimport { connect } from 'react-redux'\r\nimport { ValidQty, OpenSelect } from '../../Redux/Actions'\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: [],\r\n  foodTotal: 0,\r\n};\r\n\r\nvar currentTotal = 0\r\n\r\nclass ProductView extends React.Component {\r\n  state = {\r\n    page: 0, //products pagination\r\n    size: 3, //set amount of products to be shown in frontend\r\n    boolpage: false,\r\n    productPage: [], //set how many page of product merchant from backend server\r\n    idCateg: [], //set current product page of specific size of loaded products\r\n    testColor: false,\r\n    testingchange: false, //only for testing, would be remove\r\n    showModal: false, // show customization of selected menu such as qty, notes and more advance choice\r\n    showMenuDet: false, //show menu detail\r\n    data: {\r\n      mid: \"\",\r\n      title: \"\",\r\n      image: \"\",\r\n      logo: \"\",\r\n      desc: \"\",\r\n      address: \"\",\r\n      rating: \"\",\r\n      phone: \"\",\r\n      currentData: {\r\n        productId: \"\",\r\n        category: \"\",\r\n        foodName: \"\",\r\n        foodDesc: \"\",\r\n        foodPrice: 0,\r\n        foodImage: \"\",\r\n        foodExt: [\r\n          {\r\n            name: \"\",\r\n            amount: 0,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    backColor1: \"\", //merchant info background color\r\n    backColor2: \"\", //products info background color\r\n    categName: \"All Categories\", //initial for dropdown select\r\n    allProductsandCategories: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //mapping from API\r\n    productCategpersize: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //tobe shown in products area\r\n    choosenIndCateg: null, //index of category selected when load more products in selected category\r\n    counterLoad: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.ValidQty(0)\r\n    document.body.style.backgroundColor = 'white'\r\n    Cookies.set(\"lastProduct\", window.location.href, { expires: 1 })\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      // window.location.href = \"/login\"\r\n    }\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    const notab = value.table || \"\"\r\n    let selectedMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\r\n    let filtersizeMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\r\n\r\n    let bannerMerchant = currentMerchant.storeImage\r\n    bannerMerchant = bannerMerchant.replace(/^https:\\/\\//i, 'http://')\r\n    console.log(bannerMerchant);\r\n\r\n    let stateData = { ...this.state.data };\r\n    stateData.mid = mid;\r\n    stateData.title = currentMerchant.storeName;\r\n    stateData.image = currentMerchant.storeImage;\r\n    stateData.logo = currentMerchant.storeLogo;\r\n    stateData.desc = currentMerchant.storeDistance;\r\n    stateData.address = currentMerchant.storeAdress;\r\n    stateData.rating = currentMerchant.storeRating;\r\n    stateData.phone = \"081296000823\";\r\n    stateData.notable = notab\r\n    var productCateg = []\r\n    var idCateg = []\r\n    var productPage = []\r\n    productCateg = selectedMerchant[0].categories.map((categ) => {\r\n      idCateg.push(0)\r\n      productPage.push(this.state.size)\r\n      return categ\r\n    })\r\n\r\n    productCateg.forEach((val) => {\r\n      val.category_products = []\r\n    })\r\n\r\n    productCateg.forEach((categProd) => {\r\n      selectedMerchant[0].products.forEach((allproducts) => {\r\n        if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\r\n          categProd.category_products.push({\r\n            productId: allproducts.product_id,\r\n            category: allproducts.product_category,\r\n            foodName: allproducts.product_name,\r\n            foodDesc: \"\",\r\n            foodPrice: allproducts.product_price,\r\n            foodImage: allproducts.product_picture1,\r\n            foodExt: [\r\n              {\r\n                name: \"\",\r\n                amount: 0,\r\n              },\r\n            ],\r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    let productPerSize = filtersizeMerchant[0].categories.map((categ) => {\r\n      return categ\r\n    })\r\n\r\n    productPerSize.forEach((val) => {\r\n      val.category_products = []\r\n    })\r\n\r\n    productPerSize.forEach((categProd) => {\r\n      filtersizeMerchant[0].products.forEach((allproducts) => {\r\n        if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\r\n          categProd.category_products.push({\r\n            productId: allproducts.product_id,\r\n            category: allproducts.product_category,\r\n            foodName: allproducts.product_name,\r\n            foodDesc: \"\",\r\n            foodPrice: allproducts.product_price,\r\n            foodImage: allproducts.product_picture1,\r\n            foodExt: [\r\n              {\r\n                name: \"\",\r\n                amount: 0,\r\n              },\r\n            ],\r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    let firstShownProduct = []\r\n    productPerSize.forEach((categProd, indexcategProd) => {\r\n      firstShownProduct.push(categProd)\r\n      let newFilter = categProd.category_products.filter((valProd, indexvalProd) => {\r\n        return indexvalProd < this.state.size\r\n      })\r\n      categProd.category_products = newFilter\r\n      firstShownProduct[indexcategProd].category_products = []\r\n      firstShownProduct[indexcategProd].category_products = newFilter\r\n    })\r\n\r\n    let newImage = currentMerchant.storeImage\r\n    newImage = newImage.replace(/^https:\\/\\//i, 'http://')\r\n    console.log(newImage);\r\n\r\n    prominent(Storeimg, { amount: 3 }).then((color) => {\r\n      // return RGB color for example [241, 221, 63]\r\n      var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n      var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n      this.brightenColor(merchantColor, 70, productColor, 60)\r\n      this.setState({ data: stateData, allProductsandCategories: productCateg, productCategpersize: productPerSize, idCateg, productPage });\r\n      document.addEventListener('scroll', this.loadMoreMerchant)\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.idCateg[this.state.choosenIndCateg] > 0) { //load more products with selected index of category\r\n      if (this.state.boolpage === true) {\r\n        this.loadProducts(this.state.choosenIndCateg)\r\n      } else {\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  brightenColor = (hex, percent, hex2, percent2) => {\r\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\r\n    //backColor1\r\n    if (hex.length == 3) {\r\n      hex = hex.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r = parseInt(hex.substr(0, 2), 16),\r\n      g = parseInt(hex.substr(2, 2), 16),\r\n      b = parseInt(hex.substr(4, 2), 16);\r\n\r\n    let brightColor = '#' +\r\n      ((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16)).substr(1);\r\n\r\n    //backColor2\r\n    if (hex2.length == 3) {\r\n      hex2 = hex2.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r2 = parseInt(hex2.substr(0, 2), 16),\r\n      g2 = parseInt(hex2.substr(2, 2), 16),\r\n      b2 = parseInt(hex2.substr(4, 2), 16);\r\n\r\n    let brightColor2 = '#' +\r\n      ((0 | (1 << 8) + r2 + (256 - r2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + g2 + (256 - g2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + b2 + (256 - b2) * percent2 / 100).toString(16)).substr(1);\r\n\r\n    this.setState({ backColor1: brightColor, backColor2: brightColor2, testColor: false })\r\n    document.body.style.backgroundColor = '#' + hex;\r\n  }\r\n\r\n  loadProducts = (indexOfCateg) => {\r\n    let getindexProd = this.state.allProductsandCategories[indexOfCateg].category_products\r\n    let loadtheProd = getindexProd.filter((valProd, indvalProd) => {\r\n      return indvalProd >= this.state.idCateg[indexOfCateg] && indvalProd < this.state.productPage[indexOfCateg]\r\n    })\r\n\r\n    let updatedProduct = this.state.productCategpersize\r\n    updatedProduct.forEach((value, index) => {\r\n      if (index === indexOfCateg) {\r\n        loadtheProd.forEach((valLoadProd) => {\r\n          value.category_products.push(valLoadProd)\r\n        })\r\n      }\r\n    })\r\n\r\n    this.setState({ boolpage: false, productCategpersize: updatedProduct })\r\n    document.addEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  handlePhone = (phone) => { //go to Whatsapp chat\r\n    phone.substring(1)\r\n    let waNumber = '62' + phone\r\n    window.location.href = `https://wa.me/${waNumber}`\r\n  }\r\n\r\n  handleDetail(data) {\r\n    this.setState({ currentData: data });\r\n    this.setState({ showMenuDet: true });\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data;\r\n  };\r\n\r\n  handleAddCart = () => {\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    this.setModal(false);\r\n    var isStorePresent = false;\r\n    let cart = JSON.parse(localStorage.getItem('cart'))\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        isStorePresent = true;\r\n      }\r\n    });\r\n\r\n    let duplicateProduct = []\r\n    var isDuplicate = false;\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        data.food.forEach((food) => {\r\n          if (food.productId === this.state.currentData.productId) {\r\n            isDuplicate = true;\r\n            duplicateProduct.push(food)\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    var isDuplicateSelection = false\r\n    let indexOfspesificCart = 0 //get index of spesific cart product after break loop or match condition\r\n    if (isStorePresent && isDuplicate) {\r\n      let countAllSelection = 0\r\n      let sizecartArr = 0 //size cart of spesific index\r\n      let sizecurrentArr = 0 //size current selected menu\r\n\r\n      //loop list checkbox from current menu selection\r\n      currentExt.listcheckbox.forEach((currentfirstVal) => {\r\n        currentfirstVal.forEach((currentnestedVal) => {\r\n          if (currentnestedVal.name) {\r\n            sizecurrentArr += 1\r\n          }\r\n        })\r\n      })\r\n\r\n      //loop list radio from current menu selection\r\n      currentExt.listradio.forEach((currentfirstVal) => {\r\n        currentfirstVal.forEach((currentnestedVal) => {\r\n          if (currentnestedVal.name) {\r\n            sizecurrentArr += 1\r\n          }\r\n        })\r\n      })\r\n\r\n      let boolSpesificInd = true //to break following loop\r\n      duplicateProduct.forEach((menuProd, index) => {\r\n        if (boolSpesificInd) {\r\n          //loop list checkbox from cart\r\n          menuProd.foodListCheckbox.forEach(firstVal => {\r\n            firstVal.forEach(nestedVal => {\r\n              if (nestedVal.name) {\r\n                sizecartArr += 1\r\n              }\r\n            })\r\n          })\r\n\r\n          //loop list radio from cart\r\n          menuProd.foodListRadio.forEach(firstVal => {\r\n            firstVal.forEach(nestedVal => {\r\n              if (nestedVal.name) {\r\n                sizecartArr += 1\r\n              }\r\n            })\r\n          })\r\n\r\n          console.log(sizecartArr);\r\n          console.log(sizecurrentArr);\r\n          if (sizecartArr === sizecurrentArr) {\r\n            menuProd.foodListCheckbox.forEach((firstVal) => {\r\n              firstVal.forEach((nestedVal) => {\r\n\r\n                //loop listcheckbox from current advance selection to be match with added cart\r\n                currentExt.listcheckbox.forEach((currentfirstVal) => {\r\n                  currentfirstVal.forEach((currentnestedVal) => {\r\n                    if (nestedVal.name === currentnestedVal.name) {\r\n                      countAllSelection += 1\r\n                    }\r\n                  })\r\n                })\r\n              })\r\n            })\r\n\r\n            // loop radio from added cart\r\n            menuProd.foodListRadio.forEach((firstVal) => {\r\n              firstVal.forEach((nestedVal) => {\r\n\r\n                //loop radio from current advance selection to be match with added cart\r\n                currentExt.listradio.forEach((currentfirstVal) => {\r\n                  currentfirstVal.forEach((currentnestedVal) => {\r\n                    if (nestedVal.name === currentnestedVal.name) {\r\n                      countAllSelection += 1\r\n                    }\r\n                  })\r\n                })\r\n              })\r\n            })\r\n\r\n            if (sizecartArr === countAllSelection) {\r\n              if (menuProd.foodNote === currentExt.note) {\r\n                indexOfspesificCart = index\r\n                isDuplicateSelection = true\r\n                boolSpesificInd = false\r\n              } else {\r\n                sizecartArr = 0\r\n                countAllSelection = 0\r\n              }\r\n            } else {\r\n              sizecartArr = 0\r\n              countAllSelection = 0\r\n            }\r\n          } else {\r\n            sizecartArr = 0\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    var isFound = false\r\n    if (isStorePresent === true) {\r\n      if (isDuplicate === true) {\r\n        if (isDuplicateSelection) {\r\n          console.log('duplicate');\r\n          cart.forEach((data) => {\r\n            if (isFound === false) {\r\n              if (data.mid === this.state.data.mid) {\r\n                console.log('same mid');\r\n                // data.food.forEach((food) => {\r\n                //   if (isFound === false) {\r\n                //     if (food.foodNote === currentExt.note) {\r\n                //       if (food.productId === this.state.currentData.productId) {\r\n                //         isFound = true\r\n                //         food.foodAmount += currentExt.detailCategory[0].amount;\r\n                //       }\r\n                //     }\r\n                //   }\r\n                // });\r\n\r\n                if (isFound === false) {\r\n                  if (duplicateProduct[indexOfspesificCart].foodNote === currentExt.note) {\r\n                    isFound = true\r\n                    duplicateProduct[indexOfspesificCart].foodAmount += currentExt.detailCategory[0].amount\r\n                    duplicateProduct[indexOfspesificCart].foodTotalPrice += currentTotal\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n          if (isFound === false) {\r\n            var isAdded = false\r\n            cart.forEach((data) => {\r\n              if (data.mid === this.state.data.mid) {\r\n                data.food.forEach((food) => {\r\n                  if (isAdded === false) {\r\n                    isAdded = true\r\n                    data.food.push({\r\n                      productId: this.state.currentData.productId,\r\n                      foodName: this.state.currentData.foodName,\r\n                      foodPrice: this.state.currentData.foodPrice,\r\n                      foodImage: this.state.currentData.foodImage,\r\n                      foodCategory: currentExt.foodCategory,\r\n                      foodAmount: currentExt.detailCategory[0].amount,\r\n                      foodNote: currentExt.note,\r\n                      foodListCheckbox: currentExt.listcheckbox,\r\n                      foodListRadio: currentExt.listradio,\r\n                      foodTotalPrice: currentTotal\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            })\r\n          };\r\n        } else {\r\n          console.log('noduplicate choice');\r\n          cart.forEach((data) => {\r\n            if (data.mid === this.state.data.mid) {\r\n              data.food.push({\r\n                productId: this.state.currentData.productId,\r\n                foodName: this.state.currentData.foodName,\r\n                foodPrice: this.state.currentData.foodPrice,\r\n                foodImage: this.state.currentData.foodImage,\r\n                foodCategory: currentExt.foodCategory,\r\n                foodAmount: currentExt.detailCategory[0].amount,\r\n                foodNote: currentExt.note,\r\n                foodListCheckbox: currentExt.listcheckbox,\r\n                foodListRadio: currentExt.listradio,\r\n                foodTotalPrice: currentTotal\r\n              });\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        console.log('noduplicate product');\r\n        cart.forEach((data) => {\r\n          if (data.mid === this.state.data.mid) {\r\n            data.food.push({\r\n              productId: this.state.currentData.productId,\r\n              foodName: this.state.currentData.foodName,\r\n              foodPrice: this.state.currentData.foodPrice,\r\n              foodImage: this.state.currentData.foodImage,\r\n              foodCategory: currentExt.foodCategory,\r\n              foodAmount: currentExt.detailCategory[0].amount,\r\n              foodNote: currentExt.note,\r\n              foodListCheckbox: currentExt.listcheckbox,\r\n              foodListRadio: currentExt.listradio,\r\n              foodTotalPrice: currentTotal\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      cart.push({\r\n        mid: mid,\r\n        storeName: currentMerchant.storeName,\r\n        storeDesc: currentMerchant.storeDesc,\r\n        storeDistance: currentMerchant.distance,\r\n        food: [\r\n          {\r\n            productId: this.state.currentData.productId,\r\n            foodName: this.state.currentData.foodName,\r\n            foodPrice: this.state.currentData.foodPrice,\r\n            foodImage: this.state.currentData.foodImage,\r\n            foodCategory: currentExt.foodCategory,\r\n            foodAmount: currentExt.detailCategory[0].amount,\r\n            foodNote: currentExt.note,\r\n            foodListCheckbox: currentExt.listcheckbox,\r\n            foodListRadio: currentExt.listradio,\r\n            foodTotalPrice: currentTotal\r\n          },\r\n        ],\r\n      });\r\n    }\r\n    let addedMerchants = []\r\n    if (Cookies.get(\"addedMerchants\") === undefined) {\r\n      if (!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    } else {\r\n      addedMerchants = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n      if (!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    }\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    Swal.fire({\r\n      position: 'top',\r\n      icon: 'success',\r\n      title: 'Berhasil masuk cart',\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    })\r\n    // alert('berhasil masuk cart')\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    let newNotes = ''\r\n    currentExt.listcheckbox.forEach(val => {\r\n      val.forEach(val2 => {\r\n        return newNotes += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    currentExt.listradio.forEach(val => {\r\n      val.forEach(val2 => {\r\n        return newNotes += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    if (currentExt.note) {\r\n      newNotes += currentExt.note\r\n    }\r\n\r\n    let uuid = uuidV4();\r\n    const date = new Date().toISOString();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/cart-post/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"POST\",\r\n      data: {\r\n        mid: this.state.data.mid,\r\n        pid: this.state.currentData.productId,\r\n        notes: newNotes,\r\n        qty: currentExt.detailCategory[0].amount,\r\n      }\r\n    })\r\n      .then(() => {\r\n        console.log('addtocart succeed');\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  changeMenu = () => {\r\n    this.props.OpenSelect(!this.props.AllRedu.openSelect)\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  changeHeader = (menu) => {\r\n    this.props.OpenSelect(false)\r\n    this.setState({ categName: menu })\r\n  }\r\n\r\n  isBottom = (el) => {\r\n    return (el.getBoundingClientRect().top + 100) <= window.innerHeight\r\n  }\r\n\r\n  stopAndLoadMore = (ind) => {\r\n    // console.log(ind);\r\n    // console.log(this.state.idCateg[ind]);\r\n    // console.log(this.state.productPage[ind]);\r\n    if (this.state.productCategpersize[ind].category_products.length < this.state.allProductsandCategories[ind].category_products.length) {\r\n      // console.log('testloadmore');\r\n      var openidCateg = [...this.state.idCateg]\r\n      openidCateg[ind] += this.state.size\r\n\r\n      var openproductPage = [...this.state.productPage]\r\n      openproductPage[ind] += this.state.size\r\n\r\n      this.setState({ idCateg: openidCateg, productPage: openproductPage, boolpage: true, choosenIndCateg: ind })\r\n    } else {\r\n      // console.log('nambah');\r\n      var num = this.state.counterLoad\r\n      num++\r\n      this.setState({ counterLoad: num })\r\n    }\r\n  }\r\n\r\n  loadMoreMerchant = () => {\r\n    this.state.productCategpersize.forEach((val, ind) => {\r\n      var wrappedElement = document.getElementById(ind)\r\n      if (this.isBottom(wrappedElement)) {\r\n        // console.log(this.state.counterLoad, 'counterLoad');\r\n        // console.log(wrappedElement.id, 'wrap');\r\n        if (wrappedElement.id == this.state.counterLoad) {\r\n          // console.log(ind, 'selected index');\r\n          document.removeEventListener('scroll', this.loadMoreMerchant)\r\n          this.stopAndLoadMore(ind)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  contentView = () => {\r\n    return this.state.productCategpersize.map((categ, indcateg) => {\r\n      return (\r\n        <div key={indcateg} className='product-section'>\r\n          <h2 id={categ.category_name.toLocaleLowerCase()} className='product-categ'>{categ.category_name.toLocaleLowerCase() || <Skeleton height={30} width={100} />}</h2>\r\n\r\n          <div className='list-product'>\r\n            {\r\n              categ.category_products.map((product, indprod) => {\r\n                return (\r\n                  <div key={indprod} className='product-merchant' onClick={() => this.handleDetail(product)}>\r\n                    <div className='product-img'>\r\n                      {\r\n                        product.foodImage ?\r\n                          <img src={product.foodImage} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n                          :\r\n                          <Skeleton height={120} style={{ paddingTop: 50 }} />\r\n                      }\r\n                    </div>\r\n\r\n                    <div className='product-detail-mob'>\r\n                      <div className='product-detail'>\r\n                        <div className='product-star'>\r\n                          <img className='product-star-img' src={StarIcon} alt='' />\r\n                          <h6 className='product-star-rating'>5.0</h6>\r\n                        </div>\r\n\r\n                        <div className='product-name'>\r\n                          {product.foodName || <Skeleton style={{ paddingTop: 10 }} />}\r\n                        </div>\r\n\r\n                        <div className='product-desc'>\r\n                          {product.foodDesc ? product.foodDesc : \"Product Description\"}\r\n                        </div>\r\n\r\n                        <div className='product-price'>\r\n                          {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\r\n                        </div>\r\n                      </div>\r\n                      <div className='product-price-mob'>\r\n                        {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          {\r\n            this.state.productCategpersize[indcateg].category_products.length < this.state.allProductsandCategories[indcateg].category_products.length ?\r\n              <div id={indcateg}>\r\n                <Skeleton style={{ paddingTop: 100, borderRadius: 30 }} />\r\n              </div>\r\n              :\r\n              <div id={indcateg}>\r\n                {/* <Skeleton style={{paddingTop:100, borderRadius: 30}} /> */}\r\n              </div>\r\n          }\r\n        </div>\r\n      );\r\n    })\r\n  }\r\n\r\n  handleCartAmount = (price) => {\r\n    currentTotal = price\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleCateg={this.state.productCategpersize}\r\n          handleAmount={this.handleCartAmount}\r\n          handleClick={this.handleAddCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let cartButton;\r\n    const value = queryString.parse(window.location.search);\r\n    const notab = value.table || \"\"\r\n    if (JSON.parse(localStorage.getItem('cart'))) {\r\n      let allCart = JSON.parse(localStorage.getItem('cart'))\r\n      let filterMerchantCart = allCart.filter(cartVal => {\r\n        return this.state.data.mid === cartVal.mid\r\n      })\r\n      if (filterMerchantCart.length) {\r\n        localStorage.setItem('table', notab)\r\n        localStorage.setItem('lastTable', notab)\r\n        if (filterMerchantCart[0].mid) {\r\n          cartButton = (\r\n            <Link to={\"/cart\"} className={\"btn-productCart\"}>\r\n              <img src={cartIcon} alt='' />\r\n            </Link>\r\n          );\r\n        } else {\r\n          cartButton = <></>;\r\n        }\r\n      } else {\r\n        cartButton = <></>;\r\n      }\r\n    } else {\r\n      let cart = JSON.parse(localStorage.getItem('cart'))\r\n      if (cart.length > 1) {\r\n        localStorage.setItem('table', notab)\r\n        localStorage.setItem('lastTable', notab)\r\n        cartButton = (\r\n          <Link to={\"/cart\"} className={\"btn-productCart\"}>\r\n            <img src={cartIcon} alt={\"cart\"} />\r\n          </Link>\r\n        );\r\n      } else {\r\n        cartButton = <></>;\r\n      }\r\n    }\r\n\r\n    if (this.state.categName !== \"All Categories\") {\r\n      if (this.props.AllRedu.openSelect === false) {\r\n        //scroll to selected menu\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n        document.getElementById(this.state.categName).scrollIntoView({ behavior: \"smooth\" })\r\n        this.setState({ categName: 'All Categories' })\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className='storeBanner'>\r\n          <img src={this.state.data.image || <Skeleton />} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n          <div className='iconBanner'>\r\n            <Link to={\"/profile\"}>\r\n              <div className='profileIcon-sec'>\r\n                <div className='profileIcon'>\r\n                  <span className='reactProfIcons'>\r\n                    <img className='profileicon-img' src={ProfileIcon} alt='' />\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n\r\n            <Link to={\"/status\"}>\r\n              <div className='notifIcon-sec'>\r\n                <div className='notifIcon'>\r\n                  <span className='reactNotifIcons'>\r\n                    <img className='notificon-img' src={NotifIcon} alt='' />\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className='merchant-section' style={{ backgroundColor: this.state.backColor1 }}>\r\n          <div className='inside-merchantSection'>\r\n            <div className='merchant-info'>\r\n              <div className='top-merchantInfo'>\r\n                <div className='inside-topMerchantInfo'>\r\n                  <div className='merchant-title'>\r\n                    <div className='merchant-logo'>\r\n                      <img src={this.state.data.logo || <Skeleton />} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n                    </div>\r\n\r\n                    <div className='merchant-name'>\r\n                      <div className='merchant-mainName'>\r\n                        {this.state.data.title || <Skeleton style={{ paddingTop: 30, width: 200 }} />}\r\n                      </div>\r\n\r\n                      <div className='merchant-categName'>\r\n                        <div className='merchant-allcateg'>Merchant Category</div>\r\n                        <div className='merchant-starInfo'>\r\n                          {\r\n                            this.state.data.rating ?\r\n                              <>\r\n                                <img className='star-img' src={StarIcon} alt='' />\r\n                                <div className='merchant-star'>{this.state.data.rating}</div>\r\n                              </>\r\n                              :\r\n                              <Skeleton width={50} />\r\n                          }\r\n                          {/* <div className='star-votes'>(50+ Upvotes)</div> */}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchant-call-sec' onClick={() => this.handlePhone(this.state.data.phone)}>\r\n                    <div className='merchant-call'>\r\n                      <span className='merchantCall-icon'>\r\n                        <img className='merchantCall-img' src={PhoneIcon} alt='' />\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='bottom-merchantInfo'>\r\n                <div className='inside-bottomMerchantInfo'>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='openhouricon' src={OpenHourIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>Open</div>\r\n                      <div className='bottom-detail-info'>Jum (08.00 - 20.00)</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='coinicon' src={CoinIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>$$$</div>\r\n                      <div className='bottom-detail-info'>50 K - 100 K</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='locationicon' src={LocationIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>Store Address</div>\r\n                      <div className='bottom-detail-info'>{this.state.data.address || <Skeleton style={{ paddingTop: 30, width: 100 }} />}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='merchant-category'>\r\n              <div className='select-category'>\r\n                <div className='listCategory'>\r\n                  <h2 className='categoryName'>{this.state.categName}</h2>\r\n\r\n                  <div className='arrow-based' onClick={() => this.changeMenu()} >\r\n                    <img className='arrowicon' src={ArrowIcon} alt='' />\r\n                  </div>\r\n                </div>\r\n\r\n                {\r\n                  this.props.AllRedu.openSelect ?\r\n                    <div className='custom-options'>\r\n                      <span className='custom-optionCloser' defaultValue='Rice Box'>Closer</span>\r\n                      {\r\n                        this.state.productCategpersize.map((menuCategory, index) => (\r\n                          <span key={index} className='custom-option' onClick={() => this.changeHeader(menuCategory.category_name.toLocaleLowerCase())}>{menuCategory.category_name.toLocaleLowerCase()}</span>\r\n                        ))\r\n                      }\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='product-layout' style={{ backgroundColor: this.state.backColor2 }}>\r\n          <div className='mainproduct-sec'>\r\n            {this.contentView()}\r\n\r\n            <div className='pikapp-info'>\r\n              <h3 className='pikappInfo'>Digital Menu By</h3>\r\n              <img className='Logopikapp' src={Logopikapp} alt='' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {cartButton}\r\n        {this.menuDetail()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { ValidQty, OpenSelect })(ProductView)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Cart\\CartViewDev.js",["226","227","228","229"],"import React from \"react\";\r\nimport { Row, Col, Button, ButtonGroup, Form } from \"react-bootstrap\";\r\nimport chevronImage from \"../../Asset/Icon/chevron_right.png\";\r\nimport removeIcon from \"../../Asset/Icon/remove_icon.png\";\r\nimport storeIcon from \"../../Asset/Icon/store_icon.png\";\r\nimport checklistIcon from \"../../Asset/Icon/checklist_icon.png\";\r\nimport frontIcon from \"../../Asset/Icon/front_icon.png\";\r\nimport cashierIcon from \"../../Asset/Icon/cashier_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport { CartModal } from \"../../Component/Modal/CartModal\";\r\nimport { cart } from \"../../App\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, secret, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Loader from 'react-loader'\r\nimport MenuDetail from '../../Component/Menu/MenuDetail'\r\nimport { connect } from \"react-redux\";\r\nimport { EditMenuCart } from '../../Redux/Actions'\r\n\r\nvar options = {\r\n  lines: 13,\r\n  length: 20,\r\n  width: 10,\r\n  radius: 30,\r\n  scale: 0.25,\r\n  corners: 1,\r\n  color: '#000',\r\n  opacity: 0.25,\r\n  rotate: 0,\r\n  direction: 1,\r\n  speed: 1,\r\n  trail: 60,\r\n  fps: 20,\r\n  shadow: false,\r\n  hwaccel: false,\r\n};\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: []\r\n};\r\n\r\nclass CartView extends React.Component {\r\n  state = {\r\n    notable: \"\",\r\n    showModal: false,\r\n    currentModalTitle: \"\",\r\n    paymentOption: \"Pembayaran di kasir\",\r\n    paymentType: \"PAY_BY_CASHIER\",\r\n    biz_type: this.props.noTable.table !== \"\" ? this.props.noTable.table > 0 ? \"DINE_IN\" : \"TAKE_AWAY\" : \"DINE_IN\",\r\n    eat_type: this.props.noTable.table !== \"\" ? this.props.noTable.table > 0 ? \"Makan di tempat\" : \"Bungkus / Takeaway\" : \"Makan di tempat\",\r\n    currentModal: [\r\n      {\r\n        image: \"\",\r\n        option: \"\",\r\n      },\r\n    ],\r\n    loadButton: true,\r\n    showMenuDet: false,\r\n    filteredCart: [],\r\n    currentData: {},\r\n    themid: '',\r\n    indexEdit: 0,\r\n  };\r\n\r\n  handleDetail(data) {\r\n    if (data === \"eat-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Cara makan anda?\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"dineIn\",\r\n            option: \"Makan di tempat\",\r\n          },\r\n          {\r\n            image: \"takeaway\",\r\n            option: \"Bungkus / Takeaway\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"pay-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Bayar pakai apa?\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"cashier\",\r\n            option: \"Pembayaran di kasir\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleDecrease(e) {\r\n    if (e.foodAmount > 1) {\r\n      e.foodAmount -= 1;\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  handleIncrease(e) {\r\n    e.foodAmount += 1;\r\n    this.forceUpdate();\r\n  }\r\n\r\n  handleDelete(e, ind, mid) {\r\n    let filteredCart;\r\n    let addedMerchants = []\r\n    let newAllCart = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        let filteredStore = store.food.filter((data, index) => {\r\n          return index !== ind\r\n        })\r\n\r\n        if (filteredStore.length === 0) {\r\n          filteredCart = cart.filter((filterStore) => {\r\n            return filterStore.mid !== store.mid;\r\n          });\r\n          localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\r\n          filteredCart.forEach((cart) => {\r\n            addedMerchants.push(cart.mid)\r\n            Cookies.set(\"addedMerchants\", addedMerchants)\r\n          })\r\n        } else {\r\n          let newFilter = store.food\r\n          newFilter = []\r\n          filteredStore.forEach((val) => {\r\n            console.log(val);\r\n            newFilter.push(val)\r\n          })\r\n          store.food = newFilter\r\n          newAllCart.push(store)\r\n        }\r\n      } else {\r\n        newAllCart.push(store)\r\n      }\r\n    });\r\n\r\n    if (newAllCart.length < 2) {\r\n      cart.splice(1)\r\n      localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n      window.history.back()\r\n      // window.location.href = Cookies.get(\"lastProduct\")\r\n    } else {\r\n      let filterMerchantCart = newAllCart.filter(valueCart=> {\r\n        return valueCart.mid === mid\r\n      })\r\n      localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n      if (filterMerchantCart.length) {\r\n        window.location.reload()\r\n      } else {\r\n        window.history.back()\r\n      }\r\n    }\r\n\r\n    // cart.forEach((store) => {\r\n    //   let filteredStore = store.food.filter((data) => {\r\n    //     if (data.productId === e.productId) {\r\n    //       if (data.foodNote !== e.foodNote) {\r\n    //         return data\r\n    //       }\r\n    //     } else {\r\n    //       return data\r\n    //     }\r\n    //   });\r\n    //   console.log(filteredStore);\r\n    //   store.food = filteredStore;\r\n    //   if (store.food.length === 0) {\r\n    //     filteredCart = cart.filter((filterStore) => {\r\n    //       return filterStore.mid !== store.mid;\r\n    //     });\r\n    //     console.log(filteredCart);\r\n    //     localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\r\n    //     let addedMerchants = []\r\n    //     filteredCart.forEach((cart) => {\r\n    //       addedMerchants.push(cart.mid)\r\n    //       Cookies.set(\"addedMerchants\", addedMerchants)\r\n    //     })\r\n    //     console.log(addedMerchants);\r\n    //     if (addedMerchants.length < 2) {\r\n    //       window.history.back()\r\n    //       // window.location.href = Cookies.get(\"lastProduct\")\r\n    //     } else {\r\n    //       console.log('ntaps bro');\r\n    //       window.location.reload()\r\n    //     }\r\n    //   } else {\r\n    //     console.log('ntaps mantaapp');\r\n    //   }\r\n    // });\r\n    this.forceUpdate();\r\n  }\r\n\r\n  handleOption = (data) => {\r\n    if (this.props.noTable.table !== \"\") {\r\n      if (data == 1) {\r\n        let newUrl = window.location.search\r\n        let changeTable = newUrl.slice(0, -1)\r\n        changeTable += 0\r\n        window.location.href = changeTable\r\n      } else {\r\n        let value = Cookies.get(\"lastProduct\")\r\n        console.log(value);\r\n        let getPrevTable = value.charAt(value.length - 1)\r\n        let newUrl = window.location.search\r\n        let changeTable = newUrl.slice(0, -1)\r\n        changeTable += getPrevTable\r\n        window.location.href = changeTable\r\n      }\r\n    }\r\n    if (this.state.currentModalTitle === \"Cara makan anda?\") {\r\n      if (data === 0 || this.props.noTable.table > 0) {\r\n        this.setState({ biz_type: \"DINE_IN\" })\r\n        this.setState({ eat_type: \"Makan di tempat\" })\r\n      } else {\r\n        this.setState({ biz_type: \"TAKE_AWAY\" })\r\n        this.setState({ eat_type: \"Bungkus / Takeaway\" })\r\n      }\r\n    } else if (this.state.currentModalTitle === \"Bayar pakai apa?\") {\r\n      if (data === 0) {\r\n        this.setState({ paymentType: \"PAY_BY_CASHIER\" })\r\n        this.setState({ paymentOption: \"Pembayaran di kasir\" })\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePayment = () => {\r\n    this.setState({ loadButton: false })\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      window.location.href = \"/login\"\r\n    }\r\n    let totalAmount = 0;\r\n    let data = cart;\r\n    data.forEach((store) => {\r\n      store.food.forEach((food) => {\r\n        totalAmount = totalAmount + food.foodPrice * food.foodAmount;\r\n      });\r\n    });\r\n\r\n    let merchantIds = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n    merchantIds = merchantIds.filter((merchant) => {\r\n      return merchant !== \"\"\r\n    })\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n\r\n    merchantIds.forEach((merchant) => {\r\n      var requestData = {\r\n        products: [{\r\n          product_id: \"\",\r\n          notes: \"\",\r\n          qty: 0\r\n        }],\r\n        payment_with: this.state.paymentType,\r\n        mid: merchant,\r\n        prices: totalAmount,\r\n        biz_type: this.state.biz_type,\r\n        table_no: \"1\"\r\n      }\r\n      requestData.products.pop()\r\n      cart.forEach((merchant) => {\r\n        let addedMerchants = Cookies.get(\"addedMerchants\")\r\n        if (addedMerchants.includes(merchant.mid)) {\r\n          merchant.food.forEach((data) => {\r\n            if (data.productId !== \"\") {\r\n              requestData.products.push({\r\n                product_id: data.productId,\r\n                notes: data.foodNote,\r\n                qty: data.foodAmount,\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n\r\n      Axios(address + \"/txn/v1/txn-post/\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-request-id\": uuid,\r\n          \"x-request-timestamp\": date,\r\n          \"x-client-id\": clientId,\r\n          \"x-signature\": signature,\r\n          \"token\": auth.token,\r\n        },\r\n        method: \"POST\",\r\n        data: requestData,\r\n      })\r\n        .then((res) => {\r\n          localStorage.removeItem(\"cart\")\r\n          alert(\"Pembelian telah berhasil.\")\r\n          window.location.href = \"/status\"\r\n        })\r\n        .catch((err) => {\r\n          if (err.response.data !== undefined) {\r\n            alert(err.response.data.err_message)\r\n            this.setState({ loadButton: true })\r\n          }\r\n        });\r\n    })\r\n  };\r\n\r\n  newListCheck = (food) => {\r\n    let newlistArr = ''\r\n    food.foodListCheckbox.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name},`\r\n      })\r\n    })\r\n    return <p>{newlistArr}</p>\r\n  }\r\n\r\n  newListRadio = (food) => {\r\n    let newlistArr = ''\r\n    food.foodListRadio.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name},`\r\n      })\r\n    })\r\n    return <p>{newlistArr}</p>\r\n  }\r\n\r\n  onEditCart = (ind, mid) => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === ind\r\n        })\r\n      }\r\n    });\r\n\r\n    var objFilteredCart = {\r\n      productId: filteredStore[0].productId,\r\n      foodName: filteredStore[0].foodName,\r\n      foodDesc: \"\",\r\n      foodCategory: filteredStore[0].foodCategory,\r\n      foodPrice: filteredStore[0].foodPrice,\r\n      foodImage: filteredStore[0].foodImage,\r\n      foodNote: filteredStore[0].foodNote,\r\n      foodListCheckbox: filteredStore[0].foodListCheckbox,\r\n      foodListRadio: filteredStore[0].foodListRadio,\r\n      foodExt: [\r\n        {\r\n          name: \"\",\r\n          amount: filteredStore[0].foodAmount,\r\n        },\r\n      ],\r\n    }\r\n\r\n    this.setState({ showMenuDet: true, filteredCart: filteredStore, currentData: objFilteredCart, indexEdit: ind, themid: mid })\r\n    this.props.EditMenuCart(true)\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleClick={this.handleSaveCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data\r\n  }\r\n\r\n  handleSaveCart = () => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === this.state.themid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === this.state.indexEdit\r\n        })\r\n\r\n        console.log(currentExt);\r\n\r\n        filteredStore[0].foodAmount = currentExt.detailCategory[0].amount\r\n        filteredStore[0].foodListCheckbox = currentExt.listcheckbox\r\n        filteredStore[0].foodListRadio = currentExt.listradio\r\n        filteredStore[0].foodNote = currentExt.note\r\n\r\n        console.log(filteredStore[0]);\r\n\r\n        store.food[this.state.indexEdit] = filteredStore[0]\r\n      }\r\n    });\r\n    localStorage.setItem('cart', JSON.stringify(allCart))\r\n    window.location.reload()\r\n  }\r\n\r\n  render() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      window.location.href = \"/login\"\r\n    }\r\n    let modal;\r\n    let paymentButton;\r\n    if (auth.isLoggedIn === false) {\r\n      paymentButton = (\r\n        <Link to={\"/login\"} className={\"iconButton\"}>\r\n          <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n          <img src={frontIcon} alt={\"checklist\"} />\r\n        </Link>\r\n      );\r\n    } else {\r\n      if (this.state.loadButton) {\r\n        paymentButton = (\r\n          <button className={\"iconButton\"} onClick={() => this.handlePayment()}>\r\n            <img src={checklistIcon} alt={\"checklist\"} /> Bayar{\" \"}\r\n            <img src={frontIcon} alt={\"checklist\"} />\r\n          </button>\r\n        );\r\n      } else {\r\n        paymentButton = (\r\n          <Loader loaded={this.state.loadButton} options={options} className=\"spinner\" />\r\n        )\r\n      }\r\n    }\r\n    if (this.state.showModal === true) {\r\n      modal = (\r\n        <CartModal\r\n          isShow={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n          title={this.state.currentModalTitle}\r\n          detailOptions={this.state.currentModal}\r\n          handleData={this.handleOption}\r\n          notable={this.props.noTable}\r\n        />\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n\r\n    let data = cart;\r\n    let totalAmount = 0;\r\n    data.forEach((store) => {\r\n      store.food.forEach((food) => {\r\n        totalAmount = totalAmount + food.foodPrice * food.foodAmount;\r\n      });\r\n    });\r\n    let storeList = data.filter((store) => {\r\n      if (store.mid !== \"\") {\r\n        return store;\r\n      }\r\n    });\r\n\r\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    let contentView = storeList.map((store) => {\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        let itemListView = data.map((cartData) => {\r\n          if (cartData.mid === store.mid) {\r\n            return store.food.map((food, index) => {\r\n              return (\r\n                <Row>\r\n                  <Col xs={0} md={3} />\r\n                  <Col xs={3} md={1}>\r\n                    <img\r\n                      src={food.foodImage}\r\n                      alt={\"food\"}\r\n                      className={\"cartFoodImage\"}\r\n                    />\r\n                  </Col>\r\n                  <Col>\r\n                    <Row>\r\n                      <Col>\r\n                        <p className={\"cartContentFood\"}>{food.foodName}</p>\r\n                        <p>List Check: {this.newListCheck(food)}</p>\r\n                        <p>List Option: {this.newListRadio(food)}</p>\r\n                        <p className={\"cartContentPrice\"}>Catatan:</p>\r\n                        <p className={\"cartContentPrice\"}>{food.foodNote}</p>\r\n                        <p className={\"cartContentPrice\"}>\r\n                          {Intl.NumberFormat(\"id-ID\", {\r\n                            style: \"currency\",\r\n                            currency: \"IDR\",\r\n                          }).format(food.foodPrice)}\r\n                        </p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  <Col>\r\n                    <Row>\r\n                      <Col>\r\n                        <button\r\n                          className={\"iconButton\"}\r\n                          onClick={() => this.handleDelete(food, index, store.mid)}\r\n                        >\r\n                          <img src={removeIcon} alt={\"remove icon\"} />\r\n                        </button>\r\n                        <button onClick={() => this.onEditCart(index, store.mid)}>EDIT</button>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <ButtonGroup className={\"cartModalButtonGroup\"}>\r\n                          <Button\r\n                            onClick={() => this.handleDecrease(food)}\r\n                            variant=\"cartModalMiniButton\"\r\n                          >\r\n                            -\r\n                        </Button>\r\n                          <Form.Control\r\n                            value={food.foodAmount}\r\n                            className=\"cartModalField\"\r\n                            disabled\r\n                          ></Form.Control>\r\n                          <Button\r\n                            onClick={() => this.handleIncrease(food)}\r\n                            variant=\"cartModalMiniButton\"\r\n                          >\r\n                            +\r\n                        </Button>\r\n                        </ButtonGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              )\r\n            })\r\n          }\r\n        });\r\n        return (\r\n          <>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>{store.storeName}</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col xs={1} md={1}>\r\n                <img src={storeIcon} className={\"cartIcon\"} alt={\"store icon\"} />\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartNote\"}>Store Location</p>\r\n                    <p className={\"cartTitle\"}>{store.storeDesc}</p>\r\n                    <p className={\"cartNote\"}>\r\n                      <b>{store.storeDistance}</b>\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col xs={2} md={3}>\r\n                <button className={\"iconButton\"}>\r\n                  <img\r\n                    src={chevronImage}\r\n                    onClick={() => this.handleDetail()}\r\n                    alt={\"chevron right\"}\r\n                  />\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n            {itemListView}\r\n          </>\r\n        );\r\n      }\r\n    });\r\n\r\n    let paymentImage;\r\n    let eatImage;\r\n    if (this.state.biz_type === \"DINE_IN\") {\r\n      eatImage = dineinIcon;\r\n    } else if (this.state.biz_type === \"TAKE_AWAY\") {\r\n      eatImage = takeawayIcon;\r\n    }\r\n    if (this.state.paymentType === \"PAY_BY_CASHIER\") {\r\n      paymentImage = cashierIcon\r\n    }\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col><p className={\"cartTitle\"}>Pilih cara makan anda</p></Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={1}>\r\n                <img src={eatImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>{this.state.eat_type}</Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"eat-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={0} md={3} />\r\n          <Col>\r\n            <Row>\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Bayar pakai apa?</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={1}>\r\n                <img src={paymentImage} class=\"cartModalImage\" alt=\"icon\" />\r\n              </Col>\r\n              <Col>\r\n                {this.state.paymentOption}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2} md={3}>\r\n            <button className={\"iconButton\"}>\r\n              <img\r\n                src={chevronImage}\r\n                onClick={() => this.handleDetail(\"pay-method\")}\r\n                alt={\"chevron right\"}\r\n              />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n        {contentView}\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Rincian Pembayaran</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={0} md={3} />\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Total harga barang:</p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>Diskon:</p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(totalAmount)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <p className={\"cartContent\"}>\r\n                      {Intl.NumberFormat(\"id-ID\", {\r\n                        style: \"currency\",\r\n                        currency: \"IDR\",\r\n                      }).format(0)}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className={\"cartPayment\"}>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartTitle\"}>Total Belanja Kamu</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={1} md={3} />\r\n              <Col>\r\n                <p className={\"cartFinalPrice\"}>\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(totalAmount)}\r\n                </p>\r\n              </Col>\r\n              <Col className={\"cartFinalButton\"}>{paymentButton}</Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        {modal}\r\n        {this.menuDetail()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { EditMenuCart })(CartView)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuDetail.js",["230","231","232","233"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuSelection.js",["234","235","236","237","238","239","240","241"],"import React, { useEffect, useState } from \"react\";\r\nimport '../../Asset/scss/MenuSelection.scss'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport Autosize from 'autosize'\r\nimport { ValidQty } from '../../Redux/Actions'\r\nimport { connect } from 'react-redux'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Axios from 'axios'\r\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nconst checkboxDummyData = [\r\n    { additionname: 'topping', maxchoice: 3, isMandat: true, listaddition: [{ name: 'coklat', price: 5000, isChecked: false }, { name: 'keju', price: 6000, isChecked: false }, { name: 'pisang', price: 7000, isChecked: false }, { name: 'wijen', price: 8000, isChecked: false }] },\r\n    { additionname: 'boba', maxchoice: 2, isMandat: false, listaddition: [{ name: 'rainbow', price: 1000, isChecked: false }, { name: 'jelly', price: 2000, isChecked: false }, { name: 'pudding', price: 3000, isChecked: false }, { name: 'pearl', price: 4000, isChecked: false }] },\r\n]\r\n\r\nconst radioDummyData = [\r\n    { additionname: 'level pedas', isMandat: true, listaddition: [{ name: 'tidak pedas', isChecked: false }, { name: 'pedas', isChecked: false }, { name: 'pedas mampus', isChecked: false }] },\r\n    { additionname: 'level dingin', isMandat: false, listaddition: [{ name: 'tidak dingin', isChecked: false }, { name: 'dingin', isChecked: false }, { name: 'dingin mampus', isChecked: false }] },\r\n]\r\n\r\nconst MenuSelection = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const [detailCategory, setdetailCategory] = useState([\r\n        {\r\n            name: \"\",\r\n            amount: 1,\r\n        },\r\n    ])\r\n    const [note, setnote] = useState('')\r\n    const [checkboxVal, setcheckboxVal] = useState([])\r\n    const [checkboxData, setcheckboxData] = useState([])\r\n    const [indexCheckMandat, setindexCheckMandat] = useState(null)\r\n\r\n    const [radioVal, setradioVal] = useState([])\r\n    const [radioData, setradioData] = useState([])\r\n\r\n    const [updateDataEdit, setupdateDataEdit] = useState(false)\r\n    const [updateEditChoice, setupdateEditChoice] = useState(false)\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    useEffect(() => {\r\n        Autosize(document.getElementById('note'))\r\n\r\n        //hit API in order to get response of product detail v2\r\n        let uuid = uuidV4()\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        Axios(`${address}/home/v2/detail/product/`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-request-id\": uuid,\r\n                \"x-request-timestamp\": date,\r\n                \"x-client-id\": clientId,\r\n                \"token\": \"PUBLIC\",\r\n                \"pid\": props.datas.productId,\r\n            },\r\n            method: 'GET'\r\n        }).then(productRes => {\r\n            let productDet = productRes.data.results.extra_menus.extra_menu\r\n            let radioResponse = []\r\n            let checkboxResponse = []\r\n            productDet.forEach(valProduct => {\r\n                if (valProduct.menu_type === 'RADIO') {\r\n                    radioResponse.push(valProduct)\r\n                } else {\r\n                    checkboxResponse.push(valProduct)\r\n                }\r\n            })\r\n\r\n            let radioData = []\r\n            let radioValData = []\r\n            radioResponse.forEach(valRadRes => {\r\n                let listadditionradio = []\r\n                valRadRes.menu_extra_item.forEach(valList => {\r\n                    listadditionradio.push({\r\n                        name: valList.item_name,\r\n                        price: valList.extra_fee,\r\n                        isChecked: false\r\n                    })\r\n                })\r\n                radioData.push({\r\n                    additionname: valRadRes.menu_name,\r\n                    isMandat: valRadRes.menu_extra_item[0].is_mandatory,\r\n                    listaddition: listadditionradio\r\n                })\r\n                radioValData.push([])\r\n            })\r\n\r\n            let checkboxData = []\r\n            let checkValData = []\r\n            checkboxResponse.forEach(valCheckRes => {\r\n                let listadditioncheckbox = []\r\n                valCheckRes.menu_extra_item.forEach(valList => {\r\n                    listadditioncheckbox.push({\r\n                        name: valList.item_name,\r\n                        price: valList.extra_fee,\r\n                        isChecked: false\r\n                    })\r\n                })\r\n                checkboxData.push({\r\n                    additionname: valCheckRes.menu_name,\r\n                    maxchoice: valCheckRes.menu_extra_item[0].max_choice,\r\n                    isMandat: valCheckRes.menu_extra_item[0].is_mandatory,\r\n                    listaddition: listadditioncheckbox\r\n                })\r\n                checkValData.push([])\r\n            })\r\n\r\n            //set mandatory for checkboxes\r\n            let mandatCheckAvailability = checkboxData.length\r\n            let mandatCheckLength = checkboxData.length\r\n            checkboxData.forEach(valCheck => {\r\n                if (valCheck.isMandat) {\r\n                    mandatCheckAvailability = checkboxData.length - 1\r\n                }\r\n            })\r\n            if (mandatCheckLength === mandatCheckAvailability) {\r\n                dispatch({ type: 'MANDATCHECKCOND', payload: false })\r\n            } else {\r\n                dispatch({ type: 'MANDATCHECKCOND', payload: true })\r\n            }\r\n\r\n            //set mandatory for radio\r\n            let mandatRadioAvailability = radioData.length\r\n            let mandatRadioLength = radioData.length\r\n            radioData.forEach(valCheck => {\r\n                if (valCheck.isMandat) {\r\n                    mandatRadioAvailability = radioData.length - 1\r\n                }\r\n            })\r\n            if (mandatRadioLength === mandatRadioAvailability) {\r\n                dispatch({ type: 'MANDATRADIOCOND', payload: false })\r\n            } else {\r\n                dispatch({ type: 'MANDATRADIOCOND', payload: true })\r\n            }\r\n\r\n            if (!AllRedu.openMenuCart) {\r\n                var datas = props.datas\r\n                var list = []\r\n                if (datas.foodExt !== undefined) {\r\n                    datas.foodExt.map((data) => {\r\n                        return list.push({\r\n                            name: data.name,\r\n                            amount: data.amount + 1,\r\n                        });\r\n                    });\r\n                    props.ValidQty(1)\r\n                    setdetailCategory(list);\r\n                    setradioData(radioData)\r\n                    setcheckboxData(checkboxData)\r\n                    setradioVal(radioValData)\r\n                    setcheckboxVal(checkValData)\r\n                }\r\n            } else {\r\n                let amountofProd = props.datas.foodExt\r\n                amountofProd.forEach((val) => {\r\n                    props.ValidQty(val.amount)\r\n                })\r\n                setdetailCategory(props.datas.foodExt)\r\n                setnote(props.datas.foodNote)\r\n                setradioData(radioData)\r\n                setcheckboxData(checkboxData)\r\n                setupdateDataEdit(true)\r\n                dispatch({ type: 'CHECKBOXES', payload: props.datas.foodListCheckbox })\r\n                dispatch({ type: 'RADIOBUTTON', payload: props.datas.foodListRadio })\r\n                setradioVal(props.datas.foodListRadio)\r\n                setcheckboxVal(props.datas.foodListCheckbox)\r\n            }\r\n        }).catch(err => console.log(err))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (AllRedu.openMenuCart && updateDataEdit) {\r\n            //this function is used for replace api data with edit data (CHECKBOX)\r\n            let editCheckbox = []\r\n            let newlistcheckboxAddition = []\r\n            let foodListCheckbox = props.datas.foodListCheckbox\r\n\r\n            checkboxData.forEach((firstVal, indfirstVal) => {\r\n                firstVal.listaddition.forEach(secondVal => {\r\n\r\n                    foodListCheckbox.forEach((foodfirstVal, indfoodFirst) => {\r\n                        let countNoMatch = 1\r\n                        foodfirstVal.forEach((foodsecondVal) => {\r\n                            if (indfirstVal === indfoodFirst) {\r\n                                if (secondVal.name === foodsecondVal.name) {\r\n                                    newlistcheckboxAddition.push({\r\n                                        name: secondVal.name,\r\n                                        price: secondVal.price,\r\n                                        isChecked: true\r\n                                    })\r\n                                } else {\r\n                                    if (countNoMatch === foodfirstVal.length) {\r\n                                        newlistcheckboxAddition.push({\r\n                                            name: secondVal.name,\r\n                                            price: secondVal.price,\r\n                                            isChecked: false\r\n                                        })\r\n                                        countNoMatch = 1\r\n                                    } else {\r\n                                        countNoMatch++\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    if (foodListCheckbox[indfirstVal].length === 0) {\r\n                        newlistcheckboxAddition.push({\r\n                            name: secondVal.name,\r\n                            price: secondVal.price,\r\n                            isChecked: false\r\n                        })\r\n                    }\r\n                })\r\n                editCheckbox.push({\r\n                    additionname: firstVal.additionname,\r\n                    maxchoice: firstVal.maxchoice,\r\n                    listaddition: newlistcheckboxAddition\r\n                })\r\n                newlistcheckboxAddition = []\r\n            })\r\n\r\n            //this function is used for replace api data with edit data (RADIO)\r\n            let editRadio = []\r\n            let newlistradioAddition = []\r\n            let foodListRadio = props.datas.foodListRadio\r\n\r\n            radioData.forEach((firstVal, indfirstVal) => {\r\n                firstVal.listaddition.forEach(secondVal => {\r\n\r\n                    foodListRadio.forEach((foodfirstVal, indfoodFirst) => {\r\n                        foodfirstVal.forEach((foodsecondVal) => {\r\n                            if (indfirstVal === indfoodFirst) {\r\n                                if (secondVal.name === foodsecondVal.name) {\r\n                                    newlistradioAddition.push({\r\n                                        name: secondVal.name,\r\n                                        price: secondVal.price,\r\n                                        isChecked: true\r\n                                    })\r\n                                } else {\r\n                                    newlistradioAddition.push({\r\n                                        name: secondVal.name,\r\n                                        price: secondVal.price,\r\n                                        isChecked: false\r\n                                    })\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    if (foodListRadio[indfirstVal].length === 0) {\r\n                        newlistradioAddition.push({\r\n                            name: secondVal.name,\r\n                            price: secondVal.price,\r\n                            isChecked: false\r\n                        })\r\n                    }\r\n                })\r\n                editRadio.push({\r\n                    additionname: firstVal.additionname,\r\n                    listaddition: newlistradioAddition\r\n                })\r\n                newlistradioAddition = []\r\n            })\r\n            setcheckboxData(editCheckbox)\r\n            setradioData(editRadio)\r\n            setupdateDataEdit(false)\r\n            setupdateEditChoice(true)\r\n        }\r\n    }, [radioVal, checkboxVal])\r\n\r\n    const checkboxArrData = () => {\r\n        return checkboxData.map((listname, indlistname) => {\r\n            return (\r\n                <div key={indlistname} className='checkbox-section'>\r\n                    <div className='title-section'>\r\n                        <div className='titleSelection'>Tambah {listname.additionname.toUpperCase().toLowerCase()}</div>\r\n                        <div className='optionSelection'>Optional, Max {listname.maxchoice} items {listname.isMandat ? '*wajib' : null}</div>\r\n                    </div>\r\n\r\n                    <div className='boxContainer'>\r\n                        {\r\n                            listname.listaddition.map((listadd, indlistadd) => {\r\n                                return (\r\n                                    AllRedu.openMenuCart ?\r\n                                        updateEditChoice ?\r\n                                            <div key={indlistadd} className='box-section'>\r\n                                                <input disabled={AllRedu.validQTY === 0} defaultChecked={listadd.isChecked} id={listadd.name} type='checkbox' name={`${listname.additionname}` + `${indlistadd}`} className={`${listname.additionname}`} value={listadd.name} onChange={(e) => onCheckboxChange(e, indlistname, listadd.price, `${listname.additionname}`, listname.maxchoice, listname.isMandat)} defaultChecked={listadd.isChecked} />\r\n                                                <label htmlFor={listadd.name}>\r\n                                                    <div className='checkBox-side'>\r\n                                                        <div className='check-box' />\r\n                                                        <div className='check-box-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                    </div>\r\n\r\n                                                    <div className='additon-amount'>\r\n                                                        +{listadd.price}\r\n                                                    </div>\r\n                                                </label>\r\n                                            </div>\r\n                                            :\r\n                                            null\r\n                                        :\r\n                                        <div key={indlistadd} className='box-section'>\r\n                                            <input disabled={AllRedu.validQTY === 0} defaultChecked={listadd.isChecked} id={listadd.name} type='checkbox' name={`${listname.additionname}` + `${indlistadd}`} className={`${listname.additionname}`} value={listadd.name} onChange={(e) => onCheckboxChange(e, indlistname, listadd.price, `${listname.additionname}`, listname.maxchoice, listname.isMandat)} defaultChecked={listadd.isChecked} />\r\n                                            <label htmlFor={listadd.name}>\r\n                                                <div className='checkBox-side'>\r\n                                                    <div className='check-box' />\r\n                                                    <div className='check-box-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                </div>\r\n\r\n                                                <div className='additon-amount'>\r\n                                                    +{listadd.price}\r\n                                                </div>\r\n                                            </label>\r\n                                        </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const radioArrData = () => {\r\n        return radioData.map((listname, indlistname) => {\r\n            return (\r\n                <div key={indlistname} className='radio-section'>\r\n                    <div className='title-section'>\r\n                        <div className='titleSelection'>{listname.additionname}</div>\r\n                        <div className='optionSelection'>Pilih Salah Satu {listname.isMandat ? '*wajib' : null}</div>\r\n                    </div>\r\n\r\n                    <div className='boxContainer'>\r\n                        {\r\n                            listname.listaddition.map((listadd, indlistadd) => {\r\n                                return (\r\n                                    AllRedu.openMenuCart ?\r\n                                        updateEditChoice ?\r\n                                            <div key={indlistadd} className='radiobox-section'>\r\n                                                <input disabled={AllRedu.validQTY === 0} onChange={(e) => onRadioChange(e, indlistname, listname.isMandat, listadd.price)} id={listadd.name} type='radio' name={listname.additionname} value={listadd.name} defaultChecked={listadd.isChecked} />\r\n                                                <label htmlFor={listadd.name}>\r\n                                                    <div className='radio-side'>\r\n                                                        <div className='radio-circle' />\r\n                                                        <div className='radio-circle-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                    </div>\r\n\r\n                                                    <div className='additon-amount'>\r\n                                                        +{listadd.price}\r\n                                                    </div>\r\n                                                </label>\r\n                                            </div>\r\n                                            :\r\n                                            null\r\n                                        :\r\n                                        <div key={indlistadd} className='radiobox-section'>\r\n                                            <input disabled={AllRedu.validQTY === 0} onChange={(e) => onRadioChange(e, indlistname, listname.isMandat, listadd.price)} id={listadd.name} type='radio' name={listname.additionname} value={listadd.name} defaultChecked={listadd.isChecked} />\r\n                                            <label htmlFor={listadd.name}>\r\n                                                <div className='radio-side'>\r\n                                                    <div className='radio-circle' />\r\n                                                    <div className='radio-circle-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                </div>\r\n\r\n                                                <div className='additon-amount'>\r\n                                                        +{listadd.price}\r\n                                                    </div>\r\n                                            </label>\r\n                                        </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onCheckboxChange = (e, indexlistname, listprice, name, max, mandat) => {\r\n        var checkedChecks = document.querySelectorAll(`.${name}:checked`)\r\n        if (checkedChecks.length > max) {\r\n            e.target.checked = false\r\n        } else {\r\n            if (mandat) {\r\n                dispatch({ type: 'MANDATCHECK', payload: mandat })\r\n                setindexCheckMandat(indexlistname)\r\n            }\r\n            let checkboxArr = [...checkboxVal]\r\n            if (e.target.checked) {\r\n                checkboxArr[indexlistname].push({ name: e.target.value, price: listprice, isChecked: true })\r\n                setcheckboxVal(checkboxArr)\r\n                dispatch({ type: 'CHECKBOXES', payload: checkboxArr })\r\n            } else {\r\n                checkboxArr[indexlistname] = checkboxArr[indexlistname].filter(val => val.name !== e.target.value)\r\n                setcheckboxVal(checkboxArr)\r\n                let sizeArr = 0\r\n                checkboxArr.forEach((firstVal) => {\r\n                    firstVal.forEach((nestedVal) => {\r\n                        if (nestedVal.name) {\r\n                            sizeArr += 1\r\n                        }\r\n                    })\r\n                })\r\n                if (sizeArr > 0) {\r\n                    dispatch({ type: 'CHECKBOXES', payload: checkboxArr })\r\n                    if (indexCheckMandat === indexlistname) {\r\n                        if (checkboxArr[indexCheckMandat].length === 0) {\r\n                            dispatch({ type: 'MANDATCHECK', payload: false })\r\n                        }\r\n                    }\r\n                } else {\r\n                    dispatch({ type: 'CHECKBOXES', payload: [] })\r\n                    dispatch({ type: 'MANDATCHECK', payload: false })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onRadioChange = (e, indexlistname, mandat, listprice) => {\r\n        if (mandat) {\r\n            dispatch({ type: 'MANDATRADIO', payload: mandat })\r\n        }\r\n        let radiobuttonArr = [...radioVal]\r\n        radiobuttonArr[indexlistname].pop()\r\n        radiobuttonArr[indexlistname].push({ name: e.target.value, price: listprice, isChecked: true })\r\n        setradioVal(radiobuttonArr)\r\n        dispatch({ type: 'RADIOBUTTON', payload: radiobuttonArr })\r\n    }\r\n\r\n    const handleDecrease = (e) => {\r\n        let updatedFoodlist = detailCategory.map((food) => {\r\n            if (food === e && food.amount > 1) {\r\n                food.amount = food.amount - 1;\r\n                props.ValidQty(food.amount)\r\n            }\r\n            return food;\r\n        })\r\n        setdetailCategory(updatedFoodlist)\r\n    }\r\n\r\n    const handleIncrease = (e) => {\r\n        let updatedFoodlist = detailCategory.map((food) => {\r\n            if (food === e) {\r\n                food.amount = food.amount + 1;\r\n                props.ValidQty(food.amount)\r\n            }\r\n            return food;\r\n        })\r\n        setdetailCategory(updatedFoodlist)\r\n    }\r\n\r\n    const handleAmount = () => {\r\n        return detailCategory.map((food, ind) => {\r\n            return (\r\n                <div key={ind} className='amount-box-inside'>\r\n                    <div className='minus-box' style={{ backgroundColor: AllRedu.validQTY > 1 ? '#4bb7ac' : '#767676' }} onClick={() => handleDecrease(food)}>\r\n                        <div className='minus-sym'>\r\n                            -\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='number-area'>\r\n                        {food.amount}\r\n                    </div>\r\n\r\n                    <div className='plus-box' onClick={() => handleIncrease(food)}>\r\n                        <div className='plus-sym'>\r\n                            +\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const handleNote = (e) => {\r\n        setnote(e.target.value)\r\n    }\r\n\r\n    var thedata = {\r\n        detailCategory: detailCategory,\r\n        note: note ? note : '',\r\n        foodCategory: AllRedu.openMenuCart ? props.datas.foodCategory : AllRedu.foodCateg,\r\n        listcheckbox: checkboxVal,\r\n        listradio: radioVal\r\n    }\r\n    props.handleData(thedata)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !isMobile ?\r\n                    <div className='menuSelection-layout'>\r\n                        <div className='checkbox-layout'>\r\n                            {checkboxArrData()}\r\n                        </div>\r\n\r\n                        <div className='radio-layout'>\r\n                            {radioArrData()}\r\n                        </div>\r\n\r\n                        <div className='amount-section'>\r\n                            <div className='titleSelection'>\r\n                                Jumlah\r\n                            </div>\r\n\r\n                            <div className='amount-box'>\r\n                                {handleAmount()}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='note-section'>\r\n                            <div className='titleSelection'>\r\n                                Catatan\r\n                            </div>\r\n\r\n                            <div className='note-box'>\r\n                                <textarea id=\"note\" placeholder={\"Tambahkan Catatanmu\"} defaultValue={props.datas.foodNote} className='note-area' onChange={handleNote} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className='menuSelection-layout'>\r\n                        <div className='checkbox-layout'>\r\n                            {checkboxArrData()}\r\n                        </div>\r\n\r\n                        <div className='radio-layout'>\r\n                            {radioArrData()}\r\n                        </div>\r\n\r\n                        <div className='amount-section'>\r\n                            <div className='titleSelection'>\r\n                                Jumlah\r\n                            </div>\r\n\r\n                            <div className='amount-box'>\r\n                                {handleAmount()}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='note-section'>\r\n                            <div className='titleSelection'>\r\n                                Catatan\r\n                            </div>\r\n\r\n                            <div className='note-box'>\r\n                                <textarea id=\"note\" placeholder={\"Tambahkan Catatanmu\"} defaultValue={props.datas.foodNote} className='note-area' onChange={handleNote} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(null, { ValidQty })(MenuSelection)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\CartModalDev.js",["242","243","244"],"import React, { useState } from 'react'\r\nimport closeNarrow from '../../Asset/Icon/closeNarrow.png'\r\nimport diningTableColor from '../../Asset/Icon/diningTableColor.png'\r\nimport takeawayColor from '../../Asset/Icon/takeawayColor.png'\r\nimport CashierPayment from '../../Asset/Icon/CashierPayment.png'\r\nimport OvoPayment from '../../Asset/Icon/ovo_icon.png'\r\nimport '../../Asset/scss/CartModal.scss'\r\n\r\nconst CartModal = (props) => {\r\n    const [radioNumEat, setradioNumEat] = useState(props.indexOptionEat)\r\n    const [radioNumPay, setradioNumPay] = useState(props.indexOptionPay)\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        props.onHide()\r\n    }\r\n\r\n    const onChangeRadio = (num, title) => {\r\n        if (title === 'Pilih Cara Makan Anda') {\r\n            setradioNumEat(num)\r\n            props.handleData(num)\r\n            props.onHide()\r\n        } else if(title === 'Bayar Pakai Apa') {\r\n            setradioNumPay(num)\r\n            props.handleData(num)\r\n            props.onHide()\r\n        }\r\n    }\r\n\r\n    const choicesCartModal = () => {\r\n        let optionList = props.detailOptions\r\n        let choicesModal = optionList.map((optionVal, keyOption) => {\r\n            let imageOption;\r\n            if (optionVal.image === \"dineIn\") {\r\n                imageOption = diningTableColor;\r\n            } else if (optionVal.image === \"takeaway\") {\r\n                imageOption = takeawayColor;\r\n            } else if (optionVal.image === \"cashier\") {\r\n                imageOption = CashierPayment;\r\n            } else if (optionVal.image === \"ovo\") {\r\n                imageOption = OvoPayment;\r\n            }\r\n\r\n            if (props.title === 'Pilih Cara Makan Anda') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailContent'>\r\n                        <div className='modalCart-radioSection'>\r\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'EATMETHOD'} defaultChecked={radioNumEat === keyOption ? true : false} />\r\n                            <label htmlFor={optionVal.image}>\r\n                                <div className='modalCart-radioSide'>\r\n                                    <img className='modalCartradio-image' src={imageOption} />\r\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (props.title === 'Bayar Pakai Apa') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailContent'>\r\n                        <div className='modalCart-radioSection'>\r\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'PAYMETHOD'} defaultChecked={radioNumPay === keyOption ? true : false} />\r\n                            <label htmlFor={optionVal.image}>\r\n                                <div className='modalCart-radioSide'>\r\n                                    <img className='modalCartradio-image' src={imageOption} />\r\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (props.title === 'Rincian Pembayaran') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailTotalPrice'>\r\n                        <div className='modalCart-totalPrice'>\r\n                            <h2 className='modalCart-totalPrice-left'>Total Harga Barang</h2>\r\n                            <h2 className='modalCart-totalPrice-right'>{optionVal.totalPrice}</h2>\r\n                        </div>\r\n\r\n                        <div className='modalCart-discount'>\r\n                            <h2 className='modalCart-discount-left'>Diskon</h2>\r\n                            <h2 className='modalCart-discount-right'>{optionVal.discountPrice}</h2>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n        return choicesModal\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='modalCartPage' style={{\r\n                display: props.isShow ? 'block' : 'none'\r\n            }} onClick={closeModal}>\r\n                <div className='modalCartContent' onClick={e => e.stopPropagation()}>\r\n                    <span className='iconCloseNarrow' onClick={closeModal}>\r\n                        <img src={closeNarrow} className='closeLogoNarrow' alt='' />\r\n                    </span>\r\n\r\n                    <div className='modalCart-detail'>\r\n                        <h1 className='modalCart-title'>{props.title}</h1>\r\n\r\n                        {choicesCartModal()}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartModal","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\LoginDialog.js",["245","246","247"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\RegisterDialog.js",["248","249","250","251","252","253","254","255","256","257","258"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\PinDialog.js",["259","260","261","262","263","264"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ConfirmPinDialog.js",["265","266","267","268","269","270"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ForgotPinDialog.js",["271","272","273","274","275"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AuthenticationReducers.js",["276"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ResetPinLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\ResetPin\\ResetPinView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ResetPinDialog.js",["277","278","279","280","281"],"import React, { useState } from \"react\";\r\nimport '../../../Asset/scss/AuthenticationDialog.scss';\r\nimport closeLogo from '../../../Asset/Icon/close.png';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PinInput from \"react-pin-input\";\r\nimport pikappLogo from '../../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Button/PikaButton\";\r\nimport ConfirmResetPinDialog from \"../ResetPin/ConfirmResetPinDialog\";\r\n\r\nconst ResetPinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [confirmResetPinDialog, setConfirmResetPin] = useState(false);\r\n    const [resetPin, setResetPin] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideResetPin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideResetPin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const handleResetPin = (e) => {\r\n        setResetPin(e);\r\n    }\r\n\r\n    const checkResetPin = () => {\r\n        if (resetPin.length < 6) {\r\n          setErrorMsg(\"PIN must be within 6 digit numeric.\");\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n    };\r\n\r\n    const openConfirmPinDialog = (e) => {\r\n        if (checkResetPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n\r\n        const data = {\r\n            // email : email,\r\n            // currentPin : resetPin\r\n        };\r\n\r\n        dispatch({ type: 'RESETPIN', payload: data });\r\n\r\n        setConfirmResetPin(true);\r\n    }\r\n\r\n    const showConfirmPinDialog = () => {\r\n        if(confirmResetPinDialog) {\r\n            return (\r\n                <ConfirmResetPinDialog \r\n                    isShowConfirmResetPin={confirmResetPinDialog}\r\n                    onHideConfirmResetPin={() =>setConfirmResetPin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                <div className='modalMenuDetail' style={{\r\n                    display: props.isShowResetPin ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout'>\r\n                            <div className='menuContain-left'>\r\n                                <div className='menuBanner'>\r\n                                    <img src={pikappLogo} className='menuimg' alt='' />\r\n                                </div>\r\n\r\n                                <div className='menu-detail'>\r\n                                    <div className='menu-name'>\r\n                                        Perbarui PIN Anda \r\n                                    </div>\r\n\r\n                                    <div className='mob-menu-category'>\r\n                                        Ketik 6 digit nomor PIN baru Anda\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        {\r\n                                            <Form>\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                        <PinInput\r\n                                                        className='pinInput'\r\n                                                        length={6}\r\n                                                        focus\r\n                                                        // disabled\r\n                                                        secret\r\n                                                        ref={p => (pin => p)}\r\n                                                        type=\"numeric\"\r\n                                                        onComplete={handleResetPin}\r\n                                                        />\r\n                                                        <div></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                    {isValid || (\r\n                                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                                    )}\r\n                                                    </Col>\r\n                                                    <Col />\r\n                                                </Row>\r\n                                                \r\n                                                <Row>\r\n                                                    <Col xs={5}>\r\n                                                    <p className=\"linkWords\">\r\n                                                        {/* <div onClick={closeModal}>KEMBALI</div> */}\r\n                                                    </p>\r\n                                                    </Col>\r\n                                                    <Col />\r\n\r\n                                                    <Col xs={4}>\r\n                                                    <PikaButton\r\n                                                        title=\"NEXT\"\r\n                                                        buttonStyle=\"greenPika\"\r\n                                                        handleClick={openConfirmPinDialog}\r\n                                                    />\r\n                                                    </Col>\r\n                                                    <Col />\r\n                                                </Row>\r\n                                            </Form>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {showConfirmPinDialog()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ConfirmResetPinDialog.js",["282","283","284","285"],"import React, { useState } from \"react\";\r\nimport '../../../Asset/scss/AuthenticationDialog.scss';\r\nimport closeLogo from '../../../Asset/Icon/close.png';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PinInput from \"react-pin-input\";\r\nimport pikappLogo from '../../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Button/PikaButton\";\r\n\r\nconst ConfirmResetPinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [confirmResetPin, setConfirmResetPin] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideConfirmResetPin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideConfirmResetPin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const handleConfirmResetPin = (e) => {\r\n        setConfirmResetPin(e);\r\n    }\r\n\r\n    const checkConfirmResetPin = () => {\r\n        if (AuthRedu.dataResetPin.currentPin === confirmResetPin) {\r\n            return true;\r\n          } else {\r\n            setErrorMsg(\"PIN does not match.\");\r\n            return false;\r\n          }\r\n    };\r\n\r\n    const handleResetPin = (e) => {\r\n        if (checkConfirmResetPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n        setIsValid(true);\r\n        dispatch({ type: 'LOADING' });\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                <div className='modalMenuDetail' style={{\r\n                    display: props.isShowConfirmResetPin ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout'>\r\n                            <div className='menuContain-left'>\r\n                                <div className='menuBanner'>\r\n                                    <img src={pikappLogo} className='menuimg' alt='' />\r\n                                </div>\r\n\r\n                                <div className='menu-detail'>\r\n                                    <div className='menu-name'>\r\n                                        Perbarui PIN Anda \r\n                                    </div>\r\n\r\n                                    <div className='mob-menu-category'>\r\n                                        Konfirmasi 6 digit nomor PIN baru Anda\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        {\r\n                                            <Form>\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                        <PinInput\r\n                                                        className='pinInput'\r\n                                                        length={6}\r\n                                                        focus\r\n                                                        // disabled\r\n                                                        secret\r\n                                                        ref={p => (pin => p)}\r\n                                                        type=\"numeric\"\r\n                                                        onComplete={handleConfirmResetPin}\r\n                                                        />\r\n                                                        <div></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                    {isValid || (\r\n                                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                                    )}\r\n                                                    </Col>\r\n                                                    <Col />\r\n                                                </Row>\r\n                                                \r\n                                                <Row>\r\n                                                    <Col xs={5}>\r\n                                                    <p className=\"linkWords\">\r\n                                                        <div onClick={closeModal}>KEMBALI</div>\r\n                                                    </p>\r\n                                                    </Col>\r\n                                                    <Col />\r\n\r\n                                                    <Col xs={4}>\r\n                                                    <PikaButton\r\n                                                        title=\"NEXT\"\r\n                                                        buttonStyle=\"greenPika\"\r\n                                                        handleClick={handleResetPin}\r\n                                                    />\r\n                                                    </Col>\r\n                                                    <Col />\r\n                                                </Row>\r\n                                            </Form>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmResetPinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\NotifModal.js",[],{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","severity":1,"message":"291","line":5,"column":5,"nodeType":"292","messageId":"293","endLine":5,"endColumn":15},{"ruleId":"290","severity":1,"message":"294","line":9,"column":5,"nodeType":"292","messageId":"293","endLine":9,"endColumn":17},{"ruleId":"290","severity":1,"message":"295","line":12,"column":5,"nodeType":"292","messageId":"293","endLine":12,"endColumn":18},{"ruleId":"296","severity":1,"message":"297","line":232,"column":18,"nodeType":"298","messageId":"299","endLine":232,"endColumn":20},{"ruleId":"296","severity":1,"message":"297","line":244,"column":16,"nodeType":"298","messageId":"299","endLine":244,"endColumn":18},{"ruleId":"290","severity":1,"message":"300","line":572,"column":15,"nodeType":"292","messageId":"293","endLine":572,"endColumn":19},{"ruleId":"301","severity":1,"message":"302","line":642,"column":41,"nodeType":"303","messageId":"304","endLine":642,"endColumn":43},{"ruleId":"301","severity":1,"message":"305","line":699,"column":51,"nodeType":"303","messageId":"304","endLine":699,"endColumn":53},{"ruleId":"301","severity":1,"message":"305","line":723,"column":48,"nodeType":"303","messageId":"304","endLine":723,"endColumn":50},{"ruleId":"301","severity":1,"message":"305","line":345,"column":49,"nodeType":"303","messageId":"304","endLine":345,"endColumn":51},{"ruleId":"301","severity":1,"message":"305","line":423,"column":38,"nodeType":"303","messageId":"304","endLine":423,"endColumn":40},{"ruleId":"301","severity":1,"message":"305","line":508,"column":38,"nodeType":"303","messageId":"304","endLine":508,"endColumn":40},{"ruleId":"301","severity":1,"message":"305","line":593,"column":38,"nodeType":"303","messageId":"304","endLine":593,"endColumn":40},{"ruleId":"290","severity":1,"message":"306","line":61,"column":9,"nodeType":"292","messageId":"293","endLine":61,"endColumn":18},{"ruleId":"290","severity":1,"message":"307","line":62,"column":9,"nodeType":"292","messageId":"293","endLine":62,"endColumn":17},{"ruleId":"286","replacedBy":"308"},{"ruleId":"288","replacedBy":"309"},{"ruleId":"286","replacedBy":"310"},{"ruleId":"288","replacedBy":"311"},{"ruleId":"312","severity":1,"message":"313","line":17,"column":1,"nodeType":"314","endLine":52,"endColumn":2},{"ruleId":"286","replacedBy":"315"},{"ruleId":"288","replacedBy":"316"},{"ruleId":"290","severity":1,"message":"317","line":14,"column":8,"nodeType":"292","messageId":"293","endLine":14,"endColumn":17},{"ruleId":"296","severity":1,"message":"297","line":144,"column":35,"nodeType":"298","messageId":"299","endLine":144,"endColumn":37},{"ruleId":"296","severity":1,"message":"297","line":173,"column":35,"nodeType":"298","messageId":"299","endLine":173,"endColumn":37},{"ruleId":"296","severity":1,"message":"297","line":231,"column":20,"nodeType":"298","messageId":"299","endLine":231,"endColumn":22},{"ruleId":"296","severity":1,"message":"297","line":245,"column":21,"nodeType":"298","messageId":"299","endLine":245,"endColumn":23},{"ruleId":"296","severity":1,"message":"297","line":664,"column":31,"nodeType":"298","messageId":"299","endLine":664,"endColumn":33},{"ruleId":"296","severity":1,"message":"297","line":216,"column":16,"nodeType":"298","messageId":"299","endLine":216,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":499,"column":41,"nodeType":"303","messageId":"304","endLine":499,"endColumn":43},{"ruleId":"301","severity":1,"message":"305","line":506,"column":45,"nodeType":"303","messageId":"304","endLine":506,"endColumn":47},{"ruleId":"301","severity":1,"message":"305","line":508,"column":48,"nodeType":"303","messageId":"304","endLine":508,"endColumn":50},{"ruleId":"318","severity":1,"message":"319","line":293,"column":85,"nodeType":"298","messageId":"320","endLine":293,"endColumn":86},{"ruleId":"318","severity":1,"message":"319","line":295,"column":85,"nodeType":"298","messageId":"320","endLine":295,"endColumn":86},{"ruleId":"318","severity":1,"message":"319","line":399,"column":81,"nodeType":"298","messageId":"320","endLine":399,"endColumn":82},{"ruleId":"318","severity":1,"message":"319","line":401,"column":81,"nodeType":"298","messageId":"320","endLine":401,"endColumn":82},{"ruleId":"290","severity":1,"message":"321","line":12,"column":7,"nodeType":"292","messageId":"293","endLine":12,"endColumn":24},{"ruleId":"290","severity":1,"message":"322","line":17,"column":7,"nodeType":"292","messageId":"293","endLine":17,"endColumn":21},{"ruleId":"323","severity":1,"message":"324","line":174,"column":8,"nodeType":"325","endLine":174,"endColumn":10,"suggestions":"326"},{"ruleId":"323","severity":1,"message":"327","line":275,"column":8,"nodeType":"325","endLine":275,"endColumn":31,"suggestions":"328"},{"ruleId":"318","severity":1,"message":"319","line":293,"column":192,"nodeType":"298","messageId":"320","endLine":293,"endColumn":193},{"ruleId":"329","severity":1,"message":"330","line":293,"column":404,"nodeType":"331","endLine":293,"endColumn":438},{"ruleId":"318","severity":1,"message":"319","line":309,"column":188,"nodeType":"298","messageId":"320","endLine":309,"endColumn":189},{"ruleId":"329","severity":1,"message":"330","line":309,"column":400,"nodeType":"331","endLine":309,"endColumn":434},{"ruleId":"301","severity":1,"message":"305","line":32,"column":66,"nodeType":"303","messageId":"304","endLine":32,"endColumn":68},{"ruleId":"332","severity":1,"message":"333","line":51,"column":37,"nodeType":"334","endLine":51,"endColumn":95},{"ruleId":"332","severity":1,"message":"333","line":65,"column":37,"nodeType":"334","endLine":65,"endColumn":95},{"ruleId":"290","severity":1,"message":"335","line":19,"column":12,"nodeType":"292","messageId":"293","endLine":19,"endColumn":21},{"ruleId":"290","severity":1,"message":"336","line":19,"column":23,"nodeType":"292","messageId":"293","endLine":19,"endColumn":35},{"ruleId":"290","severity":1,"message":"337","line":29,"column":11,"nodeType":"292","messageId":"293","endLine":29,"endColumn":20},{"ruleId":"290","severity":1,"message":"338","line":17,"column":12,"nodeType":"292","messageId":"293","endLine":17,"endColumn":26},{"ruleId":"290","severity":1,"message":"339","line":17,"column":28,"nodeType":"292","messageId":"293","endLine":17,"endColumn":39},{"ruleId":"290","severity":1,"message":"336","line":24,"column":23,"nodeType":"292","messageId":"293","endLine":24,"endColumn":35},{"ruleId":"290","severity":1,"message":"340","line":25,"column":12,"nodeType":"292","messageId":"293","endLine":25,"endColumn":26},{"ruleId":"290","severity":1,"message":"341","line":25,"column":28,"nodeType":"292","messageId":"293","endLine":25,"endColumn":45},{"ruleId":"290","severity":1,"message":"342","line":27,"column":12,"nodeType":"292","messageId":"293","endLine":27,"endColumn":15},{"ruleId":"290","severity":1,"message":"343","line":27,"column":17,"nodeType":"292","messageId":"293","endLine":27,"endColumn":23},{"ruleId":"290","severity":1,"message":"344","line":28,"column":12,"nodeType":"292","messageId":"293","endLine":28,"endColumn":15},{"ruleId":"290","severity":1,"message":"345","line":28,"column":17,"nodeType":"292","messageId":"293","endLine":28,"endColumn":23},{"ruleId":"290","severity":1,"message":"337","line":38,"column":11,"nodeType":"292","messageId":"293","endLine":38,"endColumn":20},{"ruleId":"290","severity":1,"message":"346","line":145,"column":11,"nodeType":"292","messageId":"293","endLine":145,"endColumn":25},{"ruleId":"290","severity":1,"message":"335","line":25,"column":12,"nodeType":"292","messageId":"293","endLine":25,"endColumn":21},{"ruleId":"290","severity":1,"message":"336","line":25,"column":23,"nodeType":"292","messageId":"293","endLine":25,"endColumn":35},{"ruleId":"290","severity":1,"message":"347","line":27,"column":12,"nodeType":"292","messageId":"293","endLine":27,"endColumn":23},{"ruleId":"290","severity":1,"message":"337","line":38,"column":11,"nodeType":"292","messageId":"293","endLine":38,"endColumn":20},{"ruleId":"290","severity":1,"message":"307","line":117,"column":17,"nodeType":"292","messageId":"293","endLine":117,"endColumn":25},{"ruleId":"290","severity":1,"message":"306","line":118,"column":17,"nodeType":"292","messageId":"293","endLine":118,"endColumn":26},{"ruleId":"290","severity":1,"message":"335","line":23,"column":12,"nodeType":"292","messageId":"293","endLine":23,"endColumn":21},{"ruleId":"290","severity":1,"message":"336","line":23,"column":23,"nodeType":"292","messageId":"293","endLine":23,"endColumn":35},{"ruleId":"290","severity":1,"message":"337","line":35,"column":11,"nodeType":"292","messageId":"293","endLine":35,"endColumn":20},{"ruleId":"290","severity":1,"message":"348","line":47,"column":11,"nodeType":"292","messageId":"293","endLine":47,"endColumn":26},{"ruleId":"290","severity":1,"message":"307","line":164,"column":17,"nodeType":"292","messageId":"293","endLine":164,"endColumn":25},{"ruleId":"290","severity":1,"message":"306","line":165,"column":17,"nodeType":"292","messageId":"293","endLine":165,"endColumn":26},{"ruleId":"290","severity":1,"message":"349","line":15,"column":21,"nodeType":"292","messageId":"293","endLine":15,"endColumn":31},{"ruleId":"290","severity":1,"message":"335","line":17,"column":12,"nodeType":"292","messageId":"293","endLine":17,"endColumn":21},{"ruleId":"290","severity":1,"message":"336","line":17,"column":23,"nodeType":"292","messageId":"293","endLine":17,"endColumn":35},{"ruleId":"290","severity":1,"message":"337","line":27,"column":11,"nodeType":"292","messageId":"293","endLine":27,"endColumn":20},{"ruleId":"290","severity":1,"message":"350","line":43,"column":11,"nodeType":"292","messageId":"293","endLine":43,"endColumn":21},{"ruleId":"312","severity":1,"message":"313","line":9,"column":1,"nodeType":"314","endLine":24,"endColumn":2},{"ruleId":"290","severity":1,"message":"351","line":15,"column":11,"nodeType":"292","messageId":"293","endLine":15,"endColumn":19},{"ruleId":"290","severity":1,"message":"335","line":19,"column":12,"nodeType":"292","messageId":"293","endLine":19,"endColumn":21},{"ruleId":"290","severity":1,"message":"336","line":19,"column":23,"nodeType":"292","messageId":"293","endLine":19,"endColumn":35},{"ruleId":"290","severity":1,"message":"352","line":22,"column":11,"nodeType":"292","messageId":"293","endLine":22,"endColumn":19},{"ruleId":"290","severity":1,"message":"337","line":30,"column":11,"nodeType":"292","messageId":"293","endLine":30,"endColumn":20},{"ruleId":"290","severity":1,"message":"335","line":17,"column":12,"nodeType":"292","messageId":"293","endLine":17,"endColumn":21},{"ruleId":"290","severity":1,"message":"336","line":17,"column":23,"nodeType":"292","messageId":"293","endLine":17,"endColumn":35},{"ruleId":"290","severity":1,"message":"352","line":20,"column":11,"nodeType":"292","messageId":"293","endLine":20,"endColumn":19},{"ruleId":"290","severity":1,"message":"337","line":28,"column":11,"nodeType":"292","messageId":"293","endLine":28,"endColumn":20},"no-native-reassign",["353"],"no-negated-in-lhs",["354"],"no-unused-vars","'secretProd' is assigned a value but never used.","Identifier","unusedVar","'clientIdProd' is assigned a value but never used.","'googleKeyProd' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'data' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'longitude' is assigned a value but never used.","'latitude' is assigned a value but never used.",["353"],["354"],["353"],["354"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["353"],["354"],"'Storeimg2' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'checkboxDummyData' is assigned a value but never used.","'radioDummyData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["355"],"React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'checkboxData', 'props.datas.foodListCheckbox', 'props.datas.foodListRadio', 'radioData', and 'updateDataEdit'. Either include them or remove the dependency array.",["356"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isCaptcha' is assigned a value but never used.","'setIsCaptcha' is assigned a value but never used.","'backModal' is assigned a value but never used.","'registerDialog' is assigned a value but never used.","'setRegister' is assigned a value but never used.","'captchaCounter' is assigned a value but never used.","'setCaptchaCounter' is assigned a value but never used.","'lat' is assigned a value but never used.","'setLat' is assigned a value but never used.","'lon' is assigned a value but never used.","'setLon' is assigned a value but never used.","'handleRegister' is assigned a value but never used.","'isLoginStep' is assigned a value but never used.","'openLoginDialog' is assigned a value but never used.","'setIsValid' is assigned a value but never used.","'checkEmail' is assigned a value but never used.","'AuthRedu' is assigned a value but never used.","'isMobile' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},"Update the dependencies array to be: [AllRedu.openMenuCart, dispatch, props]",{"range":"361","text":"362"},"Update the dependencies array to be: [radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, radioData]",{"range":"363","text":"364"},[7679,7681],"[AllRedu.openMenuCart, dispatch, props]",[12261,12284],"[radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, radioData]"]