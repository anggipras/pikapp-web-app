<<<<<<< HEAD
[{"/home/devweb/pikapp-web/src/index.js":"1","/home/devweb/pikapp-web/src/Redux/Store.js":"2","/home/devweb/pikapp-web/src/App.js":"3","/home/devweb/pikapp-web/src/firebase.js":"4","/home/devweb/pikapp-web/src/Master/ProductLayout.js":"5","/home/devweb/pikapp-web/src/Master/AuthLayout.js":"6","/home/devweb/pikapp-web/src/Master/CartLayout.js":"7","/home/devweb/pikapp-web/src/Master/ProfileLayout.js":"8","/home/devweb/pikapp-web/src/Master/StoreLayout.js":"9","/home/devweb/pikapp-web/src/Master/StatusLayout.js":"10","/home/devweb/pikapp-web/src/View/ResetPin/ResetPinView.js":"11","/home/devweb/pikapp-web/src/Master/MerchantQR.js":"12","/home/devweb/pikapp-web/src/Master/FoodCourtQR.js":"13","/home/devweb/pikapp-web/src/Redux/Reducers/index.js":"14","/home/devweb/pikapp-web/src/Master/MainNavigation.js":"15","/home/devweb/pikapp-web/src/Master/DetailNavigation.js":"16","/home/devweb/pikapp-web/src/View/Main/JumbotronView.js":"17","/home/devweb/pikapp-web/src/Asset/Constant/ColorConstant.js":"18","/home/devweb/pikapp-web/src/View/Profile/ProfileView.js":"19","/home/devweb/pikapp-web/src/View/Store/StoreView.js":"20","/home/devweb/pikapp-web/src/View/Auth/FormView.js":"21","/home/devweb/pikapp-web/src/View/Cart/CartView.js":"22","/home/devweb/pikapp-web/src/Component/Authentication/ResetPin/ResetPinDialog.js":"23","/home/devweb/pikapp-web/src/View/Product/ProductView.js":"24","/home/devweb/pikapp-web/src/View/Status/StatusView.js":"25","/home/devweb/pikapp-web/src/Redux/Reducers/AllReducers.js":"26","/home/devweb/pikapp-web/src/Redux/Reducers/AuthenticationReducers.js":"27","/home/devweb/pikapp-web/src/Asset/Constant/APIConstant.js":"28","/home/devweb/pikapp-web/src/Component/Button/PikaButton.js":"29","/home/devweb/pikapp-web/src/Component/Modal/NotifModal.js":"30","/home/devweb/pikapp-web/src/Component/Tour/TourPage.js":"31","/home/devweb/pikapp-web/src/Component/TextField/PikaTextField.js":"32","/home/devweb/pikapp-web/src/Component/Authentication/RegisterDialog.js":"33","/home/devweb/pikapp-web/src/Component/Authentication/ResetPin/ConfirmResetPinDialog.js":"34","/home/devweb/pikapp-web/src/Redux/Actions/index.js":"35","/home/devweb/pikapp-web/src/Component/Authentication/ForgotPinDialog.js":"36","/home/devweb/pikapp-web/src/Component/Authentication/LoginDialog.js":"37","/home/devweb/pikapp-web/src/Component/Authentication/ConfirmPinDialog.js":"38","/home/devweb/pikapp-web/src/Component/Authentication/PinDialog.js":"39","/home/devweb/pikapp-web/src/Redux/Actions/ButtonAction.js":"40","/home/devweb/pikapp-web/src/Component/Modal/CartModal.js":"41","/home/devweb/pikapp-web/src/Component/Menu/MenuDetail.js":"42","/home/devweb/pikapp-web/src/Component/Menu/MenuSelection.js":"43"},{"size":438,"mtime":1619584344602,"results":"44","hashOfConfig":"45"},{"size":163,"mtime":1619584344585,"results":"46","hashOfConfig":"45"},{"size":2736,"mtime":1621507752723,"results":"47","hashOfConfig":"45"},{"size":1376,"mtime":1621339982838,"results":"48","hashOfConfig":"45"},{"size":261,"mtime":1619584344578,"results":"49","hashOfConfig":"45"},{"size":2364,"mtime":1619584344574,"results":"50","hashOfConfig":"45"},{"size":512,"mtime":1619584344575,"results":"51","hashOfConfig":"45"},{"size":628,"mtime":1619584344578,"results":"52","hashOfConfig":"45"},{"size":1206,"mtime":1619696297515,"results":"53","hashOfConfig":"45"},{"size":835,"mtime":1609376991495,"results":"54","hashOfConfig":"45"},{"size":1791,"mtime":1619584344591,"results":"55","hashOfConfig":"45"},{"size":1681,"mtime":1621507752689,"results":"56","hashOfConfig":"45"},{"size":650,"mtime":1621507752688,"results":"57","hashOfConfig":"45"},{"size":239,"mtime":1619584344584,"results":"58","hashOfConfig":"45"},{"size":1888,"mtime":1619611729622,"results":"59","hashOfConfig":"45"},{"size":829,"mtime":1619584344576,"results":"60","hashOfConfig":"45"},{"size":805,"mtime":1609376991508,"results":"61","hashOfConfig":"45"},{"size":79,"mtime":1608958740830,"results":"62","hashOfConfig":"45"},{"size":8517,"mtime":1621507752709,"results":"63","hashOfConfig":"45"},{"size":15505,"mtime":1621510545221,"results":"64","hashOfConfig":"45"},{"size":13235,"mtime":1621322783135,"results":"65","hashOfConfig":"45"},{"size":33807,"mtime":1621507752695,"results":"66","hashOfConfig":"45"},{"size":11073,"mtime":1619584344566,"results":"67","hashOfConfig":"45"},{"size":41296,"mtime":1621507752705,"results":"68","hashOfConfig":"45"},{"size":25909,"mtime":1621322783145,"results":"69","hashOfConfig":"45"},{"size":1749,"mtime":1621507752691,"results":"70","hashOfConfig":"45"},{"size":902,"mtime":1621507752692,"results":"71","hashOfConfig":"45"},{"size":769,"mtime":1613964414594,"results":"72","hashOfConfig":"45"},{"size":946,"mtime":1619584344567,"results":"73","hashOfConfig":"45"},{"size":833,"mtime":1619584344572,"results":"74","hashOfConfig":"45"},{"size":1300,"mtime":1621507752686,"results":"75","hashOfConfig":"45"},{"size":623,"mtime":1619584344573,"results":"76","hashOfConfig":"45"},{"size":10911,"mtime":1619584344563,"results":"77","hashOfConfig":"45"},{"size":17791,"mtime":1621322783128,"results":"78","hashOfConfig":"45"},{"size":30,"mtime":1619584344581,"results":"79","hashOfConfig":"45"},{"size":8643,"mtime":1621322783124,"results":"80","hashOfConfig":"45"},{"size":6255,"mtime":1619584344562,"results":"81","hashOfConfig":"45"},{"size":12408,"mtime":1621322783124,"results":"82","hashOfConfig":"45"},{"size":15291,"mtime":1621322783125,"results":"83","hashOfConfig":"45"},{"size":825,"mtime":1619584344581,"results":"84","hashOfConfig":"45"},{"size":5035,"mtime":1619584344571,"results":"85","hashOfConfig":"45"},{"size":21311,"mtime":1621507752684,"results":"86","hashOfConfig":"45"},{"size":32161,"mtime":1621322783131,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"kitlcg",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"90"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"90"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"90"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},"/home/devweb/pikapp-web/src/index.js",[],["196","197"],"/home/devweb/pikapp-web/src/Redux/Store.js",[],"/home/devweb/pikapp-web/src/App.js",["198","199","200"],"import React, { useEffect, useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport \"./Asset/scss/App.scss\";\nimport AuthLayout from \"./Master/AuthLayout\";\nimport ProductLayout from \"./Master/ProductLayout\";\nimport CartLayout from \"./Master/CartLayout\";\nimport StatusLayout from \"./Master/StatusLayout\";\nimport StoreLayout from \"./Master/StoreLayout\";\nimport ProfileLayout from \"./Master/ProfileLayout\";\nimport MerchantResto from \"./Master/MerchantQR\";\nimport FoodCourt from \"./Master/FoodCourtQR\";\nimport ResetPin from \"./View/ResetPin/ResetPinView\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Cookies from \"js-cookie\"\nimport { getToken } from './firebase'\n\nexport var cart = [\n    {\n        mid: \"\",\n        storeName: \"\",\n        storeDesc: \"\",\n        storeDistance: \"\",\n        food: [\n            {\n                productId: \"\",\n                foodName: \"\",\n                foodPrice: 0,\n                foodAmount: 0,\n                foodImage: \"\",\n                foodNote: \"\",\n            },\n        ],\n    },\n];\n\nif (localStorage.getItem(\"cart\")) {\n    cart = JSON.parse(localStorage.getItem(\"cart\"));\n} else {\n    localStorage.setItem('cart', JSON.stringify(cart))\n}\n\nif (!localStorage.getItem(\"storeTour\")) {\n    localStorage.setItem('storeTour', 1);\n    localStorage.setItem('productTour', 1);\n    localStorage.setItem('cartTour', 1);\n    localStorage.setItem('merchantFlow', 1);\n}\n\nfunction App() {\n    // const [isTokenFound, setTokenFound] = useState(false)\n    // getToken(setTokenFound)\n\n    if (Cookies.get(\"auth\") === undefined) {\n        let deleteCart = JSON.parse(localStorage.getItem(\"cart\"))\n        let newCart = []\n        newCart.push(deleteCart[0])\n        localStorage.setItem('cart', JSON.stringify(newCart))\n    }\n\n    return (\n        <Switch>\n            <Route path=\"/login\" component={() => <AuthLayout isLogin={true} />} />\n            <Route\n                path=\"/register\"\n                component={() => <AuthLayout isLogin={false} />}\n            />\n            <Route path=\"/cart\" component={() => <CartLayout />} />\n            <Route path=\"/status\" component={() => <StatusLayout />} />\n            <Route path=\"/store\" component={() => <ProductLayout />} />\n            <Route exact path=\"/merchant/:mid/:notab\" component={MerchantResto} />\n            <Route exact path=\"/merchant/list/:address/:notab\" component={FoodCourt} />\n            <Route path=\"/profile\" component={() => <ProfileLayout />} />\n            <Route path=\"/reset-pin/:pintoken\" component={ResetPin} />\n            <Route path=\"/\" component={() => <StoreLayout />} />\n        </Switch>\n    )\n}\n\nexport default App","/home/devweb/pikapp-web/src/firebase.js",[],"/home/devweb/pikapp-web/src/Master/ProductLayout.js",[],"/home/devweb/pikapp-web/src/Master/AuthLayout.js",[],"/home/devweb/pikapp-web/src/Master/CartLayout.js",[],"/home/devweb/pikapp-web/src/Master/ProfileLayout.js",[],"/home/devweb/pikapp-web/src/Master/StoreLayout.js",[],"/home/devweb/pikapp-web/src/Master/StatusLayout.js",[],"/home/devweb/pikapp-web/src/View/ResetPin/ResetPinView.js",["201","202","203"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from 'react-redux'\nimport \"../../Asset/scss/AuthenticationLayout.scss\";\nimport ResetPinDialog from '../../Component/Authentication/ResetPin/ResetPinDialog';\nimport { useParams } from \"react-router-dom\";\n\nconst ResetPin = (props) => {\n    const dispatch = useDispatch();\n    const pintoken = props.match.params.pintoken;\n    const [showResetDialog, setShowResetDialog] = useState(true);\n\n    console.log(pintoken);\n    // const setMenuDetail = () => {\n        // setShowResetDialog(true);\n    // }\n\n    const resetPin = () => {\n        dispatch({ type: 'PINTOKEN', payload: pintoken });\n        if (showResetDialog) {\n            return (\n            <ResetPinDialog\n                isShowResetPin={showResetDialog}\n                onHideResetPin={() => setShowResetDialog(true)}\n            />\n            );\n        }\n    }\n\n    return (\n        <div>\n            {resetPin()}\n        </div>\n    )\n\n}\n\nexport default ResetPin\n// class ResetPinView extends React.Component {\n\n//     state = {\n//         showResetDialog : true\n//     }\n\n//     setMenuDetail(isShow) {\n//         this.setState({ showResetDialog: isShow })\n//         document.body.style.overflowY = ''\n//     }\n\n//     resetPin = () => {\n//         if (this.state.showResetDialog === true) {\n//           return (\n//             <ResetPinDialog\n//                 isShowResetPin={this.state.showResetDialog}\n//                 onHideResetPin={() => this.setMenuDetail(true)}\n//             />\n//           );\n//         }\n//     }\n\n//     render() { \n//         return (\n//             <>\n//             {this.resetPin()}\n//             </>\n//         );\n//     }\n// }\n// export default connect(null, {LoadingButton, DoneLoad })(ResetPinView)","/home/devweb/pikapp-web/src/Master/MerchantQR.js",["204","205"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from 'react-redux';\n\nconst MerchantResto = (props) => {\n  const merchantID = props.match.params.mid\n  const [longlat, setlonglat] = useState({});\n  let history = useHistory();\n  const dispatch = useDispatch();\n  // const _isMounted = useRef(true)\n\n  useEffect(() => {\n    // if (navigator.geolocation) { //SHUTDOWN FOR A WHILE\n    //   navigator.geolocation.getCurrentPosition(showPosition)\n    // } else {\n    //   alert('Geolocation is not supported by this browser.')\n    // }\n    // return () => {\n    //   _isMounted.current = false\n    // }\n\n    let latitude = -6.28862\n    let longitude = 106.71789\n    let longlat = { lat: latitude, lon: longitude }\n    console.log(latitude, longitude);\n    localStorage.setItem(\"longlat\", JSON.stringify(longlat))\n    if (!props.match.params.address) {\n      setlonglat({ lat: latitude, lon: longitude })\n    }\n    dispatch({ type: 'ISMERCHANTQR', payload: true });\n  }, []);\n\n  // const showPosition = (position) => { //SHUTDOWN FOR A WHILE\n  //   let latitude = position.coords.latitude\n  //   let longitude = position.coords.longitude\n  //   let longlat = { lat: latitude, lon: longitude }\n  //   console.log(latitude, longitude);\n  //   localStorage.setItem(\"longlat\", JSON.stringify(longlat))\n  //   if (!props.match.params.address) {\n  //     setlonglat({ lat: latitude, lon: longitude })\n  //   }\n  // }\n\n  if (longlat.lat) {\n    history.push(\n      \"/store?mid=\" +\n      merchantID +\n      \"&table=\" +\n      props.match.params.notab\n    );\n  }\n\n  return <div></div>;\n};\n\nexport default MerchantResto\n","/home/devweb/pikapp-web/src/Master/FoodCourtQR.js",["206"],"import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Cookies from 'js-cookie'\nimport { useDispatch } from 'react-redux';\n\nconst FoodCourt = (props) => {\n    let history = useHistory();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        let fcadd = props.match.params.address\n        fcadd = fcadd.replace(/_/g, \" \")\n        localStorage.setItem('fctable', props.match.params.notab)\n        Cookies.set(\"fcaddress\", fcadd, { expires: 1 })\n        dispatch({ type: 'ISMERCHANTQR', payload: false });\n        history.push(\"/\");\n    }, []);\n\n    return <div></div>;\n};\n\nexport default FoodCourt\n","/home/devweb/pikapp-web/src/Redux/Reducers/index.js",[],"/home/devweb/pikapp-web/src/Master/MainNavigation.js",[],"/home/devweb/pikapp-web/src/Master/DetailNavigation.js",[],"/home/devweb/pikapp-web/src/View/Main/JumbotronView.js",[],"/home/devweb/pikapp-web/src/Asset/Constant/ColorConstant.js",[],"/home/devweb/pikapp-web/src/View/Profile/ProfileView.js",[],"/home/devweb/pikapp-web/src/View/Store/StoreView.js",["207","208"],"/home/devweb/pikapp-web/src/View/Auth/FormView.js",[],"/home/devweb/pikapp-web/src/View/Cart/CartView.js",["209","210","211","212","213","214","215"],"import React from \"react\";\nimport ArrowDownColor from \"../../Asset/Icon/ArrowDownColor.png\";\nimport ArrowRightWhite from \"../../Asset/Icon/ArrowRightWhite.png\";\nimport diningTableColor from \"../../Asset/Icon/diningTableColor.png\";\nimport takeawayColor from \"../../Asset/Icon/takeawayColor.png\";\nimport CashierPayment from \"../../Asset/Icon/CashierPayment.png\";\nimport OvoPayment from \"../../Asset/Icon/ovo_icon.png\";\nimport checklistLogo from \"../../Asset/Icon/checklist.png\";\nimport ArrowBack from \"../../Asset/Icon/arrow-left.png\";\nimport CartModal from \"../../Component/Modal/CartModal\";\nimport { cart } from \"../../App\";\nimport { address, secret, clientId } from \"../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport sha256 from \"crypto-js/hmac-sha256\";\nimport Axios from \"axios\";\nimport Cookies from \"js-cookie\"\nimport MenuDetail from '../../Component/Menu/MenuDetail'\nimport NotifModal from '../../Component/Modal/NotifModal'\nimport { connect } from \"react-redux\";\nimport { EditMenuCart } from '../../Redux/Actions'\nimport Loader from 'react-loader-spinner'\nimport { Redirect } from \"react-router-dom\";\nimport { LoadingButton, DoneLoad } from '../../Redux/Actions'\nimport Swal from 'sweetalert2';\nimport TourPage from '../../Component/Tour/TourPage';\n\nvar currentExt = {\n  detailCategory: [\n    {\n      name: \"\",\n      amount: 0,\n    },\n  ],\n  note: \"\",\n  foodCategory: '',\n  listcheckbox: [],\n  listradio: []\n};\n\nvar currentTotal = 0\n\nvar finalProduct = [\n  {\n    totalPrice: 20000,\n    discountPrice: 0,\n  },\n]\n\nclass CartView extends React.Component {\n  state = {\n    changeUI: true,\n    showModal: false,\n    currentModalTitle: \"\",\n    paymentOption: \"Pembayaran Di Kasir\",\n    paymentType: \"PAY_BY_CASHIER\",\n    biz_type: this.props.noTable !== undefined ? this.props.noTable > 0 ? \"DINE_IN\" : \"TAKE_AWAY\" : \"DINE_IN\",\n    eat_type: this.props.noTable !== undefined ? this.props.noTable > 0 ? \"Makan Di Tempat\" : \"Bungkus / Takeaway\" : \"Makan Di Tempat\",\n    indexOptionEat: this.props.noTable !== undefined ? this.props.noTable > 0 ? 0 : 1 : 0,\n    indexOptionPay: 0,\n    currentModal: [\n      {\n        image: \"\",\n        option: \"\",\n      },\n    ],\n    loadButton: false,\n    showMenuDet: false,\n    filteredCart: [],\n    currentData: {},\n    themid: '',\n    indexEdit: 0,\n    updateData: '',\n    successMessage: '',\n    isEmailVerified : false,\n    isShowCounterTime : false,\n    countHit : 0,\n    counterTime : 120,\n    startTour : false,\n    steptour:[\n      {\n        selector: '.cart-foodService',\n        content : () => (\n          <div>\n            <h4>Mau makan dimana?</h4>\n            <br />\n            <span>Kamu bisa ubah pilihan makan kamu antara Makan di Tempat atau Takeaway</span>\n          </div>\n        ),\n      },\n      {\n        selector: '.cart-paymentService',\n        content : () => (\n          <div>\n            <h4>Bayar pakai apa?</h4>\n            <br />\n            <span>Kami menyediakan 2 tipe pembayaran, secara OVO ataupun bayar di kasir</span>\n          </div>\n        )\n      },\n      {\n        selector: '.cart-OrderButton',\n        content : () => (\n          <div>\n            <h4>Sudah siap makan?</h4>\n            <br />\n            <span>Silakan tekan tombol Order untuk melakukan pembayaran (psstt, untuk pembayaran di kasir, jangan lupa ke kasir ya!)</span>\n          </div>\n        )\n      },\n      {\n        selector: '.cart-OrderButton-mob',\n        content : () => (\n          <div>\n            <h4>Sudah siap makan?</h4>\n            <br />\n            <span>Silakan tekan tombol Order untuk melakukan pembayaran (psstt, untuk pembayaran di kasir, jangan lupa ke kasir ya!)</span>\n          </div>\n        )\n      }\n    ]\n  };\n\n  componentDidMount() {\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n      is_email_verified: true\n    };\n\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n\n    if(window.innerWidth < 700) {\n      this.state.steptour.splice(2,1);\n    } else {\n      this.state.steptour.pop();\n    }\n\n    if (localStorage.getItem(\"cartTour\") == 1) {\n      this.setState({ startTour : true});\n    } else if (localStorage.getItem('merchantFlow') == 1) {\n      this.setState({ startTour : true});\n    }\n\n    this.setState({ isEmailVerified: auth.is_email_verified });\n\n    if (this.state.isEmailVerified === false) {\n      this.handleReloadEmail();\n    }\n\n  }\n\n  componentDidUpdate() {\n    if(this.state.counterTime === 0) {\n      clearInterval(this.interval);\n      console.log(\"clear\");\n    }\n  }\n\n  handleDetail(data) {\n    if (data === \"eat-method\") {\n      this.setState({ showModal: true });\n      this.setState({ currentModalTitle: \"Pilih Cara Makan Anda\" });\n      this.setState({\n        currentModal: [\n          {\n            image: \"dineIn\",\n            option: \"Makan Di Tempat\",\n          },\n          {\n            image: \"takeaway\",\n            option: \"Takeaway / Bungkus\",\n          },\n        ],\n      });\n    } else if (data === \"pay-method\") {\n      this.setState({ showModal: true });\n      this.setState({ currentModalTitle: \"Bayar Pakai Apa\" });\n      this.setState({\n        currentModal: [\n          {\n            image: \"cashier\",\n            option: \"Pembayaran Di Kasir\",\n          },\n          {\n            image: \"ovo\",\n            option: \"Pembayaran Ovo\",\n          },\n        ],\n      });\n    } else if (data === \"payment-detail\") {\n      this.setState({ showModal: true });\n      this.setState({ currentModalTitle: \"Rincian Pembayaran\" });\n      this.setState({\n        currentModal: finalProduct\n      });\n    }\n  }\n\n  setModal(isShow) {\n    this.setState({ showModal: isShow });\n  }\n\n  handleDecrease(e, ind, mid) {\n    let allCart = JSON.parse(localStorage.getItem('cart'))\n    if (e.foodAmount > 1) {\n      let filteredStore = []\n      allCart.forEach((store) => {\n        if (store.mid === mid) {\n          filteredStore = store.food.filter((data, index) => {\n            return index === ind\n          })\n\n          let { foodAmount, foodTotalPrice } = filteredStore[0]\n\n          let countAmount = foodTotalPrice - (foodTotalPrice / foodAmount)\n\n          filteredStore[0].foodTotalPrice = countAmount\n          filteredStore[0].foodAmount = foodAmount - 1\n          store.food[ind] = filteredStore[0]\n        }\n      });\n\n      localStorage.setItem('cart', JSON.stringify(allCart))\n      this.setState({ updateData: 'updated' })\n    } else {\n      let filteredCart;\n      let addedMerchants = []\n      let newAllCart = []\n      allCart.forEach((store) => {\n        if (store.mid === mid) {\n          let filteredStore = store.food.filter((data, index) => {\n            return index !== ind\n          })\n\n          if (filteredStore.length === 0) {\n            filteredCart = cart.filter((filterStore) => {\n              return filterStore.mid !== store.mid;\n            });\n            localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\n            filteredCart.forEach((cart) => {\n              addedMerchants.push(cart.mid)\n              Cookies.set(\"addedMerchants\", addedMerchants)\n            })\n          } else {\n            let newFilter = store.food\n            newFilter = []\n            filteredStore.forEach((val) => {\n              newFilter.push(val)\n            })\n            store.food = newFilter\n            newAllCart.push(store)\n          }\n        } else {\n          newAllCart.push(store)\n        }\n      });\n\n      if (newAllCart.length < 2) {\n        cart.splice(1)\n        localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\n        window.history.back()\n      } else {\n        let filterMerchantCart = newAllCart.filter(valueCart => {\n          return valueCart.mid === mid\n        })\n        localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\n        if (filterMerchantCart.length) {\n          this.setState({ updateData: 'updated' })\n        } else {\n          window.history.back()\n        }\n      }\n    }\n  }\n\n  handleIncrease(e, ind, mid) {\n    let filteredStore = []\n    let allCart = JSON.parse(localStorage.getItem('cart'))\n    allCart.forEach((store) => {\n      if (store.mid === mid) {\n        filteredStore = store.food.filter((data, index) => {\n          return index === ind\n        })\n\n        let { foodAmount, foodTotalPrice } = filteredStore[0]\n\n        let countAmount = foodTotalPrice + (foodTotalPrice / foodAmount)\n\n        filteredStore[0].foodTotalPrice = countAmount\n        filteredStore[0].foodAmount = foodAmount + 1\n        store.food[ind] = filteredStore[0]\n      }\n    });\n\n    localStorage.setItem('cart', JSON.stringify(allCart))\n    this.setState({ updateData: 'updated' })\n  }\n\n  handleOption = (data) => {\n    let valueTab\n    if (this.props.noTable !== undefined) {\n      if (this.state.currentModalTitle === \"Pilih Cara Makan Anda\") {\n        if (data == 1) {\n          valueTab = 0\n          valueTab.toString()\n          localStorage.setItem('table', valueTab)\n        } else {\n          valueTab = localStorage.getItem('lastTable')\n          valueTab.toString()\n          localStorage.setItem('table', valueTab)\n        }\n      }\n    }\n    if (this.state.currentModalTitle === \"Pilih Cara Makan Anda\") {\n      if (data == 0) {\n        this.setState({ biz_type: \"DINE_IN\", eat_type: \"Makan Di Tempat\", indexOptionEat: 0 })\n      } else {\n        this.setState({ biz_type: \"TAKE_AWAY\", eat_type: \"Bungkus / Takeaway\", indexOptionEat: data })\n      }\n    } else if (this.state.currentModalTitle === \"Bayar Pakai Apa\") {\n      if (data === 0) {\n        this.setState({ paymentType: \"PAY_BY_CASHIER\", paymentOption: \"Pembayaran Di Kasir\", indexOptionPay: 0 })\n      } else {\n        this.setState({ paymentType: \"WALLET_OVO\", paymentOption: \"Pembayaran Ovo\", indexOptionPay: data })\n      }\n    }\n  }\n\n  handlePayment = () => {\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n    if (auth.isLogged === false) {\n      window.history.back()\n    }\n    this.props.LoadingButton()\n\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\n    let storageData = JSON.parse(localStorage.getItem('cart'))\n    let noTab = this.props.noTable ? this.props.noTable : 0\n    let allMenu = storageData.filter(filterCart => {\n      return filterCart.mid === currentCartMerchant.mid\n    })\n    let selectedProd = []\n\n    allMenu[0].food.forEach(selectMenu => {\n      let newlistArr = ''\n      let extraprice = 0\n      selectMenu.foodListCheckbox.forEach((val) => {\n        val.forEach((val2) => {\n          newlistArr += `${val2.name}, `\n          extraprice += val2.price\n        })\n      })\n\n      selectMenu.foodListRadio.forEach((val) => {\n        val.forEach((val2) => {\n          newlistArr += `${val2.name}, `\n          extraprice += val2.price\n        })\n      })\n\n      newlistArr += selectMenu.foodNote\n      extraprice = extraprice.toString()\n\n      selectedProd.push({\n        product_id: selectMenu.productId,\n        notes: newlistArr,\n        qty: selectMenu.foodAmount,\n        extra_price: extraprice\n      })\n    })\n\n    var requestData = {\n      products: selectedProd,\n      payment_with: this.state.paymentType,\n      mid: currentCartMerchant.mid,\n      prices: finalProduct[0].totalPrice.toString(),\n      biz_type: this.state.biz_type,\n      table_no: noTab.toString()\n    }\n\n    // console.log(requestData);\n\n    let uuid = uuidV4();\n    uuid = uuid.replace(/-/g, \"\");\n    const date = new Date().toISOString();\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\n\n    Axios(address + \"/txn/v2/txn-post/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId,\n        \"x-signature\": signature,\n        \"token\": auth.token,\n      },\n      method: \"POST\",\n      data: requestData,\n    })\n      .then((res) => {\n        if (this.state.paymentType === 'PAY_BY_CASHIER') {\n          this.setState({ successMessage: 'Silahkan Bayar ke Kasir/Penjual' })\n          setTimeout(() => {\n            let filterOtherCart = storageData.filter(valFilter => {\n              return valFilter.mid !== currentCartMerchant.mid\n            })\n            localStorage.setItem(\"cart\", JSON.stringify(filterOtherCart))\n            localStorage.removeItem(\"table\")\n            localStorage.removeItem(\"lastTable\")\n            localStorage.removeItem(\"fctable\")\n            this.setState({ loadButton: true })\n            this.props.DoneLoad()\n          }, 1000);\n        } else {\n          this.setState({ successMessage: 'Silahkan Bayar melalui OVO' })\n          setTimeout(() => {\n            let filterOtherCart = storageData.filter(valFilter => {\n              return valFilter.mid !== currentCartMerchant.mid\n            })\n            localStorage.setItem(\"cart\", JSON.stringify(filterOtherCart))\n            localStorage.removeItem(\"table\")\n            localStorage.removeItem(\"lastTable\")\n            localStorage.removeItem(\"fctable\")\n            this.setState({ loadButton: true })\n            this.props.DoneLoad()\n          }, 1000);\n        }\n      })\n      .catch((err) => {\n        if (err.response.data !== undefined) {\n          alert(err.response.data.err_message)\n          this.props.DoneLoad()\n        }\n      });\n  };\n\n  notifModal = () => {\n    if (this.props.AllRedu.buttonLoad === false) {\n      return <NotifModal isShowNotif={this.props.AllRedu.buttonLoad} responseMessage={this.state.successMessage} />\n    }\n  }\n\n  newListAllChoices = (food) => {\n    let newlistArr = ''\n    food.foodListCheckbox.forEach((val) => {\n      val.forEach((val2) => {\n        return newlistArr += `${val2.name}, `\n      })\n    })\n\n    food.foodListRadio.forEach((val) => {\n      val.forEach((val2) => {\n        return newlistArr += `${val2.name}, `\n      })\n    })\n    return <h5 className='cartList-content-choice'>{newlistArr}</h5>\n  }\n\n  onEditCart = (ind, mid) => {\n    let filteredStore = []\n    let allCart = JSON.parse(localStorage.getItem('cart'))\n    allCart.forEach((store) => {\n      if (store.mid === mid) {\n        filteredStore = store.food.filter((data, index) => {\n          return index === ind\n        })\n      }\n    });\n\n    var objFilteredCart = {\n      productId: filteredStore[0].productId,\n      foodName: filteredStore[0].foodName,\n      foodDesc: \"\",\n      foodCategory: filteredStore[0].foodCategory,\n      foodPrice: filteredStore[0].foodPrice,\n      foodImage: filteredStore[0].foodImage,\n      foodNote: filteredStore[0].foodNote,\n      foodListCheckbox: filteredStore[0].foodListCheckbox,\n      foodListRadio: filteredStore[0].foodListRadio,\n      foodTotalPrice: filteredStore[0].foodTotalPrice,\n      foodExt: [\n        {\n          name: \"\",\n          amount: filteredStore[0].foodAmount,\n        },\n      ],\n    }\n\n    this.setState({ showMenuDet: true, filteredCart: filteredStore, currentData: objFilteredCart, indexEdit: ind, themid: mid })\n    this.props.EditMenuCart(true)\n    document.body.style.overflowY = 'hidden'\n  }\n\n  setMenuDetail(isShow) {\n    this.setState({ showMenuDet: isShow })\n    document.body.style.overflowY = ''\n  }\n\n  handleCartAmount = (price) => {\n    currentTotal = price\n  }\n\n  menuDetail = () => {\n    if (this.state.showMenuDet === true) {\n      return (\n        <MenuDetail\n          isShow={this.state.showMenuDet}\n          onHide={() => this.setMenuDetail(false)}\n          datas={this.state.currentData}\n          handleAmount={this.handleCartAmount}\n          handleClick={this.handleSaveCart}\n          handleData={this.handleCart}\n        />\n      );\n    }\n  }\n\n  handleCart = (data) => {\n    currentExt = data\n  }\n\n  handleSaveCart = () => {\n    let filteredStore = []\n    let allCart = JSON.parse(localStorage.getItem('cart'))\n    let getProductId\n    allCart.forEach((store) => {\n      if (store.mid === this.state.themid) {\n        filteredStore = store.food.filter((data, index) => {\n          return index === this.state.indexEdit\n        })\n\n        getProductId = filteredStore[0].productId\n\n        filteredStore[0].foodAmount = currentExt.detailCategory[0].amount\n        filteredStore[0].foodListCheckbox = currentExt.listcheckbox\n        filteredStore[0].foodListRadio = currentExt.listradio\n        filteredStore[0].foodNote = currentExt.note\n        filteredStore[0].foodTotalPrice = currentTotal\n\n        store.food[this.state.indexEdit] = filteredStore[0]\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(allCart))\n    this.setState({ updateData: 'updated' })\n\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n\n    let newNotes = ''\n    currentExt.listcheckbox.forEach(val => {\n      val.forEach(val2 => {\n        return newNotes += `${val2.name}, `\n      })\n    })\n\n    currentExt.listradio.forEach(val => {\n      val.forEach(val2 => {\n        return newNotes += `${val2.name}, `\n      })\n    })\n\n    if (currentExt.note) {\n      newNotes += currentExt.note\n    }\n\n    console.log(newNotes);\n\n    let uuid = uuidV4();\n    const date = new Date().toISOString();\n    uuid = uuid.replace(/-/g, \"\");\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\n    Axios(address + \"txn/v1/cart-post/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId,\n        \"x-signature\": signature,\n        \"token\": auth.token,\n      },\n      method: \"POST\",\n      data: {\n        mid: this.state.themid,\n        pid: getProductId,\n        notes: newNotes,\n        qty: currentExt.detailCategory[0].amount,\n      }\n    })\n      .then(() => {\n        console.log('savetocart succeed');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleReloadEmail = () => {\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n      is_email_verified: true\n    };\n\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n\n    if (auth.is_email_verified === false) {\n      console.log(auth)\n      let uuid = uuidV4();\n      uuid = uuid.replace(/-/g, \"\");\n      const date = new Date().toISOString();\n      let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\n      Axios(address + \"home/v2/customer-info\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-request-id\": uuid,\n          \"x-request-timestamp\": date,\n          \"x-client-id\": clientId,\n          \"x-signature\": signature,\n          \"token\": auth.token,\n        },\n        method: \"GET\",\n      })\n        .then((res) => {\n          let data = res.data.results\n          auth.is_email_verified = data.is_email_verified;\n          Cookies.set(\"auth\", auth, { expires: 1 });\n          this.setState({ isEmailVerified: auth.is_email_verified });\n        })\n        .catch((err) => {\n        });\n    }\n  }\n\n  handleResendEmail = () => {\n    this.setState({ countHit: this.state.countHit + 1 });\n\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n      is_email_verified : true\n    };\n\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n\n    let uuid = uuidV4();\n    uuid = uuid.replace(/-/g, \"\");\n    const date = new Date().toISOString();\n    Axios(address + \"auth/resend-email/\" + auth.email + \"/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId\n      },\n      method: \"GET\",\n    })\n      .then((res) => {\n        Swal.fire({\n            position: 'top',\n            icon: 'success',\n            title: 'Email telah terkirim. Silahkan periksa email Anda.',\n            showConfirmButton: true,\n            confirmButtonColor: \"#4bb7ac\",\n            confirmButtonText: \"OK\",\n            closeOnConfirm: false,\n            // timer: 3000\n        }).then(() => {\n            if(this.state.countHit > 1) {\n              this.setState({ counterTime : 300});\n            } else {\n              this.setState({ counterTime : 120});\n            }\n            \n            this.setState({ isShowCounterTime : true });\n            this.countDownTime();\n        })\n      })\n      .catch((err) => {\n      });\n\n  }\n\n  countDownTime = () => {\n    this.interval = setInterval(\n      () => this.setState((state)=> ({ counterTime: this.state.counterTime - 1 })),\n      1000\n    );\n  }\n\n  tourPage = () => {\n    if (this.state.startTour === true) {\n      return (\n        <TourPage \n          stepsContent={this.state.steptour}\n          isShowTour={this.state.startTour}\n          isHideTour={() =>this.showTourPage(false)}\n        />\n      )\n    }\n  }\n\n  showTourPage = (isShowTour) => {\n    this.setState({ startTour: isShowTour });\n    document.body.style.overflowY = 'auto';\n    localStorage.setItem('cartTour', 0);\n    if(this.props.AuthRedu.isMerchantQR === true) {\n      localStorage.setItem('merchantFlow', 0);\n    }\n  }\n\n  render() {\n    if (this.state.loadButton) {\n      return <Redirect to='/status' />\n    }\n\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\n    let allCart = JSON.parse(localStorage.getItem('cart'))\n    let filterCart = allCart.filter(valCart => {\n      return valCart.mid === currentCartMerchant.mid\n    })\n    if (filterCart.length === 0) {\n      window.history.go(-1)\n    } else {\n      if (this.state.changeUI) {\n        this.setState({ changeUI: false })\n      }\n    }\n\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n      is_email_verified: true\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n    if (auth.isLogged === false) {\n      var lastLink = { value: window.location.href }\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\n      // window.location.href = \"/login\"\n    }\n\n    let modal;\n    if (this.state.showModal === true) {\n      modal = (\n        <CartModal\n          isShow={this.state.showModal}\n          onHide={() => this.setModal(false)}\n          title={this.state.currentModalTitle}\n          detailOptions={this.state.currentModal}\n          handleData={this.handleOption}\n          indexOptionEat={this.state.indexOptionEat}\n          indexOptionPay={this.state.indexOptionPay}\n        />\n      );\n    } else {\n      modal = <></>\n    }\n\n    let storageData = JSON.parse(localStorage.getItem('cart'))\n    let data = storageData;\n    let storeList = data.filter((store) => {\n      if (store.mid !== \"\") {\n        return store;\n      }\n    });\n\n    let contentView = storeList.map((store) => {\n      let storeFood\n      if (store.mid === currentCartMerchant.mid) {\n        storeFood = store.food.map((food, index) => {\n          return (\n            <div key={index} className='cartList-content'>\n              <div className='cartList-content-frame'>\n                <img className='cartList-content-image' src={food.foodImage} alt='' />\n              </div>\n\n              <div className='cartList-content-detail'>\n                <div className='cartList-content-detail-left'>\n                  <h2 className='cartList-content-title'>{food.foodName}</h2>\n                  {this.newListAllChoices(food)}\n                  <h5 className='cartList-content-notes'>{food.foodNote}</h5>\n                  <h3 className='cartList-content-price'>{Intl.NumberFormat(\"id-ID\").format(food.foodTotalPrice)}</h3>\n                </div>\n\n                <div className='cartList-content-detail-right'>\n                  <div className='cartList-editButton' onClick={() => this.onEditCart(index, store.mid)}>\n                    <div className='cartList-editWord'>EDIT</div>\n                  </div>\n\n                  <div className='cartList-amountBox'>\n                    <div className='cartList-amountBox-inside'>\n                      <div className='cartList-minusBox' onClick={() => this.handleDecrease(food, index, store.mid)}>\n                        <div className='cartList-minusSym'>\n                          -\n                        </div>\n                      </div>\n\n                      <div className='cartList-numberArea'>\n                        {food.foodAmount}\n                      </div>\n\n                      <div className='cartList-plusBox' onClick={() => this.handleIncrease(food, index, store.mid)}>\n                        <div className='cartList-plusSym'>\n                          +\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })\n      }\n      return storeFood\n    });\n\n    let detailView = storeList.map((store, index) => {\n      if (store.mid === currentCartMerchant.mid) {\n        return (\n          <div key={index} className='cart-storeBox'>\n            <div className='cart-storeBox-header'>\n              <div className='cart-storeBox-title'>\n                {store.storeName}\n              </div>\n\n              <div className='cart-storeBox-distance'>\n                {store.storeDistance}\n              </div>\n            </div>\n\n            <div className='cart-storeBox-content'>\n              <h4 className='cart-storeBox-descArea'>\n                {store.storeDesc}\n              </h4>\n            </div>\n          </div>\n        )\n      }\n    });\n\n    let totalPaymentShow = 0\n    let selectedMerch = storeList.map(store => {\n      if (store.mid === currentCartMerchant.mid) {\n        return store\n      }\n    });\n\n    selectedMerch[0].food.forEach(thefood => {\n      totalPaymentShow += thefood.foodTotalPrice\n    })\n\n    finalProduct = [\n      {\n        totalPrice: totalPaymentShow,\n        discountPrice: 0,\n      },\n    ]\n\n    let paymentImage;\n    let eatImage;\n    if (this.state.biz_type === \"DINE_IN\") {\n      eatImage = diningTableColor;\n    } else if (this.state.biz_type === \"TAKE_AWAY\") {\n      eatImage = takeawayColor;\n    }\n    if (this.state.paymentType === \"PAY_BY_CASHIER\") {\n      paymentImage = CashierPayment\n    } else if (this.state.paymentType === \"WALLET_OVO\") {\n      paymentImage = OvoPayment\n    }\n\n    if (this.state.changeUI) {\n      return (\n        <div style={{ display: 'flex', position: 'absolute', height: '100%', width: '100%', justifyContent: 'center', alignItems: 'center' }}>\n          <Loader\n            type=\"TailSpin\"\n            color=\"#4bb7ac\"\n            height={100}\n            width={100}\n          />\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <div className='cartLayout'>\n          {\n          !this.state.isEmailVerified ?\n          <div className='verificationMsg'>\n            <div className='message'>Verifikasi Email Anda</div>\n            <div className='messageSend'>\n              <span>Email Verifikasi Telah Dirim ke Alamat Email Teregistrasi: <span className=\"txtBold\"> {auth.email} </span> </span>. Belum Masuk ? \n              { this.state.counterTime !== 0 && this.state.countHit > 0 ? <span className=\"txtIndent\" disabled={true}>Kirim Ulang</span> : <span className=\"txtUnderline\" onClick={() => this.handleResendEmail()}>Kirim Ulang</span> }\n              { this.state.isShowCounterTime ? <span className=\"txtIndent\"> {this.state.counterTime} sec </span> : <span> </span>}\n            </div>\n          </div>\n          :\n          <div></div>\n          }\n          <div className='cartTitle'>\n            <span className='logopikappCenter' onClick={() => window.history.back()} >\n              <img className='LogoPikappCart' src={ArrowBack} alt='' />\n            </span>\n\n            <h2 className='confirmationOrder'>Konfirmasi Pesanan Anda</h2>\n          </div>\n\n          <div className='cartContent'>\n            <div className='cart-LeftSide'>\n              <div className='cartList'>\n                <div className='cartList-header'>\n                  <h4 className='cartList-title'>\n                    Item Yang Dibeli\n                  </h4>\n                </div>\n\n                {contentView}\n              </div>\n            </div>\n\n            <div className='cart-RightSide'>\n              <div className='flex-RightSide'>\n                {detailView}\n\n                <div className='cart-foodService' onClick={() => this.handleDetail(\"eat-method\")}>\n                  <div className='cart-foodService-header'>\n                    <div className='cart-foodService-title'>\n                      Pilih Cara Makan Anda\n                    </div>\n\n                    <div className='cart-foodService-selectButton' >\n                      <img className='cart-foodService-selectIcon' src={ArrowDownColor} alt='' />\n                    </div>\n                  </div>\n\n                  <div className='cart-foodService-content'>\n                    <div className='cart-foodService-descArea'>\n                      <span>\n                        <img className='cart-foodService-logo' src={eatImage} alt='' />\n                      </span>\n\n                      <h3 className='cart-foodService-words'>\n                        {this.state.eat_type}\n                      </h3>\n                    </div>\n                  </div>\n                </div>\n\n                <div className='cart-paymentService' onClick={() => this.handleDetail(\"pay-method\")}>\n                  <div className='cart-paymentService-header'>\n                    <div className='cart-paymentService-title'>\n                      Bayar Pakai Apa?\n                    </div>\n\n                    <div className='cart-paymentService-selectButton'>\n                      <img className='cart-paymentService-selectIcon' src={ArrowDownColor} alt='' />\n                    </div>\n                  </div>\n\n                  <div className='cart-paymentService-content'>\n                    <div className='cart-paymentService-descArea'>\n                      <span>\n                        <img className='cart-paymentService-logo' src={paymentImage} alt='' />\n                      </span>\n\n                      <h3 className='cart-paymentService-words'>\n                        {this.state.paymentOption}\n                      </h3>\n                    </div>\n                  </div>\n                </div>\n\n                <div className='cart-checkoutArea'>\n                  <div className='cart-TotalAmount' onClick={() => this.handleDetail(\"payment-detail\")}>\n                    <h3 className='cart-TotalAmount-title'>Total Bayar</h3>\n\n                    <div className='cart-TotalAmount-bottom'>\n                      <h2 className='cart-TotalAmount-price'>Rp. {Intl.NumberFormat(\"id-ID\").format(totalPaymentShow)}</h2>\n\n                      <img className='cart-TotalAmount-detailArrow' src={ArrowDownColor} alt='' />\n                    </div>\n                  </div>\n\n                  <div className='cart-OrderButton buttonorder' onClick={() => this.handlePayment()}>\n                    <div className='cart-OrderButton-content'>\n                      <span className='cart-OrderButton-Frame'>\n                        <img className='cart-OrderButton-checklist' src={checklistLogo} alt='' />\n                      </span>\n\n                      <h1 className='cart-OrderButton-word'>PESAN</h1>\n                    </div>\n\n                    <span>\n                      <img className='cart-OrderButton-orderArrow' src={ArrowRightWhite} alt='' />\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </div>\n\n        <div className='cartLayout-mob'>\n          <div className='cart-checkoutArea-mob'>\n\n            <div className='cart-TotalAmount-mob' onClick={() => this.handleDetail(\"payment-detail\")}>\n              <h3 className='cart-TotalAmount-title-mob'>Total Bayar</h3>\n\n              <div className='cart-TotalAmount-bottom-mob'>\n                <h2 className='cart-TotalAmount-price-mob'>Rp. {Intl.NumberFormat(\"id-ID\").format(totalPaymentShow)}</h2>\n\n                <span className='cart-TotalAmount-detailArrowCenter-mob'>\n                  <img className='cart-TotalAmount-detailArrow-mob' src={ArrowDownColor} alt='' />\n                </span>\n              </div>\n            </div>\n\n            <div className='cart-OrderButton-mob buttonorder' onClick={() => this.handlePayment()}>\n              <div className='cart-OrderButton-content-mob'>\n                <span className='cart-OrderButton-Frame-mob'>\n                  <img className='cart-OrderButton-checklist-mob' src={checklistLogo} alt='' />\n                </span>\n\n                <h1 className='cart-OrderButton-word-mob'>PESAN</h1>\n              </div>\n\n              <span className='cart-OrderButton-orderArrowCenter-mob'>\n                <img className='cart-OrderButton-orderArrow-mob' src={ArrowRightWhite} alt='' />\n              </span>\n            </div>\n          </div>\n        </div>\n        {modal}\n        {this.menuDetail()}\n        {this.notifModal()}\n        {this.tourPage()}\n      </>\n    );\n  }\n}\n\nconst Mapstatetoprops = (state) => {\n  return {\n    AllRedu: state.AllRedu,\n    AuthRedu: state.AuthRedu\n  }\n}\n\nexport default connect(Mapstatetoprops, { EditMenuCart, LoadingButton, DoneLoad })(CartView)","/home/devweb/pikapp-web/src/Component/Authentication/ResetPin/ResetPinDialog.js",["216","217","218","219","220"],"import React, { useState } from \"react\";\nimport '../../../Asset/scss/AuthenticationDialog.scss';\nimport closeLogo from '../../../Asset/Icon/close.png';\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PinInput from \"react-pin-input\";\nimport pikappLogo from '../../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport PikaButton from \"../../Button/PikaButton\";\nimport ConfirmResetPinDialog from \"../ResetPin/ConfirmResetPinDialog\";\n\nconst ResetPinDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const AuthRedu = useSelector(state => state.AuthRedu);\n    const [confirmResetPinDialog, setConfirmResetPin] = useState(false);\n    const [resetPin, setResetPin] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [isCaptcha, setIsCaptcha] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHideResetPin()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHideResetPin()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const handleResetPin = (e) => {\n        setResetPin(e);\n    }\n\n    const checkResetPin = () => {\n        if (resetPin.length < 6) {\n          setErrorMsg(\"PIN must be within 6 digit numeric.\");\n          return false;\n        } else {\n          return true;\n        }\n    };\n\n    const openConfirmPinDialog = (e) => {\n        if (checkResetPin() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        setIsValid(true);\n\n        const data = {\n            currentPin : resetPin\n        };\n\n        dispatch({ type: 'RESETPIN', payload: data });\n\n        setConfirmResetPin(true);\n    }\n\n    const showConfirmPinDialog = () => {\n        if(confirmResetPinDialog) {\n            return (\n                <ConfirmResetPinDialog \n                    isShowConfirmResetPin={confirmResetPinDialog}\n                    onHideConfirmResetPin={() =>setConfirmResetPin(false)}\n                />\n            )\n        }\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='modalMenuDetail-auth' style={{\n                    display: props.isShowResetPin ? 'block' : 'none'\n                }} onClick={closeModal}\n                >\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\n                        {\n                            <span className='iconClose-auth' onClick={closeModal}>\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\n                            </span>\n                        }\n\n                        <div className='menuDetail-layout-auth'>\n                            <div className='menuContain-all-auth'>\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\n\n                                <div className='menu-detail-auth'>\n                                    <div className='menu-name-auth'>\n                                        Perbarui PIN Anda \n                                    </div>\n\n                                    <div className='mob-menu-category-auth'>\n                                        Ketik 6 digit nomor PIN baru Anda\n                                    </div>\n\n                                    <div>\n                                        <Form>\n                                            <Row>\n                                                <Col xs={11}>\n                                                    <PinInput\n                                                    length={6}\n                                                    focus\n                                                    // disabled\n                                                    secret\n                                                    ref={p => (pin => p)}\n                                                    type=\"number\"\n                                                    inputMode=\"numeric\"\n                                                    onChange={handleResetPin}\n                                                    />\n                                                    <div></div>\n                                                </Col>\n                                            </Row>\n\n                                            <Row>\n                                                <Col xs={11}>\n                                                {isValid || (\n                                                    <Alert variant=\"danger\">{errorMsg}</Alert>\n                                                )}\n                                                </Col>\n                                                <Col />\n                                            </Row>\n                                            \n                                        </Form>\n                                        \n                                        <div className='buttonSide-auth'>\n                                            <p className=\"linkWords colorWhite\">KEMBALI</p>\n                                            <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\n                                                <div className=\"wordsButton-auth txtLine\">\n                                                    NEXT\n                                                </div>\n                                            </div>\n                                        </div>\n    \n                                        <div className='bottomSide-auth'>\n                                            <h4 className='countrySide-auth'>Indonesia</h4>\n                                            <div className='reqSide-auth'>\n                                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                            </div>\n                                        </div>\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                :\n                <div className='modalMenuDetail-auth' style={{\n                    display: props.isShowResetPin ? 'block' : 'none'\n                }} onClick={closeModal}\n                >\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\n                        {\n                            <span className='iconClose-auth' onClick={closeModal}>\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\n                            </span>\n                        }\n\n                        <div className='menuDetail-layout-auth'>\n                            <div className='menuContain-all-auth'>\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\n\n                                <div className='menu-detail-auth'>\n                                    <div className='menu-name-auth'>\n                                        Perbarui PIN Anda \n                                    </div>\n\n                                    <div className='mob-menu-category-auth'>\n                                        Ketik 6 digit nomor PIN baru Anda\n                                    </div>\n\n                                    <div>\n                                        <Form>\n                                            <Row>\n                                                <Col xs={11}>\n                                                    <PinInput\n                                                    length={6}\n                                                    focus\n                                                    // disabled\n                                                    secret\n                                                    ref={p => (pin => p)}\n                                                    type=\"number\"\n                                                    inputMode=\"numeric\"\n                                                    onChange={handleResetPin}\n                                                    />\n                                                    <div></div>\n                                                </Col>\n                                            </Row>\n\n                                            <Row>\n                                                <Col xs={11}>\n                                                {isValid || (\n                                                    <Alert variant=\"danger\">{errorMsg}</Alert>\n                                                )}\n                                                </Col>\n                                                <Col />\n                                            </Row>\n                                            \n                                        </Form>\n                                        \n                                        <div className='buttonSide-auth'>\n                                            <p className=\"linkWords colorWhite\">KEMBALI</p>\n                                            <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\n                                                <div className=\"wordsButton-auth txtLine\">\n                                                    NEXT\n                                                </div>\n                                            </div>\n                                        </div>\n    \n                                        <div className='bottomSide-auth'>\n                                            <h4 className='countrySide-auth'>Indonesia</h4>\n                                            <div className='reqSide-auth'>\n                                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                            </div>\n                                        </div>\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n\n            {showConfirmPinDialog()}\n        </div>\n    );\n}\n\nexport default ResetPinDialog","/home/devweb/pikapp-web/src/View/Product/ProductView.js",["221","222","223","224","225","226","227","228","229","230","231","232"],"import React from \"react\";\nimport { prominent } from \"color.js\";\nimport rgbHex from 'rgb-hex'\nimport MenuDetail from \"../../Component/Menu/MenuDetail\";\nimport queryString from \"query-string\";\nimport cartIcon from \"../../Asset/Icon/cart_icon.png\";\nimport { Link } from \"react-router-dom\";\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport sha256 from \"crypto-js/hmac-sha256\";\nimport Axios from \"axios\";\nimport Cookies from \"js-cookie\"\nimport Storeimg from '../../Asset/Illustration/storeimg2.jpg'\nimport Productimage from '../../Asset/Illustration/storeimg.jpg'\nimport Logopikapp from '../../Asset/Logo/logo4x.png'\nimport NotifIcon from '../../Asset/Icon/bell.png'\nimport ProfileIcon from '../../Asset/Icon/avatar.png'\nimport OpenHourIcon from '../../Asset/Icon/hour.png'\nimport CoinIcon from '../../Asset/Icon/coin.png'\nimport LocationIcon from '../../Asset/Icon/location.png'\nimport PhoneIcon from '../../Asset/Icon/phone.png'\nimport StarIcon from '../../Asset/Icon/star.png'\nimport ArrowIcon from '../../Asset/Icon/arrowselect.png'\nimport Skeleton from 'react-loading-skeleton'\nimport Swal from 'sweetalert2'\nimport { connect } from 'react-redux'\nimport { ValidQty, OpenSelect } from '../../Redux/Actions'\nimport TourPage from '../../Component/Tour/TourPage';\n\nvar currentExt = {\n  detailCategory: [\n    {\n      name: \"\",\n      amount: 0,\n    },\n  ],\n  note: \"\",\n  foodCategory: '',\n  listcheckbox: [],\n  listradio: [],\n  foodTotal: 0,\n};\n\nvar currentTotal = 0\n\nclass ProductView extends React.Component {\n  state = {\n    page: 0, //products pagination\n    size: 9, //set amount of products to be shown in frontend\n    boolpage: false,\n    productPage: [], //set how many page of product merchant from backend server\n    idCateg: [], //set current product page of specific size of loaded products\n    testColor: false,\n    testingchange: false, //only for testing, would be remove\n    showModal: false, // show customization of selected menu such as qty, notes and more advance choice\n    showMenuDet: false, //show menu detail\n    isLogin: false,\n    data: {\n      mid: \"\",\n      title: \"\",\n      image: \"\",\n      logo: \"\",\n      desc: \"\",\n      address: \"\",\n      rating: \"\",\n      phone: \"\",\n      currentData: {\n        productId: \"\",\n        category: \"\",\n        foodName: \"\",\n        foodDesc: \"\",\n        foodPrice: 0,\n        foodImage: \"\",\n        foodExt: [\n          {\n            name: \"\",\n            amount: 0,\n          },\n        ],\n      },\n    },\n    backColor1: \"\", //merchant info background color\n    backColor2: \"\", //products info background color\n    categName: \"All Categories\", //initial for dropdown select\n    allProductsandCategories: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //mapping from API\n    productCategpersize: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //tobe shown in products area\n    choosenIndCateg: null, //index of category selected when load more products in selected category\n    counterLoad: 0,\n    isScrolling: false,\n    startTour : false,\n    steptour:[\n      {\n        selector: '',\n        content : () => (\n          <div>\n            <h2>Selamat Datang di PikApp!</h2>\n            <br />\n            <span>Yuk caritau cara memesan dengan PikApp dengan mudah.</span>\n          </div>\n        )\n      },\n      {\n        selector: '.product-merchant',\n        content : () => (\n          <div>\n            <h4>Ini adalah Menu Restoran</h4>\n            <br />\n            <span>Kamu bisa pilih makanan kesukaan kamu disini. Silakan tap untuk dipesan!</span>\n          </div>\n        )\n      }\n    ]\n  };\n\n  timeout = null\n\n  componentDidMount() {\n    this.props.ValidQty(0)\n    document.body.style.backgroundColor = 'white'\n    Cookies.set(\"lastProduct\", window.location.href, { expires: 1 })\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"));\n      this.setState({ isLogin: auth.isLogged });\n    } \n    \n    if (auth.isLogged === false) {\n      var lastLink = { value: window.location.href }\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\n    }\n    const value = queryString.parse(window.location.search);\n    const mid = value.mid;\n    const notab = value.table || \"\"\n\n    // let longlatAddress\n    let addressRoute\n    // if (JSON.parse(localStorage.getItem('longlat'))) {\n    //   longlatAddress = JSON.parse(localStorage.getItem('longlat'))\n    //   addressRoute = address + \"home/v2/detail/merchant/\" + longlatAddress.lon + \"/\" + longlatAddress.lat + \"/\"\n    // }\n    // if (navigator.geolocation) { //SHUTDOWN FOR A WHILE\n    //   navigator.geolocation.getCurrentPosition(position => {\n    //     let latitude = position.coords.latitude\n    //     let longitude = position.coords.longitude\n    //   })\n    // }\n    let latitude = -6.28862\n    let longitude = 106.71789\n    let longlat = { lat: latitude, lon: longitude }\n    localStorage.setItem(\"longlat\", JSON.stringify(longlat))\n    addressRoute = address + \"home/v2/detail/merchant/\" + longitude + \"/\" + latitude + \"/\"\n\n    let uuid = uuidV4();\n    uuid = uuid.replace(/-/g, \"\");\n    const date = new Date().toISOString();\n\n    Axios(addressRoute, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId,\n        \"token\": \"PUBLIC\",\n        \"mid\": mid,\n      },\n      method: \"GET\"\n    })\n      .then((res) => {\n        // console.log(res.data.results);\n        var currentMerchant = {\n          mid: \"\",\n          storeName: \"\",\n          storeDesc: \"\",\n          distance: \"\",\n          storeImage: \"\",\n          storeAdress: \"\",\n          storeRating: \"\",\n          storeLogo: \"\",\n        };\n        currentMerchant.mid = res.data.results.mid;\n        currentMerchant.storeName = res.data.results.merchant_name;\n        currentMerchant.storeDesc = \"Desc\";\n        currentMerchant.distance = res.data.results.merchant_distance;\n        currentMerchant.storeImage = res.data.results.merchant_pict;\n        currentMerchant.storeAdress = res.data.results.merchant_address;\n        currentMerchant.storeRating = res.data.results.merchant_rating;\n        currentMerchant.storeLogo = res.data.results.merchant_logo;\n\n        let selectedStore = []\n        selectedStore.push(res.data.results)\n        localStorage.setItem('selectedMerchant', JSON.stringify(selectedStore))\n        Cookies.set(\"currentMerchant\", currentMerchant, { expires: 1 })\n\n        let selectedMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\n        let filtersizeMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\n\n        let stateData = { ...this.state.data };\n        stateData.mid = mid;\n        stateData.title = currentMerchant.storeName;\n        stateData.image = currentMerchant.storeImage;\n        stateData.logo = currentMerchant.storeLogo;\n        stateData.desc = currentMerchant.storeDistance;\n        stateData.address = currentMerchant.storeAdress;\n        stateData.rating = currentMerchant.storeRating;\n        stateData.phone = \"081296000823\";\n        stateData.notable = notab\n        var productCateg = []\n        var idCateg = []\n        var productPage = []\n        productCateg = selectedMerchant[0].categories.map((categ) => {\n          idCateg.push(0)\n          productPage.push(this.state.size)\n          return categ\n        })\n\n        productCateg.forEach((val) => {\n          val.category_products = []\n        })\n\n        productCateg.forEach((categProd) => {\n          selectedMerchant[0].products.forEach((allproducts) => {\n            if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\n              categProd.category_products.push({\n                productId: allproducts.product_id,\n                category: allproducts.product_category,\n                foodName: allproducts.product_name,\n                foodDesc: allproducts.product_desc,\n                foodPrice: allproducts.product_price,\n                foodRating: allproducts.rating,\n                foodImage: allproducts.product_picture1,\n                foodExt: [\n                  {\n                    name: \"\",\n                    amount: 0,\n                  },\n                ],\n              })\n            }\n          })\n        })\n\n        let productPerSize = filtersizeMerchant[0].categories.map((categ) => {\n          return categ\n        })\n\n        productPerSize.forEach((val) => {\n          val.category_products = []\n        })\n\n        productPerSize.forEach((categProd) => {\n          filtersizeMerchant[0].products.forEach((allproducts) => {\n            if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\n              categProd.category_products.push({\n                productId: allproducts.product_id,\n                category: allproducts.product_category,\n                foodName: allproducts.product_name,\n                foodDesc: allproducts.product_desc,\n                foodPrice: allproducts.product_price,\n                foodRating: allproducts.rating,\n                foodImage: allproducts.product_picture1,\n                foodExt: [\n                  {\n                    name: \"\",\n                    amount: 0,\n                  },\n                ],\n              })\n            }\n          })\n        })\n\n        let firstShownProduct = []\n        productPerSize.forEach((categProd, indexcategProd) => {\n          firstShownProduct.push(categProd)\n          let newFilter = categProd.category_products.filter((valProd, indexvalProd) => {\n            return indexvalProd < this.state.size\n          })\n          categProd.category_products = newFilter\n          firstShownProduct[indexcategProd].category_products = []\n          firstShownProduct[indexcategProd].category_products = newFilter\n        })\n\n        let newImage = Storeimg\n        Axios.get(currentMerchant.storeImage)\n          .then(() => {\n            newImage = currentMerchant.storeImage\n            prominent(newImage, { amount: 3 }).then((color) => {\n              // return RGB color for example [241, 221, 63]\n              var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\n              var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\n              this.brightenColor(merchantColor, 70, productColor, 60)\n              this.setState({ data: stateData, allProductsandCategories: productCateg, productCategpersize: productPerSize, idCateg, productPage });\n              document.addEventListener('scroll', this.loadMoreMerchant)\n              document.addEventListener('scroll', this.onScrollCart)\n            });\n            \n            if (localStorage.getItem(\"productTour\") == 1) {\n              if(this.props.AuthRedu.isMerchantQR === false) {\n                this.state.steptour.shift();\n              }\n              this.setState({ startTour : true});\n            } \n            else if (localStorage.getItem('merchantFlow') == 1) {\n              this.setState({ startTour : true});\n            }\n          }).catch(err => {\n            console.log(err)\n            newImage = Storeimg\n            prominent(newImage, { amount: 3 }).then((color) => {\n              // return RGB color for example [241, 221, 63]\n              var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\n              var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\n              this.brightenColor(merchantColor, 70, productColor, 60)\n              this.setState({ data: stateData, allProductsandCategories: productCateg, productCategpersize: productPerSize, idCateg, productPage });\n              document.addEventListener('scroll', this.loadMoreMerchant)\n            });\n            \n            if (localStorage.getItem(\"productTour\") == 1) {\n              if(this.props.AuthRedu.isMerchantQR === false) {\n                this.state.steptour.shift();\n              }\n              this.setState({ startTour : true});\n            } \n            else if (localStorage.getItem('merchantFlow') == 1) {\n              this.setState({ startTour : true});\n            }\n          })\n      })\n      .catch((err) => console.log(err)); \n  }\n\n  componentDidUpdate() {\n    if (this.state.idCateg[this.state.choosenIndCateg] > 0) { //load more products with selected index of category\n      if (this.state.boolpage === true) {\n        this.loadProducts(this.state.choosenIndCateg)\n      } else {\n        document.addEventListener('scroll', this.loadMoreMerchant)\n      }\n    }\n\n    if (this.state.isLogin === false) {\n      var auth = {\n        isLogged: false,\n        token: \"\",\n        new_event: true,\n        recommendation_status: false,\n        email: \"\",\n      };\n      if (Cookies.get(\"auth\") !== undefined) {\n        auth = JSON.parse(Cookies.get(\"auth\"));\n        this.setState({ isLogin: auth.isLogged });\n      }\n    }\n\n  }\n\n  brightenColor = (hex, percent, hex2, percent2) => {\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\n    //backColor1\n    if (hex.length == 3) {\n      hex = hex.replace(/(.)/g, '$1$1');\n    }\n\n    var r = parseInt(hex.substr(0, 2), 16),\n      g = parseInt(hex.substr(2, 2), 16),\n      b = parseInt(hex.substr(4, 2), 16);\n\n    let brightColor = '#' +\n      ((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +\n      ((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +\n      ((0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16)).substr(1);\n\n    //backColor2\n    if (hex2.length == 3) {\n      hex2 = hex2.replace(/(.)/g, '$1$1');\n    }\n\n    var r2 = parseInt(hex2.substr(0, 2), 16),\n      g2 = parseInt(hex2.substr(2, 2), 16),\n      b2 = parseInt(hex2.substr(4, 2), 16);\n\n    let brightColor2 = '#' +\n      ((0 | (1 << 8) + r2 + (256 - r2) * percent2 / 100).toString(16)).substr(1) +\n      ((0 | (1 << 8) + g2 + (256 - g2) * percent2 / 100).toString(16)).substr(1) +\n      ((0 | (1 << 8) + b2 + (256 - b2) * percent2 / 100).toString(16)).substr(1);\n\n    this.setState({ backColor1: brightColor, backColor2: brightColor2, testColor: false })\n    document.body.style.backgroundColor = '#' + hex;\n  }\n\n  onScrollCart = () => {\n    this.setState({ isScrolling: true })\n    clearTimeout(this.timeout)\n    this.timeout = setTimeout(() => {\n      this.setState({ isScrolling: false })\n    }, 300);\n  }\n\n  loadProducts = (indexOfCateg) => {\n    let getindexProd = this.state.allProductsandCategories[indexOfCateg].category_products\n    let loadtheProd = getindexProd.filter((valProd, indvalProd) => {\n      return indvalProd >= this.state.idCateg[indexOfCateg] && indvalProd < this.state.productPage[indexOfCateg]\n    })\n\n    let updatedProduct = this.state.productCategpersize\n    updatedProduct.forEach((value, index) => {\n      if (index === indexOfCateg) {\n        loadtheProd.forEach((valLoadProd) => {\n          value.category_products.push(valLoadProd)\n        })\n      }\n    })\n\n    this.setState({ boolpage: false, productCategpersize: updatedProduct })\n    document.addEventListener('scroll', this.loadMoreMerchant)\n  }\n\n  handlePhone = (phone) => { //go to Whatsapp chat\n    phone.substring(1)\n    let waNumber = '62' + phone\n    window.location.href = `https://wa.me/${waNumber}`\n  }\n\n  handleDetail(data) {\n    this.setState({ currentData: data });\n    this.setState({ showMenuDet: true });\n    document.body.style.overflowY = 'hidden'\n  }\n\n  setModal(isShow) {\n    this.setState({ showModal: isShow });\n  }\n\n  setMenuDetail(isShow) {\n    this.setState({ showMenuDet: isShow })\n    document.body.style.overflowY = ''\n  }\n\n  handleCart = (data) => {\n    currentExt = data;\n  };\n\n  handleAddCart = () => {\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\n    const value = queryString.parse(window.location.search);\n    const mid = value.mid;\n    this.setModal(false);\n    var isStorePresent = false;\n    let cart = JSON.parse(localStorage.getItem('cart'))\n    cart.forEach((data) => {\n      if (data.mid === this.state.data.mid) {\n        isStorePresent = true;\n      }\n    });\n\n    let duplicateProduct = []\n    var isDuplicate = false;\n    cart.forEach((data) => {\n      if (data.mid === this.state.data.mid) {\n        data.food.forEach((food) => {\n          if (food.productId === this.state.currentData.productId) {\n            isDuplicate = true;\n            duplicateProduct.push(food)\n          }\n        });\n      }\n    });\n\n    var isDuplicateSelection = false\n    let indexOfspesificCart = 0 //get index of spesific cart product after break loop or match condition\n    if (isStorePresent && isDuplicate) {\n      let countAllSelection = 0\n      let sizecartArr = 0 //size cart of spesific index\n      let sizecurrentArr = 0 //size current selected menu\n\n      //loop list checkbox from current menu selection\n      currentExt.listcheckbox.forEach((currentfirstVal) => {\n        currentfirstVal.forEach((currentnestedVal) => {\n          if (currentnestedVal.name) {\n            sizecurrentArr += 1\n          }\n        })\n      })\n\n      //loop list radio from current menu selection\n      currentExt.listradio.forEach((currentfirstVal) => {\n        currentfirstVal.forEach((currentnestedVal) => {\n          if (currentnestedVal.name) {\n            sizecurrentArr += 1\n          }\n        })\n      })\n\n      let boolSpesificInd = true //to break following loop\n      duplicateProduct.forEach((menuProd, index) => {\n        if (boolSpesificInd) {\n          //loop list checkbox from cart\n          menuProd.foodListCheckbox.forEach(firstVal => {\n            firstVal.forEach(nestedVal => {\n              if (nestedVal.name) {\n                sizecartArr += 1\n              }\n            })\n          })\n\n          //loop list radio from cart\n          menuProd.foodListRadio.forEach(firstVal => {\n            firstVal.forEach(nestedVal => {\n              if (nestedVal.name) {\n                sizecartArr += 1\n              }\n            })\n          })\n\n          console.log(sizecartArr);\n          console.log(sizecurrentArr);\n          if (sizecartArr === sizecurrentArr) {\n            menuProd.foodListCheckbox.forEach((firstVal) => {\n              firstVal.forEach((nestedVal) => {\n\n                //loop listcheckbox from current advance selection to be match with added cart\n                currentExt.listcheckbox.forEach((currentfirstVal) => {\n                  currentfirstVal.forEach((currentnestedVal) => {\n                    if (nestedVal.name === currentnestedVal.name) {\n                      countAllSelection += 1\n                    }\n                  })\n                })\n              })\n            })\n\n            // loop radio from added cart\n            menuProd.foodListRadio.forEach((firstVal) => {\n              firstVal.forEach((nestedVal) => {\n\n                //loop radio from current advance selection to be match with added cart\n                currentExt.listradio.forEach((currentfirstVal) => {\n                  currentfirstVal.forEach((currentnestedVal) => {\n                    if (nestedVal.name === currentnestedVal.name) {\n                      countAllSelection += 1\n                    }\n                  })\n                })\n              })\n            })\n\n            if (sizecartArr === countAllSelection) {\n              if (menuProd.foodNote === currentExt.note) {\n                indexOfspesificCart = index\n                isDuplicateSelection = true\n                boolSpesificInd = false\n              } else {\n                sizecartArr = 0\n                countAllSelection = 0\n              }\n            } else {\n              sizecartArr = 0\n              countAllSelection = 0\n            }\n          } else {\n            sizecartArr = 0\n          }\n        }\n      })\n    }\n\n    var isFound = false\n    if (isStorePresent === true) {\n      if (isDuplicate === true) {\n        if (isDuplicateSelection) {\n          console.log('duplicate');\n          cart.forEach((data) => {\n            if (isFound === false) {\n              if (data.mid === this.state.data.mid) {\n                console.log('same mid');\n                if (isFound === false) {\n                  if (duplicateProduct[indexOfspesificCart].foodNote === currentExt.note) {\n                    isFound = true\n                    duplicateProduct[indexOfspesificCart].foodAmount += currentExt.detailCategory[0].amount\n                    duplicateProduct[indexOfspesificCart].foodTotalPrice += currentTotal\n                  }\n                }\n              }\n            }\n          })\n          if (isFound === false) {\n            var isAdded = false\n            cart.forEach((data) => {\n              if (data.mid === this.state.data.mid) {\n                data.food.forEach((food) => {\n                  if (isAdded === false) {\n                    isAdded = true\n                    data.food.push({\n                      productId: this.state.currentData.productId,\n                      foodName: this.state.currentData.foodName,\n                      foodPrice: this.state.currentData.foodPrice,\n                      foodImage: this.state.currentData.foodImage,\n                      foodCategory: currentExt.foodCategory,\n                      foodAmount: currentExt.detailCategory[0].amount,\n                      foodNote: currentExt.note,\n                      foodListCheckbox: currentExt.listcheckbox,\n                      foodListRadio: currentExt.listradio,\n                      foodTotalPrice: currentTotal\n                    });\n                  }\n                });\n              }\n            })\n          };\n        } else {\n          console.log('noduplicate choice');\n          cart.forEach((data) => {\n            if (data.mid === this.state.data.mid) {\n              data.food.push({\n                productId: this.state.currentData.productId,\n                foodName: this.state.currentData.foodName,\n                foodPrice: this.state.currentData.foodPrice,\n                foodImage: this.state.currentData.foodImage,\n                foodCategory: currentExt.foodCategory,\n                foodAmount: currentExt.detailCategory[0].amount,\n                foodNote: currentExt.note,\n                foodListCheckbox: currentExt.listcheckbox,\n                foodListRadio: currentExt.listradio,\n                foodTotalPrice: currentTotal\n              });\n            }\n          })\n        }\n      } else {\n        console.log('noduplicate product');\n        cart.forEach((data) => {\n          if (data.mid === this.state.data.mid) {\n            data.food.push({\n              productId: this.state.currentData.productId,\n              foodName: this.state.currentData.foodName,\n              foodPrice: this.state.currentData.foodPrice,\n              foodImage: this.state.currentData.foodImage,\n              foodCategory: currentExt.foodCategory,\n              foodAmount: currentExt.detailCategory[0].amount,\n              foodNote: currentExt.note,\n              foodListCheckbox: currentExt.listcheckbox,\n              foodListRadio: currentExt.listradio,\n              foodTotalPrice: currentTotal\n            });\n          }\n        });\n      }\n    } else {\n      cart.push({\n        mid: mid,\n        storeName: currentMerchant.storeName,\n        storeDesc: currentMerchant.storeDesc,\n        storeDistance: currentMerchant.distance,\n        food: [\n          {\n            productId: this.state.currentData.productId,\n            foodName: this.state.currentData.foodName,\n            foodPrice: this.state.currentData.foodPrice,\n            foodImage: this.state.currentData.foodImage,\n            foodCategory: currentExt.foodCategory,\n            foodAmount: currentExt.detailCategory[0].amount,\n            foodNote: currentExt.note,\n            foodListCheckbox: currentExt.listcheckbox,\n            foodListRadio: currentExt.listradio,\n            foodTotalPrice: currentTotal\n          },\n        ],\n      });\n    }\n    let addedMerchants = []\n    if (Cookies.get(\"addedMerchants\") === undefined) {\n      if (!addedMerchants.includes(mid)) {\n        addedMerchants.push(mid)\n        Cookies.set(\"addedMerchants\", addedMerchants)\n      }\n    } else {\n      addedMerchants = JSON.parse(Cookies.get(\"addedMerchants\"))\n      if (!addedMerchants.includes(mid)) {\n        addedMerchants.push(mid)\n        Cookies.set(\"addedMerchants\", addedMerchants)\n      }\n    }\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n    Swal.fire({\n      position: 'top',\n      icon: 'success',\n      title: 'Berhasil masuk cart',\n      showConfirmButton: false,\n      timer: 1500\n    })\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n\n    let newNotes = ''\n    currentExt.listcheckbox.forEach(val => {\n      val.forEach(val2 => {\n        return newNotes += `${val2.name}, `\n      })\n    })\n\n    currentExt.listradio.forEach(val => {\n      val.forEach(val2 => {\n        return newNotes += `${val2.name}, `\n      })\n    })\n\n    if (currentExt.note) {\n      newNotes += currentExt.note\n    }\n\n    let uuid = uuidV4();\n    const date = new Date().toISOString();\n    uuid = uuid.replace(/-/g, \"\");\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\n    Axios(address + \"txn/v1/cart-post/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId,\n        \"x-signature\": signature,\n        \"token\": auth.token,\n      },\n      method: \"POST\",\n      data: {\n        mid: this.state.data.mid,\n        pid: this.state.currentData.productId,\n        notes: newNotes,\n        qty: currentExt.detailCategory[0].amount,\n      }\n    })\n      .then(() => {\n        console.log('addtocart succeed');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  changeMenu = () => {\n    this.props.OpenSelect(!this.props.AllRedu.openSelect)\n    document.removeEventListener('scroll', this.loadMoreMerchant)\n  }\n\n  changeHeader = (menu) => {\n    this.props.OpenSelect(false)\n    this.setState({ categName: menu })\n  }\n\n  isBottom = (el) => {\n    return (el.getBoundingClientRect().top + 100) <= window.innerHeight\n  }\n\n  stopAndLoadMore = (ind) => {\n    // console.log(ind);\n    // console.log(this.state.idCateg[ind]);\n    // console.log(this.state.productPage[ind]);\n    if (this.state.productCategpersize[ind].category_products.length < this.state.allProductsandCategories[ind].category_products.length) {\n      // console.log('testloadmore');\n      var openidCateg = [...this.state.idCateg]\n      openidCateg[ind] += this.state.size\n\n      var openproductPage = [...this.state.productPage]\n      openproductPage[ind] += this.state.size\n\n      this.setState({ idCateg: openidCateg, productPage: openproductPage, boolpage: true, choosenIndCateg: ind })\n    } else {\n      // console.log('nambah');\n      var num = this.state.counterLoad\n      num++\n      this.setState({ counterLoad: num })\n    }\n  }\n\n  loadMoreMerchant = () => {\n    this.state.productCategpersize.forEach((val, ind) => {\n      var wrappedElement = document.getElementById(ind)\n      if (this.isBottom(wrappedElement)) {\n        // console.log(this.state.counterLoad, 'counterLoad');\n        // console.log(wrappedElement.id, 'wrap');\n        if (wrappedElement.id == this.state.counterLoad) {\n          // console.log(ind, 'selected index');\n          document.removeEventListener('scroll', this.loadMoreMerchant)\n          this.stopAndLoadMore(ind)\n        }\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.loadMoreMerchant)\n    document.removeEventListener('scroll', this.onScrollCart)\n\n  }\n\n  contentView = () => {\n    return this.state.productCategpersize.map((categ, indcateg) => {\n      return (\n        <div key={indcateg} className='product-section'>\n          <h2 id={categ.category_name.toLocaleLowerCase()} className='product-categ'>{categ.category_name.toLocaleLowerCase() || <Skeleton height={50} width={200} />}</h2>\n\n          <div className='list-product'>\n            {\n              categ.category_products.map((product, indprod) => {\n                return (\n                  <div key={indprod} className='product-merchant' onClick={() => this.handleDetail(product)}>\n                    <div className='product-img'>\n                      <img src={product.foodImage} className='product-imgContent' alt='' />\n                    </div>\n\n                    {/* desktop view */}\n                    <div className='product-detail'>\n                      {/* <div className='product-star'>\n                        <img className='product-star-img' src={StarIcon} alt='' />\n                        <h6 className='product-star-rating'>{product.foodRating}</h6>\n                      </div> */}\n\n                      <div className='product-name'>\n                        {product.foodName}\n                      </div>\n\n                      <div className='product-desc'>\n                        {product.foodDesc}\n                      </div>\n\n                      <div className='product-price'>\n                        {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\n                      </div>\n                    </div>\n\n                    {/* mobile view */}\n                    <div className='product-detail-mob'>\n                      <div className='product-detailInfo-mob'>\n                        {/* <div className='product-star-mob'>\n                          <img className='product-star-img-mob' src={StarIcon} alt='' />\n                          <h6 className='product-star-rating-mob'>{product.foodRating}</h6>\n                        </div> */}\n\n                        <div className='product-name-mob'>\n                          {product.foodName}\n                        </div>\n\n                        <div className='product-desc-mob'>\n                          {product.foodDesc}\n                        </div>\n                      </div>\n\n                      <div className='product-price-mob'>\n                        {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\n                      </div>\n                    </div>\n                  </div>\n                )\n              })\n            }\n          </div>\n          {\n            this.state.productCategpersize[indcateg].category_products.length < this.state.allProductsandCategories[indcateg].category_products.length ?\n              <div id={indcateg}>\n                <Skeleton style={{ paddingTop: 100, borderRadius: 30 }} />\n              </div>\n              :\n              <div id={indcateg}>\n                {/* <Skeleton style={{paddingTop:100, borderRadius: 30}} /> */}\n              </div>\n          }\n        </div>\n      );\n    })\n  }\n\n  handleCartAmount = (price) => {\n    currentTotal = price\n  }\n\n  menuDetail = () => {\n    if (this.state.showMenuDet === true) {\n      return (\n        <MenuDetail\n          isShow={this.state.showMenuDet}\n          onHide={() => this.setMenuDetail(false)}\n          datas={this.state.currentData}\n          handleCateg={this.state.productCategpersize}\n          handleAmount={this.handleCartAmount}\n          handleClick={this.handleAddCart}\n          handleData={this.handleCart}\n        />\n      );\n    }\n  }\n\n  tourPage = () => {\n    if (this.state.startTour === true) {\n      return (\n        <TourPage \n          stepsContent={this.state.steptour}\n          isShowTour={this.state.startTour}\n          isHideTour={() =>this.showTourPage(false)}\n        />\n      )\n    }\n  }\n\n  showTourPage = (isShowTour) => {\n    this.setState({ startTour: isShowTour });\n    document.body.style.overflowY = 'auto';\n    localStorage.setItem('productTour', 0);\n  }\n\n  render() {\n    let cartButton;\n    const value = queryString.parse(window.location.search);\n    let notab = \"\"\n    if (localStorage.getItem('table')) {\n      if (!value.table) {\n        notab = localStorage.getItem('fctable')\n      } else {\n        notab = value.table || \"\"\n      }\n    } else {\n      if (localStorage.getItem('fctable')) {\n        notab = localStorage.getItem('fctable')\n      } else {\n        notab = value.table || \"\"\n      }\n    }\n    if (JSON.parse(localStorage.getItem('cart'))) {\n      let allCart = JSON.parse(localStorage.getItem('cart'))\n      let filterMerchantCart = allCart.filter(cartVal => {\n        return this.state.data.mid === cartVal.mid\n      })\n      if (filterMerchantCart.length) {\n        localStorage.setItem('table', notab)\n        localStorage.setItem('lastTable', notab)\n        let totalCartIcon = 0\n        filterMerchantCart[0].food.forEach(valCart => {\n          totalCartIcon += valCart.foodTotalPrice\n        })\n        if (filterMerchantCart[0].mid) {\n          if (this.state.isScrolling) {\n            cartButton = <></>\n          } else {\n            cartButton = (\n              <Link to={\"/cart\"}>\n                <div className='cartIcon-layout'>\n                  <div className='cartIcon-content'>\n                    <div className='cartItem-total'>Checkout {filterMerchantCart[0].food.length} Items</div>\n                    <div className='cartItem-price'>{Intl.NumberFormat(\"id-ID\").format(totalCartIcon)}</div>\n                  </div>\n                </div>\n              </Link>\n            );\n          }\n        } else {\n          cartButton = <></>;\n        }\n      } else {\n        cartButton = <></>;\n      }\n    }\n\n    if (this.state.categName !== \"All Categories\") {\n      if (this.props.AllRedu.openSelect === false) {\n        //scroll to selected menu\n        document.addEventListener('scroll', this.loadMoreMerchant)\n        document.getElementById(this.state.categName).scrollIntoView({ behavior: \"smooth\" })\n        this.setState({ categName: 'All Categories' })\n      }\n    }\n\n    return (\n      <>\n        <div className='storeBanner'>\n          {\n            this.state.data.image ?\n              <img src={this.state.data.image} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\n              :\n              <Skeleton style={{ paddingTop: 10, width: \"100%\", height: \"100%\" }} />\n          }\n\n          {\n            this.state.isLogin ?\n              <div className='iconBanner'>\n                <Link to={\"/profile\"}>\n                  <div className='profileIcon-sec'>\n                    <div className='profileIcon'>\n                      <span className='reactProfIcons'>\n                        <img className='profileicon-img' src={ProfileIcon} alt='' />\n                      </span>\n                    </div>\n                  </div>\n                </Link>\n\n                <Link to={\"/status\"}>\n                  <div className='notifIcon-sec'>\n                    <div className='notifIcon'>\n                      <span className='reactNotifIcons'>\n                        <img className='notificon-img' src={NotifIcon} alt='' />\n                      </span>\n                    </div>\n                  </div>\n                </Link>\n              </div>\n              :\n              <div></div>\n          }\n        </div>\n        <div className='merchant-section' style={{ backgroundColor: this.state.backColor1 }}>\n          <div className='inside-merchantSection'>\n            <div className='merchant-info'>\n              <div className='top-merchantInfo'>\n                <div className='inside-topMerchantInfo'>\n                  <div className='merchant-title'>\n                    <div className='merchant-logo'>\n                      {\n                        this.state.data.logo ?\n                          <img src={this.state.data.logo} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\n                          :\n                          <Skeleton style={{ paddingTop: 10, width: \"100%\", height: \"100%\" }} />\n                      }\n                    </div>\n\n                    <div className='merchant-name'>\n                      <div className='merchant-mainName'>\n                        {this.state.data.title || <Skeleton style={{ paddingTop: 30, width: 200 }} />}\n                      </div>\n\n                      <div className='merchant-categName'>\n                        <div className='merchant-allcateg'>Merchant Category</div>\n                        <div className='merchant-starInfo'>\n                          {\n                            // this.state.data.rating ?\n                            //   <>\n                            //     <img className='star-img' src={StarIcon} alt='' />\n                            //     <div className='merchant-star'>{this.state.data.rating}</div>\n                            //   </>\n                            //   :\n                            //   null\n                            // <Skeleton width={50} />\n                          }\n                          {/* <div className='star-votes'>(50+ Upvotes)</div> */}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className='merchant-call-sec' onClick={() => this.handlePhone(this.state.data.phone)}>\n                    <div className='merchant-call'>\n                      <span className='merchantCall-icon'>\n                        <img className='merchantCall-img' src={PhoneIcon} alt='' />\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className='bottom-merchantInfo'>\n                <div className='inside-bottomMerchantInfo'>\n                  <div className='merchantdetail-section'>\n                    <div className='icon-based'>\n                      <img className='openhouricon' src={OpenHourIcon} alt='' />\n                    </div>\n\n                    <div className='detail-info'>\n                      <div className='top-detail-info'>Open</div>\n                      <div className='bottom-detail-info'>Jum (08.00 - 20.00)</div>\n                    </div>\n                  </div>\n                  <div className='merchantdetail-section'>\n                    <div className='icon-based'>\n                      <img className='coinicon' src={CoinIcon} alt='' />\n                    </div>\n\n                    <div className='detail-info'>\n                      <div className='top-detail-info'>$$$</div>\n                      <div className='bottom-detail-info'>50 K - 100 K</div>\n                    </div>\n                  </div>\n                  <div className='merchantdetail-section'>\n                    <div className='icon-based'>\n                      <img className='locationicon' src={LocationIcon} alt='' />\n                    </div>\n\n                    <div className='detail-info'>\n                      <div className='top-detail-info'>Store Address</div>\n                      <div className='bottom-detail-info'>{this.state.data.address || <Skeleton style={{ paddingTop: 30, width: 100 }} />}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className='merchant-category'>\n              <div className='select-category'>\n                <div className='listCategory'>\n                  <h2 className='categoryName'>{this.state.categName}</h2>\n\n                  <div className='arrow-based' onClick={() => this.changeMenu()} >\n                    <img className='arrowicon' src={ArrowIcon} alt='' />\n                  </div>\n                </div>\n\n                {\n                  this.props.AllRedu.openSelect ?\n                    <div className='custom-options'>\n                      <span className='custom-optionCloser' defaultValue='Rice Box'>Closer</span>\n                      {\n                        this.state.productCategpersize.map((menuCategory, index) => (\n                          <span key={index} className='custom-option' onClick={() => this.changeHeader(menuCategory.category_name.toLocaleLowerCase())}>{menuCategory.category_name.toLocaleLowerCase()}</span>\n                        ))\n                      }\n                    </div>\n                    :\n                    null\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='product-layout' style={{ backgroundColor: this.state.backColor2 }}>\n          <div className='mainproduct-sec'>\n            {this.contentView()}\n\n            <div className='pikapp-info'>\n              <h3 className='pikappInfo'>Digital Menu By</h3>\n              <img className='Logopikapp' src={Logopikapp} alt='' />\n            </div>\n          </div>\n        </div>\n        {cartButton}\n        {this.menuDetail()}\n        {this.tourPage()}\n      </>\n    );\n  }\n}\n\nconst Mapstatetoprops = (state) => {\n  return {\n    AllRedu: state.AllRedu,\n    AuthRedu: state.AuthRedu\n  }\n}\n\nexport default connect(Mapstatetoprops, { ValidQty, OpenSelect })(ProductView)","/home/devweb/pikapp-web/src/View/Status/StatusView.js",["233","234","235","236"],"import React from \"react\";\nimport { Row, Col, Nav, Card, Modal } from \"react-bootstrap\";\nimport unpaidIcon from \"../../Asset/Icon/unpaid_status.png\";\nimport unpaidActiveIcon from \"../../Asset/Icon/unpaid_active_status.png\";\nimport packIcon from \"../../Asset/Icon/pack_status.png\";\nimport packActiveIcon from \"../../Asset/Icon/pack_active_status.png\";\nimport sendIcon from \"../../Asset/Icon/send_status.png\";\nimport sendActiveIcon from \"../../Asset/Icon/send_active_status.png\";\nimport reviewIcon from \"../../Asset/Icon/review_status.png\";\nimport reviewActiveIcon from \"../../Asset/Icon/review_active_status.png\";\nimport placeholderIcon from \"../../Asset/Icon/placeholder_icon.png\";\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\nimport categoryFoodIcon from \"../../Asset/Icon/category_food_icon.png\";\nimport pickupStatusIcon from \"../../Asset/Icon/pickup_status_icon.png\";\nimport cashierStatusIcon from \"../../Asset/Icon/cashier_icon.png\"\nimport ovoIcon from \"../../Asset/Icon/ovo_icon.png\";\nimport PikaButton from \"../../Component/Button/PikaButton\";\nimport Axios from \"axios\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport sha256 from \"crypto-js/hmac-sha256\";\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\nimport Cookies from \"js-cookie\";\nimport RegisterDialog from '../../Component/Authentication/RegisterDialog';\n\nexport class StatusView extends React.Component {\n  state = {\n    showModal: false,\n    activeTab: 1,\n    showRegisterDialog: false,\n    isLogin: false,\n    data: [\n      {\n        title: \"\",\n        distance: \"\",\n        quantity: \"\",\n        status: \"\",\n        biz_type: \"\",\n        payment: \"\",\n        transactionId: \"\",\n        transactionTime: \"\",\n      },\n    ],\n    currentModal: {\n      transactionId: \"\",\n      transactionTime: \"\",\n      storeName: \"Store\",\n      storeLocation: \"Location\",\n      storeDistance: \"Distance\",\n      status: \"Status\",\n      payment: \"Cash\",\n      biz_type: \"\",\n      food: [\n        {\n          productId: \"\",\n          name: \"\",\n          price: 0,\n          image: \"\",\n          note: \"\",\n          quantity: 1,\n          extraprice: 0\n        },\n      ],\n    },\n  };\n\n  setModal(isShow) {\n    this.setState({ showModal: isShow });\n  }\n\n  handleDetail(transId) {\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n    if (auth.isLogged === false) {\n      var lastLink = { value: window.location.href }\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\n      // window.location.href = \"/login\"\n    }\n    let uuid = uuidV4();\n    uuid = uuid.replace(/-/g, \"\");\n    const date = new Date().toISOString();\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\n    Axios(address + \"txn/v2/\" + transId + \"/txn-detail/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId,\n        \"x-signature\": signature,\n        \"token\": auth.token,\n      },\n      method: \"GET\",\n    })\n      .then((res) => {\n        console.log(res.data.results);\n        var results = res.data.results;\n        var resultModal = { ...this.currentModal }\n        resultModal.transactionId = results.transaction_id\n        resultModal.transactionTime = results.transaction_time\n        resultModal.storeName = results.merchant_name\n        resultModal.storeDistance = \"\"\n        resultModal.storeLocation = \"\"\n        resultModal.status = results.status\n        resultModal.biz_type = results.biz_type\n        resultModal.payment = results.payment_with\n        resultModal.food = []\n        results.detail_products.forEach((product) => {\n          resultModal.food.push({\n            name: product.product_name,\n            price: product.price,\n            quantity: product.qty,\n            image: product.image,\n            note: product.notes,\n            extraprice: product.extra_price\n          })\n        })\n        this.setState({\n          currentModal: resultModal\n        })\n      })\n      .catch((err) => {\n      });\n\n    this.setModal(true);\n  }\n\n  handleSelect(tabIndex) {\n    this.setState({ activeTab: tabIndex });\n  }\n\n  componentDidMount() {\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n      this.setState({ isLogin: auth.isLogged });\n    }\n    if (auth.isLogged === false) {\n      var lastLink = { value: window.location.href }\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\n      this.setRegisterDialog(true);\n      // window.location.href = \"/login\"\n    } else {\n      this.getTransactionHistory();\n    }\n    // var state = { ...this.state };\n    // state.data.pop();\n    // state.data.push({\n    //   title: \"Food1\",\n    //   distance: \"dist1\",\n    //   quantity: \"qty1\",\n    //   status: \"unpaid\",\n    // });\n    // state.data.push({\n    //   title: \"Food4\",\n    //   distance: \"dist1\",\n    //   quantity: \"qty1\",\n    //   status: \"unpaid\",\n    // });\n    // state.data.push({\n    //   title: \"Food2\",\n    //   distance: \"dist1\",\n    //   quantity: \"qty1\",\n    //   status: \"pick\",\n    // });\n    // state.data.push({\n    //   title: \"Food3\",\n    //   distance: \"dist1\",\n    //   quantity: \"qty1\",\n    //   status: \"send\",\n    // });\n    // this.setState({ data: state.data });\n  }\n\n  componentDidUpdate() {\n    if (this.state.isLogin === false) {\n      var auth = {\n        isLogged: false,\n        token: \"\",\n        new_event: true,\n        recommendation_status: false,\n        email: \"\",\n      };\n      if (Cookies.get(\"auth\") !== undefined) {\n        auth = JSON.parse(Cookies.get(\"auth\"))\n        this.getTransactionHistory();\n        this.setState({ isLogin: auth.isLogged });\n      }\n    }\n  }\n\n  getTransactionHistory() {\n    var auth = {\n      isLogged: false,\n      token: \"\",\n      new_event: true,\n      recommendation_status: false,\n      email: \"\",\n    };\n    if (Cookies.get(\"auth\") !== undefined) {\n      auth = JSON.parse(Cookies.get(\"auth\"))\n    }\n\n    let uuid = uuidV4();\n    uuid = uuid.replace(/-/g, \"\");\n    const date = new Date().toISOString();\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\n    Axios(address + \"txn/v1/txn-history/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-request-id\": uuid,\n        \"x-request-timestamp\": date,\n        \"x-client-id\": clientId,\n        \"x-signature\": signature,\n        \"token\": auth.token,\n      },\n      method: \"GET\",\n    })\n      .then((res) => {\n        var results = res.data.results;\n        var stateData = { ...this.state }\n        stateData.data.pop()\n        results.forEach((result) => {\n          stateData.data.push({\n            title: result.merchant_name,\n            distance: \"\",\n            quantity: result.total_product,\n            status: result.status,\n            biz_type: result.biz_type,\n            payment: result.payment_with,\n            transactionId: result.transaction_id,\n            transactionTime: result.transaction_time,\n          })\n        })\n        this.setState({ data: stateData.data });\n      })\n      .catch((err) => {\n      });\n\n  }\n\n  setRegisterDialog(isShow) {\n    this.setState({ showRegisterDialog: isShow })\n    document.body.style.overflowY = ''\n  }\n\n  showRegisterDialog = () => {\n    if (this.state.showRegisterDialog === true) {\n      return (\n        <RegisterDialog\n          isShowRegister={this.state.showRegisterDialog}\n          onHideRegister={() => this.setRegisterDialog(false)}\n        />\n      )\n    }\n  }\n\n  render() {\n    let modal;\n    let modalList = this.state.currentModal.food;\n\n    let modalListView = modalList.map((data) => {\n      return (\n        <Row>\n          <Col>\n            <Row>\n              <Col xs={2} md={1}>\n                <img src={placeholderIcon} class=\"statusFoodIcon\" alt=\"food icon\" />\n              </Col>\n              <Col>\n                <p class=\"statusFoodname\">{data.name}</p>\n                <p class=\"statusFoodPrice\">\n                  {Intl.NumberFormat(\"id-ID\", {\n                    style: \"currency\",\n                    currency: \"IDR\",\n                  }).format(data.price + data.extraprice)}\n                </p>\n              </Col>\n              <Col>\n                <p class=\"statusFoodQuantity\">{data.quantity}x</p>\n              </Col>\n            </Row>\n            <Row>\n              <p class=\"statusFoodNote\">Catatan: {data.note}</p>\n            </Row>\n          </Col>\n        </Row>\n      );\n    });\n    let currentTotal = 0;\n    modalList.forEach((data) => {\n      currentTotal = currentTotal + (data.price + data.extraprice) * data.quantity;\n    });\n    if (this.state.showModal === true) {\n      let payImage;\n      let payLabel;\n      if (this.state.currentModal.payment === \"PAY_BY_CASHIER\") {\n        payImage = cashierStatusIcon;\n        payLabel = \"Cashier\"\n      } else if (this.state.currentModal.payment === \"WALLET\") {\n        payImage = placeholderIcon;\n        payLabel = \"Cash\"\n      } else if (this.state.currentModal.payment === \"VA\") {\n        payImage = placeholderIcon;\n        payLabel = \"Virtual\"\n      } else if (this.state.currentModal.payment === \"WALLET_OVO\") {\n        payImage = ovoIcon;\n        payLabel = \"OVO\"\n      } else if (this.state.currentModal.payment === \"WALLET_DANA\") {\n        payImage = placeholderIcon;\n        payLabel = \"DANA\"\n      }\n      modal = (\n        <Modal\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n          show={() => this.setModal(true)}\n          onHide={() => this.setModal(false)}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              <p class=\"statusNoteLabel\">No Pesanan.</p>\n              <p class=\"statusNoteHeader\">{this.state.currentModal.transactionId}</p>\n              <p class=\"statusNoteLabel\">{this.state.currentModal.transactionTime}</p>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Row>\n              <Col xs={2} md={1}>\n                <img src={categoryFoodIcon} class=\"statusStoreIcon\" alt=\"category icon\" />\n              </Col>\n              <Col>\n                <p class=\"statusStoreName\">\n                  {this.state.currentModal.storeName}\n                </p>\n                <p class=\"statusStoreLabel\">store location</p>\n                <p class=\"statusStoreLocation\">\n                  {this.state.currentModal.storeLocation}\n                </p>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={2} md={1}>\n                <img src={pickupStatusIcon} class=\"statusStoreStatusIcon\" alt=\"pickup status\" />\n              </Col>\n              <Col>\n                <span class=\"statusStoreLabel\">status: </span>\n                <span class=\"statusStoreStatus\">\n                  {this.state.currentModal.status}\n                </span>\n                <span class=\"statusStoreDistance\">\n                  {this.state.currentModal.storeDistance}\n                </span>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <p class=\"statusStorePaymentLabel\">Metode Pembayaran</p>\n                <img src={payImage} class=\"statusFoodIcon\" alt=\"status icon\"></img>\n                <span class=\"statusStorePayment\">\n                  {payLabel}\n                </span>\n              </Col>\n            </Row>\n            {modalListView}\n            <Row>\n              <Col>\n                <p class=\"statusStoreTotal\">Total Pembayaran</p>\n              </Col>\n              <Col>\n                {Intl.NumberFormat(\"id-ID\", {\n                  style: \"currency\",\n                  currency: \"IDR\",\n                }).format(currentTotal)}\n              </Col>\n            </Row>\n          </Modal.Body>\n          <Modal.Footer />\n        </Modal>\n      );\n    } else {\n      modal = <></>;\n    }\n    let notPaidImage;\n    let contentView;\n\n    let currentState = this.state.activeTab;\n    if (currentState === 1) {\n      notPaidImage = unpaidActiveIcon;\n      contentView = this.state.data.map((value) => {\n        let bizImage;\n        let bizLabel;\n        let payImage;\n        let payLabel;\n        if (value.payment === \"PAY_BY_CASHIER\") {\n          payImage = cashierStatusIcon;\n          payLabel = \"Cashier\"\n        } else if (value.payment === \"WALLET\") {\n          payImage = placeholderIcon;\n          payLabel = \"Cash\"\n        } else if (value.payment === \"VA\") {\n          payImage = placeholderIcon;\n          payLabel = \"Virtual\"\n        } else if (value.payment === \"WALLET_OVO\") {\n          payImage = ovoIcon;\n          payLabel = \"OVO\"\n        } else if (value.payment === \"WALLET_DANA\") {\n          payImage = placeholderIcon;\n          payLabel = \"DANA\"\n        }\n        if (value.biz_type === \"DINE_IN\") {\n          bizImage = dineinIcon\n          bizLabel = \"Dine in\"\n        } else if (value.biz_type === \"TAKE_AWAY\") {\n          bizImage = takeawayIcon;\n          bizLabel = \"Take away\"\n        }\n        if (value.status === \"OPEN\") {\n          return (\n            <Row className={\"statusCard\"}>\n              <Col xs={1} md={1} />\n              <Col>\n                <Card>\n                  <Row className={\"statusCard\"}>\n                    <Col xs={1} md={1}>\n                      <img\n                        src={categoryFoodIcon}\n                        class=\"statusIcon\"\n                        alt={\"statusIcon\"}\n                      ></img>\n                    </Col>\n                    <Col>\n                      <p class=\"statusTitle\">{value.title}</p>\n                      <p class=\"statusDistance\">{value.distance}</p>\n                      <p class=\"statusQty\">{value.quantity} produk</p>\n                      <PikaButton\n                        title={\"Detail\"}\n                        buttonStyle={\"statusPika\"}\n                        handleClick={() => this.handleDetail(value.transactionId)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col className={\"statusLeftImg\"}>\n                      <img src={bizImage} alt=\"biz icon\"></img>\n                      <span class=\"statusLeftText\">{bizLabel}</span>\n                    </Col>\n                    <Col className={\"statusRightImg\"}>\n                      <img src={payImage} alt=\"pay icon\"></img>\n                      <span class=\"statusRightText\">{payLabel}</span>\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n              <Col xs={1} md={1} />\n            </Row>\n          );\n        }\n      });\n    } else {\n      notPaidImage = unpaidIcon;\n    }\n\n    let packImage;\n    if (currentState === 2) {\n      packImage = packActiveIcon;\n      let data = this.state.data;\n      contentView = data.map((value) => {\n        let bizImage;\n        let bizLabel;\n        let payImage;\n        let payLabel;\n        if (value.payment === \"PAY_BY_CASHIER\") {\n          payImage = placeholderIcon;\n          payLabel = \"Cashier\"\n        } else if (value.payment === \"WALLET\") {\n          payImage = placeholderIcon;\n          payLabel = \"Cash\"\n        } else if (value.payment === \"VA\") {\n          payImage = placeholderIcon;\n          payLabel = \"Virtual\"\n        } else if (value.payment === \"WALLET_OVO\") {\n          payImage = ovoIcon;\n          payLabel = \"OVO\"\n        } else if (value.payment === \"WALLET_DANA\") {\n          payImage = placeholderIcon;\n          payLabel = \"DANA\"\n        }\n        if (value.biz_type === \"DINE_IN\") {\n          bizImage = dineinIcon\n          bizLabel = \"Dine in\"\n        } else if (value.biz_type === \"TAKE_AWAY\") {\n          bizImage = takeawayIcon;\n          bizLabel = \"Take away\"\n        }\n        if (value.biz_type === \"DINE_IN\") {\n          bizImage = dineinIcon\n          bizLabel = \"Dine in\"\n        } else if (value.biz_type === \"TAKE_AWAY\") {\n          bizImage = takeawayIcon;\n          bizLabel = \"Take away\"\n        }\n        if (value.status === \"PAID\" || value.status === \"MERCHANT_CONFIRM\" || value.status === \"CUSTOMER_ACCEPTED\") {\n          return (\n            <Row className={\"statusCard\"}>\n              <Col xs={1} md={1} />\n              <Col>\n                <Card>\n                  <Row className={\"statusCard\"}>\n                    <Col xs={1} md={1}>\n                      <img\n                        src={categoryFoodIcon}\n                        class=\"statusIcon\"\n                        alt={\"statusIcon\"}\n                      ></img>\n                    </Col>\n                    <Col>\n                      <p class=\"statusTitle\">{value.title}</p>\n                      <p class=\"statusDistance\">{value.distance}</p>\n                      <p class=\"statusQty\">{value.quantity} produk</p>\n                      <PikaButton\n                        title={\"Detail\"}\n                        buttonStyle={\"statusPika\"}\n                        handleClick={() => this.handleDetail(value.transactionId)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col className={\"statusLeftImg\"}>\n                      <img src={bizImage} alt=\"biz icon\"></img>\n                      <span class=\"statusLeftText\">{bizLabel}</span>\n                    </Col>\n                    <Col className={\"statusRightImg\"}>\n                      <img src={payImage} alt=\"pay icon\"></img>\n                      <span class=\"statusRightText\">{payLabel}</span>\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n              <Col xs={1} md={1} />\n            </Row>\n          );\n        }\n      });\n    } else {\n      packImage = packIcon;\n    }\n\n    let sendImage;\n    if (currentState === 3) {\n      sendImage = sendActiveIcon;\n      let data = this.state.data;\n      contentView = data.map((value) => {\n        let bizImage;\n        let bizLabel;\n        let payImage;\n        let payLabel;\n        if (value.payment === \"PAY_BY_CASHIER\") {\n          payImage = placeholderIcon;\n          payLabel = \"Cashier\"\n        } else if (value.payment === \"WALLET\") {\n          payImage = placeholderIcon;\n          payLabel = \"Cash\"\n        } else if (value.payment === \"VA\") {\n          payImage = placeholderIcon;\n          payLabel = \"Virtual\"\n        } else if (value.payment === \"WALLET_OVO\") {\n          payImage = ovoIcon;\n          payLabel = \"OVO\"\n        } else if (value.payment === \"WALLET_DANA\") {\n          payImage = placeholderIcon;\n          payLabel = \"DANA\"\n        }\n        if (value.biz_type === \"DINE_IN\") {\n          bizImage = dineinIcon\n          bizLabel = \"Dine in\"\n        } else if (value.biz_type === \"TAKE_AWAY\") {\n          bizImage = takeawayIcon;\n          bizLabel = \"Take away\"\n        }\n        if (value.biz_type === \"DINE_IN\") {\n          bizImage = dineinIcon\n          bizLabel = \"Dine in\"\n        } else if (value.biz_type === \"TAKE_AWAY\") {\n          bizImage = takeawayIcon;\n          bizLabel = \"Take away\"\n        }\n        if (value.status === \"DELIVER\" || value.status === \"ON_PROCESS\") {\n          return (\n            <Row className={\"statusCard\"}>\n              <Col xs={1} md={1} />\n              <Col>\n                <Card>\n                  <Row className={\"statusCard\"}>\n                    <Col xs={1} md={1}>\n                      <img\n                        src={categoryFoodIcon}\n                        class=\"statusIcon\"\n                        alt={\"statusIcon\"}\n                      ></img>\n                    </Col>\n                    <Col>\n                      <p class=\"statusTitle\">{value.title}</p>\n                      <p class=\"statusDistance\">{value.distance}</p>\n                      <p class=\"statusQty\">{value.quantity} produk</p>\n                      <PikaButton\n                        title={\"Detail\"}\n                        buttonStyle={\"statusPika\"}\n                        handleClick={() => this.handleDetail(value.transactionId)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col className={\"statusLeftImg\"}>\n                      <img src={bizImage} alt=\"biz icon\"></img>\n                      <span class=\"statusLeftText\">{bizLabel}</span>\n                    </Col>\n                    <Col className={\"statusRightImg\"}>\n                      <img src={payImage} alt=\"pay icon\"></img>\n                      <span class=\"statusRightText\">{payLabel}</span>\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n              <Col xs={1} md={1} />\n            </Row>\n          );\n        }\n      });\n    } else {\n      sendImage = sendIcon;\n    }\n\n    let reviewImage;\n    if (currentState === 4) {\n      reviewImage = reviewActiveIcon;\n      let data = this.state.data;\n      contentView = data.map((value) => {\n        if (value.status === \"CLOSE\" || value.status === \"FINALIZE\") {\n          let bizImage;\n          let bizLabel;\n          let payImage;\n          let payLabel;\n          if (value.payment === \"PAY_BY_CASHIER\") {\n            payImage = placeholderIcon;\n            payLabel = \"Cashier\"\n          } else if (value.payment === \"WALLET\") {\n            payImage = placeholderIcon;\n            payLabel = \"Cash\"\n          } else if (value.payment === \"VA\") {\n            payImage = placeholderIcon;\n            payLabel = \"Virtual\"\n          } else if (value.payment === \"WALLET_OVO\") {\n            payImage = ovoIcon;\n            payLabel = \"OVO\"\n          } else if (value.payment === \"WALLET_DANA\") {\n            payImage = placeholderIcon;\n            payLabel = \"DANA\"\n          }\n          if (value.biz_type === \"DINE_IN\") {\n            bizImage = dineinIcon\n            bizLabel = \"Dine in\"\n          } else if (value.biz_type === \"TAKE_AWAY\") {\n            bizImage = takeawayIcon;\n            bizLabel = \"Take away\"\n          }\n          if (value.biz_type === \"DINE_IN\") {\n            bizImage = dineinIcon\n            bizLabel = \"Dine in\"\n          } else if (value.biz_type === \"TAKE_AWAY\") {\n            bizImage = takeawayIcon;\n            bizLabel = \"Take away\"\n          }\n          return (\n            <Row className={\"statusCard\"}>\n              <Col xs={1} md={1} />\n              <Col>\n                <Card>\n                  <Row className={\"statusCard\"}>\n                    <Col xs={1} md={1}>\n                      <img\n                        src={categoryFoodIcon}\n                        class=\"statusIcon\"\n                        alt={\"statusIcon\"}\n                      ></img>\n                    </Col>\n                    <Col>\n                      <p class=\"statusTitle\">{value.title}</p>\n                      <p class=\"statusDistance\">{value.distance}</p>\n                      <p class=\"statusQty\">{value.quantity} produk</p>\n                      <PikaButton\n                        title={\"Detail\"}\n                        buttonStyle={\"statusPika\"}\n                        handleClick={() => this.handleDetail(value.transactionId)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col className={\"statusLeftImg\"}>\n                      <img src={bizImage} alt=\"biz icon\"></img>\n                      <span class=\"statusLeftText\">{bizLabel}</span>\n                    </Col>\n                    <Col className={\"statusRightImg\"}>\n                      <img src={payImage} alt=\"pay icon\"></img>\n                      <span class=\"statusRightText\">{payLabel}</span>\n                    </Col>\n                  </Row>\n                </Card>\n              </Col>\n              <Col xs={1} md={1} />\n            </Row>\n          );\n        }\n      });\n    } else {\n      reviewImage = reviewIcon;\n    }\n\n    return (\n      <>\n        <Nav variant=\"tabs\" defaultActiveKey={\"not-paid\"}>\n          <Nav.Item>\n            <Nav.Link\n              eventKey={\"not-paid\"}\n              onClick={() => this.handleSelect(1)}\n            >\n              <Row>\n                <img\n                  src={notPaidImage}\n                  alt={\"unpaid\"}\n                  className={\"statusTabIcon\"}\n                />\n              </Row>\n              <Row className={\"statusTabTitle\"}>Belum Bayar</Row>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={\"pack\"} onClick={() => this.handleSelect(2)}>\n              <Row>\n                <img src={packImage} alt={\"pack\"} className={\"statusTabIcon\"} />\n              </Row>\n              <Row className={\"statusTabTitle\"}>Dikemas</Row>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={\"send\"} onClick={() => this.handleSelect(3)}>\n              <Row>\n                <img src={sendImage} alt={\"send\"} className={\"statusTabIcon\"} />\n              </Row>\n              <Row className={\"statusTabTitle\"}>Siap / Dikirim</Row>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey={\"review\"} onClick={() => this.handleSelect(4)}>\n              <Row>\n                <img\n                  src={reviewImage}\n                  alt={\"review\"}\n                  className={\"statusTabIcon\"}\n                />\n              </Row>\n              <Row className={\"statusTabTitle\"}>Beri Penilaian</Row>\n            </Nav.Link>\n          </Nav.Item>\n        </Nav>\n        {contentView}\n        {modal}\n        {this.showRegisterDialog()}\n      </>\n    );\n  }\n}\n","/home/devweb/pikapp-web/src/Redux/Reducers/AllReducers.js",["237"],"const INITIAL_STATE = {\n    buttonLoad: true,\n    validQTY: 0,\n    openSelect: false,\n    foodCateg: '',\n    checkboxes: [],\n    checkboxesTotal: [],\n    mandatCheckCond: false,\n    mandatCheck: false,\n    radiobutton: [],\n    mandatRadioCond: false,\n    mandatRadio: false,\n    totalAmountProd: 0,\n    openMenuCart: false,\n}\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case \"LOADING\":\n            return { ...state, buttonLoad: false }\n        case \"DONELOAD\":\n            return { ...state, buttonLoad: true }\n        case \"VALIDATIONQTY\":\n            return { ...state, validQTY: action.payload }\n        case \"OPENSELECT\":\n            return { ...state, openSelect: action.payload }\n        case \"FOODCATEG\":\n            return { ...state, foodCateg: action.payload }\n        case \"CHECKBOXES\":\n            return { ...state, checkboxes: action.payload }\n        case \"MANDATCHECKCOND\":\n            return { ...state, mandatCheckCond: action.payload }\n        case \"MANDATCHECK\":\n            return { ...state, mandatCheck: action.payload }\n        case \"COUNTCHECKBOX\":\n            return { ...state, checkboxesTotal: action.payload }\n        case \"RADIOBUTTON\":\n            return { ...state, radiobutton: action.payload }\n        case \"MANDATRADIOCOND\":\n            return { ...state, mandatRadioCond: action.payload }\n        case \"MANDATRADIO\":\n            return { ...state, mandatRadio: action.payload }\n        case \"COUNTTOTAL\":\n            return { ...state, totalAmountProd: action.payload }\n        case \"EDITCART\":\n            return { ...state, openMenuCart: action.payload }\n        case \"DEFAULTSTATE\":\n            return INITIAL_STATE\n        default:\n            return state\n    }\n}","/home/devweb/pikapp-web/src/Redux/Reducers/AuthenticationReducers.js",["238"],"const INITIAL_STATE = {\n    dataRegister : {},\n    dataLogin : {},\n    isLoginStep : false,\n    dataResetPin : {},\n    dataPin : '',\n    dataPinToken: '',\n    isMerchantQR: false,\n}\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case \"REGISTER\" :\n            return {...state, dataRegister: action.payload}\n        case \"LOGIN\" :\n            return {...state, dataLogin: action.payload}\n        case \"LOGINSTEP\" :\n            return {...state, isLoginStep: action.payload}\n        case \"RESETPIN\" :\n            return {...state, dataResetPin: action.payload}\n        case \"PIN\" :\n            return {...state, dataPin: action.payload}\n        case \"PINTOKEN\" :\n            return {...state, dataPinToken: action.payload}\n        case \"ISMERCHANTQR\":\n            return { ...state, isMerchantQR: action.payload }\n        default:\n            return state\n    }\n}","/home/devweb/pikapp-web/src/Asset/Constant/APIConstant.js",["239","240","241"],"export const address = \"https://dev-api.pikapp.id/\";\n// export const address = \"https://api.pikapp.id/\";\n\nvar secretDev = \"21f6fc80-cfdb-11ea-87d0-0242ac130003\"\nvar secretProd = \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\"\nexport const secret = secretDev;\n\nvar clientIdDev = \"abf0e2a9-e9ee-440f-8563-94481c64b797\"\nvar clientIdProd = \"d4aummjdkbzdsd46vygjvcy235ywmhkm\"\nexport const clientId = clientIdDev;\n// googleKeyDev need to activate billing which later should pay after expired\nvar googleKeyProd = \"AIzaSyBMG_JpxmoPEBH6fpveaowU2vkWYrZEw1Y\"\nvar googleKeyDev = \"AIzaSyAikqroR5x4BrRv5Yj-tWgUcqvjEKUysh4\"\nexport const googleKey = googleKeyDev;\n\nexport const jwtSecret = \"Er3lzchUa489bdlg35PCaGMKk2YzflBHCMue2jIAy9nFENvokE0JUbwytMFSvrajK8gYDttMdvzWw0OBRydt7pXfAAd1DTxWvE0Hc\"\n","/home/devweb/pikapp-web/src/Component/Button/PikaButton.js",[],"/home/devweb/pikapp-web/src/Component/Modal/NotifModal.js",[],"/home/devweb/pikapp-web/src/Component/Tour/TourPage.js",["242"],"import React, {useState} from \"react\";\nimport Tour from 'reactour';\nimport Button from \"react-bootstrap/Button\";\nimport '../../Asset/scss/TourPage.scss';\n\n// const tour_steps = [\n//     {\n//         selector: '.merchantList-layout',\n//         content: 'This is my first Step'\n//     }\n// ];\n\nconst TourPage = (props) => {\n    // const [isTourOpen, setIsTourOpen] = useState(false);\n    const tour_steps = props.stepsContent;\n    const isTourOpen = props.isShowTour;\n    const isTourClose = props.isHideTour;\n\n    return (\n        <>\n            <Tour\n                steps={tour_steps}\n                isOpen={isTourOpen}\n                onRequestClose={isTourClose}\n                showNumber={false}\n                rounded={10}\n                nextButton={<Button style={{ backgroundColor: \"#4056C6\" }}>Selanjutnya</Button>}\n                prevButton={<Button style={{ backgroundColor: \"#4056C6\" }}>Lewati</Button>}\n                lastStepNextButton={<Button style={{ backgroundColor: \"#4056C6\" }}>Selesai</Button>}\n                onAfterOpen={target => (document.body.style.overflowY = 'hidden')}\n                onBeforeClose={target => (document.body.style.overflowY = 'auto')}\n                className={\"tourpage\"}\n            />\n        </>\n      );\n    };\n    \nexport default TourPage;\n","/home/devweb/pikapp-web/src/Component/TextField/PikaTextField.js",[],"/home/devweb/pikapp-web/src/Component/Authentication/RegisterDialog.js",["243","244","245","246","247","248","249","250","251","252","253","254","255"],"import React, { useState } from \"react\";\nimport '../../Asset/scss/AuthenticationDialog.scss'\nimport closeLogo from '../../Asset/Icon/close.png'\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport PikaButton from \"../../Component/Button/PikaButton\";\nimport PikaTextField from \"../../Component/TextField/PikaTextField\";\nimport LoginDialog from \"../Authentication/LoginDialog\";\nimport PinDialog from \"./PinDialog\";\nimport ConfirmPinDialog from \"./ConfirmPinDialog\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport ForgotPin from \"./ForgotPinDialog\";\n\nconst RegisterDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const AuthRedu = useSelector(state => state.AuthRedu);\n    const [loginDialog, setLogin] = useState(false);\n    const [pinDialog, setPin] = useState(false);\n    const [confirmPinDialog, setConfirmPin] = useState(false);\n    const [forgotPinDialog, setForgotPin] = useState(false);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [isCaptcha, setIsCaptcha] = useState(false);\n    const [captchaCounter, setCaptchaCounter] = useState(0);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [lat, setLat] = useState('');\n    const [lon, setLon] = useState('');\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    // if(AuthRedu.dataRegister) {\n    //     setName(AuthRedu.dataRegister.full_name);\n    //     setEmail(AuthRedu.dataRegister.email);\n    //     setPhone(AuthRedu.dataRegister.phone_number);\n    // }\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHideRegister()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHideRegister()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const openLoginDialog = () => {\n        setLogin(true);\n    }\n\n    const showLoginDialog = () => {\n        if (loginDialog) {\n            return (\n                <LoginDialog\n                    isShowLogin={loginDialog}\n                    onHideLogin={() => setLogin(false)}\n                />\n            )\n        }\n    }\n\n    const openPinDialog = (e) => {\n        if (checkEmail() === false) {\n            setIsValid(false);\n            return;\n        }\n        if (checkName() === false) {\n            setIsValid(false);\n            return;\n        }\n        if (checkPhone() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        // this.props.LoadingButton()\n        setIsValid(true);\n\n        const data = {\n            full_name: name,\n            phone_number: phone,\n            email: email\n        };\n\n        dispatch({ type: 'REGISTER', payload: data });\n        dispatch({ type: 'LOGINSTEP', payload: false });\n\n        setPin(true);\n        // setConfirmPin(true);\n        // setForgotPin(true);\n        // props.onHideRegister();\n    }\n\n    const showPinDialog = () => {\n        if (pinDialog) {\n            return (\n                <PinDialog\n                    isShowPin={pinDialog}\n                    onHidePin={() => setPin(false)}\n                />\n            )\n        }\n    }\n\n    const handleName = (e) => {\n        setName(e.target.value);\n    }\n\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    }\n\n    const handlePhone = (e) => {\n        setPhone(e.target.value);\n    }\n\n    const checkEmail = () => {\n        let emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (emailRegex.test(email)) {\n            return true;\n        } else {\n            setErrorMsg(\"Email is not valid.\");\n            return false;\n        }\n    }\n\n    const checkName = () => {\n        if (name.length > 0) {\n            return true;\n        } else {\n            setErrorMsg(\"Name cannot be empty.\");\n            return false;\n        }\n    };\n\n    const checkPhone = () => {\n        if (phone.startsWith(\"08\")) {\n            return true;\n        } else {\n            setErrorMsg(\"Phone not valid.\");\n            return false;\n        }\n    };\n\n    const onChange = (value) => {\n        console.log(value);\n    }\n\n    const closeRegisterFlowDialog = () => {\n        setConfirmPin(false);\n        props.onHideRegister();\n    }\n\n    const closeLoginFlowDialog = () => {\n        setPin(false);\n        props.onHideRegister();\n    }\n\n    const closeForgotFlowDialog = () => {\n        setForgotPin(false);\n        props.onHideRegister();\n    }\n\n    const showDialog = (value) => {\n        if(pinDialog) {\n            return (\n                <PinDialog\n                    isShowPin={pinDialog}\n                    onHidePin={() => setPin(false)}\n                    onShowConfirm={() => setConfirmPin(true)}\n                    onShowForgotPin={() => setForgotPin(true)}\n                    onHideLoginFlow={closeLoginFlowDialog}\n                />\n            )\n        } else if(loginDialog){\n            return (\n                <LoginDialog\n                    isShowLogin={loginDialog}\n                    onHideLogin={() => setLogin(false)}\n                    onShowPin={() => setPin(true)}\n                />\n            )\n        } \n        else if(confirmPinDialog) {\n            return (\n                <ConfirmPinDialog\n                    isShowConfirmPin={confirmPinDialog}\n                    onHideConfirmPin={() => setConfirmPin(false)}\n                    onHideRegisterFlow={closeRegisterFlowDialog}\n                />\n            )\n        }\n        else if (forgotPinDialog) {\n            return (\n                <ForgotPin\n                    isShowForgotPin={forgotPinDialog}\n                    onHideForgotPin={() => setForgotPin(false)}\n                    onHideForgotFlow={closeForgotFlowDialog}\n                />\n            )\n        }\n        else {\n            return (\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Selangkah Lagi Sebelum Memesan!\n                    </div>\n\n                    <div className='textfield-auth'>\n                        <input type='text' className='textfieldinput-auth' placeholder=\"Nama Lengkap\" onChange={handleName} />\n                        <input type='tel' className='textfieldinput-auth' placeholder=\"Nomor Handphone (Whatsapp)\" onChange={handlePhone} />\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\n\n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    {!isCaptcha || (\n                                        <ReCAPTCHA sitekey=\"asd\" onChange={onChange} />\n                                    )}\n                                </Col>\n                                <Col />\n                            </Row>\n\n                            <Row>\n                                <Col xs={6}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                </Col>\n                                <Col />\n                            </Row>\n                        \n                            <div className='buttonSide-auth'>\n                                <p className=\"linkWords\" onClick={openLoginDialog}>LOGIN SAJA</p>\n                                <div className=\"submitButton-auth\" onClick={openPinDialog}>\n                                    <div className=\"wordsButton-auth\">\n                                        NEXT\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className='bottomSide-auth'>\n                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                <div className='reqSide-auth'>\n                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                </div>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='modalMenuDetail-auth' style={{\n                    display: props.isShowRegister ? 'block' : 'none'\n                }} onClick={closeModal}\n                >\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\n                        {\n                            <span className='iconClose-auth' onClick={closeModal}>\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\n                            </span>\n                        }\n\n                        <div className='menuDetail-layout-auth'>\n                            <div className='menuContain-all-auth'>\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\n\n                                {showDialog()}\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                :\n                <div className='modalMenuDetail-auth' style={{\n                    display: props.isShowRegister ? 'block' : 'none'\n                }} onClick={closeModal}\n                >\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\n                        {\n                            <span className='iconClose-auth' onClick={closeModal}>\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\n                            </span>\n                        }\n\n                        <div className='menuDetail-layout-auth'>\n                            <div className='menuContain-all-auth'>\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\n\n                                {showDialog()}\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default RegisterDialog","/home/devweb/pikapp-web/src/Component/Authentication/ResetPin/ConfirmResetPinDialog.js",["256","257","258","259"],"import React, { useState } from \"react\";\nimport '../../../Asset/scss/AuthenticationDialog.scss';\nimport closeLogo from '../../../Asset/Icon/close.png';\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PinInput from \"react-pin-input\";\nimport pikappLogo from '../../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { address, clientId } from \"../../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport Swal from 'sweetalert2';\nimport Cookies from \"js-cookie\";\nimport PikaButton from \"../../../Component/Button/PikaButton\";\n\nconst ConfirmResetPinDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const AuthRedu = useSelector(state => state.AuthRedu);\n    const [confirmResetPin, setConfirmResetPin] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [isCaptcha, setIsCaptcha] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [successStatus, setSuccessStatus] = useState(false);\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHideConfirmResetPin()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHideConfirmResetPin()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const backToHome = (e) => {\n        window.location.href = '/'\n    }\n\n    const handleConfirmResetPin = (e) => {\n        setConfirmResetPin(e);\n    }\n\n    const checkConfirmResetPin = () => {\n        if (AuthRedu.dataResetPin.currentPin === confirmResetPin) {\n            return true;\n          } else {\n            setErrorMsg(\"PIN does not match.\");\n            return false;\n          }\n    };\n\n    const handleResetPin = (e) => {\n        if (checkConfirmResetPin() === false) {\n            setIsValid(false);\n            return;\n        }\n        setIsValid(true);\n        dispatch({ type: 'LOADING' });\n\n        const data = {\n            // email: email\n            pin : confirmResetPin\n        };\n\n        let uuid = uuidV4();\n        uuid = uuid.replace(/-/g, \"\");\n        const date = new Date().toISOString();\n        axios(address + \"auth/reset-pin/\" + AuthRedu.dataPinToken + \"/\", {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-request-id\": uuid,\n                \"x-request-timestamp\": date,\n                \"x-client-id\": clientId,\n            },\n            method: \"POST\",\n            data: data,\n        })\n            .then((res) => {\n                setSuccessStatus(true);\n                var lastLink = { value: window.location.origin}\n                Cookies.set(\"lastLink\", lastLink,{ expires: 1});\n                localStorage.clear();\n                Cookies.remove(\"auth\");\n                dispatch({ type: 'DONELOAD' });\n                // props.DoneLoad();\n                // window.location.reload();\n            })\n            .catch((err) => {\n                if (err.response.data !== undefined) {\n                    alert(err.response.data.err_message);\n                    // setSuccessStatus(true);\n                    // props.DoneLoad()\n                    dispatch({ type: 'DONELOAD' });\n                }\n            });\n\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='modalMenuDetail-auth' style={{\n                    display: props.isShowConfirmResetPin ? 'block' : 'none'\n                }} onClick={closeModal}\n                >\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\n                        {\n                            <span className='iconClose-auth' onClick={closeModal}>\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\n                            </span>\n                        }\n\n                        <div className='menuDetail-layout-auth'>\n                            <div className='menuContain-all-auth'>\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\n\n                                <div className='menu-detail-auth'>\n                                    {\n                                        !successStatus ?\n                                        <div className='menu-name-auth'>\n                                            Perbarui PIN Anda \n                                        </div>\n                                        :\n                                        <div className='menu-name-auth'>\n                                            PIN Anda Berhasil Diubah! \n                                        </div>\n                                    }\n\n                                    {\n                                        !successStatus ?\n                                        <div className='mob-menu-category-auth'>\n                                            Konfirmasi 6 digit nomor PIN baru Anda\n                                        </div>\n                                        :\n                                        <div className='mob-menu-category-auth'>\n                                            Silahkan lakukan login kembali untuk memesan\n                                        </div>\n\n                                    }\n\n                                    {\n                                        !successStatus ?\n                                        <div>\n                                            <Form>\n                                                <Row>\n                                                    <Col xs={11}>\n                                                        <PinInput\n                                                        length={6}\n                                                        focus\n                                                        // disabled\n                                                        secret\n                                                        ref={p => (pin => p)}\n                                                        type=\"number\"\n                                                        inputMode=\"numeric\"\n                                                        onChange={handleConfirmResetPin}\n                                                        />\n                                                        <div></div>\n                                                    </Col>\n                                                </Row>\n\n                                                <Row>\n                                                    <Col xs={11}>\n                                                    {isValid || (\n                                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                                    )}\n                                                    </Col>\n                                                    <Col />\n                                                </Row>\n                                                \n                                            </Form>\n                                            \n                                            <div className='buttonSide-auth'>\n                                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n\n                                                {/* <div className=\"submitButton-auth\" onClick={handleResetPin}>\n                                                    <div className=\"wordsButton-auth\">\n                                                        SUBMIT\n                                                    </div>\n                                                </div> */}\n\n                                                <div className=\"submitButton-auth\" onClick={handleResetPin}>\n                                                    <PikaButton \n                                                        title=\"SUBMIT\" \n                                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                                        handleClick={handleResetPin}\n                                                        >\n                                                    </PikaButton>\n                                                </div>\n\n                                            </div>\n        \n                                            <div className='bottomSide-auth'>\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                                <div className='reqSide-auth'>\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                                </div>\n                                            </div>\n                                            \n                                        </div>\n                                        :\n                                        <div>\n\n                                            <div className=\"blankSpace\">\n\n                                            </div>\n\n                                            <div className='buttonSide-auth'>\n                                                <p className=\"linkWords\" onClick={backToHome}>KEMBALI KE HOME</p>\n                                            </div>\n        \n                                            <div className='bottomSide-auth'>\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                                <div className='reqSide-auth'>\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                                </div>\n                                            </div>\n                                            \n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n                :\n                <div className='modalMenuDetail-auth' style={{\n                    display: props.isShowConfirmResetPin ? 'block' : 'none'\n                }} onClick={closeModal}\n                >\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\n                        {\n                            <span className='iconClose-auth' onClick={closeModal}>\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\n                            </span>\n                        }\n\n                        <div className='menuDetail-layout-auth'>\n                            <div className='menuContain-all-auth'>\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\n\n                                <div className='menu-detail-auth'>\n                                    {\n                                        !successStatus ?\n                                        <div className='menu-name-auth'>\n                                            Perbarui PIN Anda \n                                        </div>\n                                        :\n                                        <div className='menu-name-auth'>\n                                            PIN Anda Berhasil Diubah! \n                                        </div>\n                                    }\n\n                                    {\n                                        !successStatus ?\n                                        <div className='mob-menu-category-auth'>\n                                            Konfirmasi 6 digit nomor PIN baru Anda\n                                        </div>\n                                        :\n                                        <div className='mob-menu-category-auth'>\n                                            Silahkan lakukan login kembali untuk memesan\n                                        </div>\n\n                                    }\n\n                                    {\n                                        !successStatus ?\n                                        <div>\n                                            <Form>\n                                                <Row>\n                                                    <Col xs={11}>\n                                                        <PinInput\n                                                        length={6}\n                                                        focus\n                                                        // disabled\n                                                        secret\n                                                        ref={p => (pin => p)}\n                                                        type=\"number\"\n                                                        inputMode=\"numeric\"\n                                                        onChange={handleConfirmResetPin}\n                                                        />\n                                                        <div></div>\n                                                    </Col>\n                                                </Row>\n\n                                                <Row>\n                                                    <Col xs={11}>\n                                                    {isValid || (\n                                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                                    )}\n                                                    </Col>\n                                                    <Col />\n                                                </Row>\n                                                \n                                            </Form>\n                                            \n                                            <div className='buttonSide-auth'>\n                                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n\n                                                {/* <div className=\"submitButton-auth\" onClick={handleResetPin}>\n                                                    <div className=\"wordsButton-auth\">\n                                                        SUBMIT\n                                                    </div>\n                                                </div> */}\n\n                                                <div className=\"submitButton-auth\" onClick={handleResetPin}>\n                                                    <PikaButton \n                                                        title=\"SUBMIT\" \n                                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                                        handleClick={handleResetPin}\n                                                        >\n                                                    </PikaButton>\n                                                </div>\n\n                                            </div>\n        \n                                            <div className='bottomSide-auth'>\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                                <div className='reqSide-auth'>\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                                </div>\n                                            </div>\n                                            \n                                        </div>\n                                        :\n                                        <div>\n\n                                            <div className='buttonSide-auth top270'>\n                                                <p className=\"linkWords\" onClick={backToHome}>KEMBALI KE HOME</p>\n                                            </div>\n        \n                                            <div className='bottomSide-auth'>\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                                <div className='reqSide-auth'>\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                                </div>\n                                            </div>\n                                            \n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ConfirmResetPinDialog","/home/devweb/pikapp-web/src/Redux/Actions/index.js",[],"/home/devweb/pikapp-web/src/Component/Authentication/ForgotPinDialog.js",["260","261","262","263","264"],"import React, { useState } from \"react\";\nimport '../../Asset/scss/AuthenticationDialog.scss'\nimport closeLogo from '../../Asset/Icon/close.png'\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport Swal from 'sweetalert2';\nimport PikaButton from \"../../Component/Button/PikaButton\";\n\nconst ForgotPinDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const [email, setEmail] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [isCaptcha, setIsCaptcha] = useState(false);\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHideForgotPin()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHideForgotPin()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    }\n\n    const checkEmail = () => {\n        let emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (emailRegex.test(email)) {\n            return true;\n        } else {\n            setErrorMsg(\"Email is not valid.\");\n            return false;\n        }\n    }\n\n    const handleSubmit = () => {\n        if (checkEmail() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        setIsValid(true);\n        dispatch({ type: 'LOADING' });\n\n        const data = {\n            email: email\n        };\n\n        let uuid = uuidV4();\n        uuid = uuid.replace(/-/g, \"\");\n        const date = new Date().toISOString();\n        axios(address + \"auth/forget-pin\", {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-request-id\": uuid,\n                \"x-request-timestamp\": date,\n                \"x-client-id\": clientId,\n            },\n            method: \"POST\",\n            data: data,\n        })\n            .then((res) => {\n                Swal.fire({\n                    position: 'top',\n                    icon: 'success',\n                    text: 'Link verifikasi telah dikirim ke alamat email Anda. Segera lakukan reset PIN untuk melanjutkan proses ini.',\n                    showConfirmButton: true,\n                    confirmButtonColor: \"#4bb7ac\",\n                    confirmButtonText: \"OK\",\n                    closeOnConfirm: false,\n                    // timer: 3000\n                }).then(() => {\n                    props.onHideForgotFlow();\n                    dispatch({ type: 'DONELOAD' });\n                })\n                // window.location.reload();\n            })\n            .catch((err) => {\n                if (err.response.data !== undefined) {\n                    alert(err.response.data.err_message)\n                    // props.DoneLoad()\n                    dispatch({ type: 'DONELOAD' });\n                }\n            });\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Lupa PIN ?\n                    </div>\n\n                    <div className='mob-menu-category-auth'>\n                        Silahkan masukkan email Anda yang terdaftar.\n                    </div>\n\n                    <div className='textfield-auth'>\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\n\n                            <Form>\n                                <Row>\n                                    <Col xs={11}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                    </Col>\n                                    <Col />\n                                </Row>\n                                \n                            </Form>\n\n                            <div className='buttonSide-auth'>\n                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n\n                                {/* <div className=\"submitButton-auth\">\n                                    <div className=\"wordsButton-auth\" onClick={handleSubmit}>\n                                        SUBMIT\n                                    </div>\n                                </div> */}\n\n                                <div className=\"submitButton-auth\">\n                                    <PikaButton \n                                        title=\"SUBMIT\" \n                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                        handleClick={handleSubmit}\n                                        >\n                                    </PikaButton>\n                                </div>\n\n                            </div>\n\n                            <div className='bottomSide-auth'>\n                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                <div className='reqSide-auth'>\n                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                </div>\n                            </div>\n                    </div>\n                </div>\n                            \n                :\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Lupa PIN ?\n                    </div>\n\n                    <div className='mob-menu-category-auth'>\n                        Silahkan masukkan email Anda yang terdaftar.\n                    </div>\n\n                    <div className='textfield-auth'>\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\n\n                            <Form>\n                                <Row>\n                                    <Col xs={11}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                    </Col>\n                                    <Col />\n                                </Row>\n                                \n                            </Form>\n\n                            <div className='buttonSide-auth'>\n                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n\n                                {/* <div className=\"submitButton-auth\">\n                                    <div className=\"wordsButton-auth\" onClick={handleSubmit}>\n                                        SUBMIT\n                                    </div>\n                                </div> */}\n\n                                <div className=\"submitButton-auth\">\n                                    <PikaButton \n                                        title=\"SUBMIT\" \n                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                        handleClick={handleSubmit}\n                                        >\n                                    </PikaButton>\n                                </div>\n\n                            </div>\n\n                            <div className='bottomSide-auth'>\n                                <h4 className='countrySide-auth'>Indonesia</h4>\n                                <div className='reqSide-auth'>\n                                    <h4 className='reqSideWord-auth'>Privasi</h4>\n                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                                </div>\n                            </div>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n\n}\n\nexport default ForgotPinDialog","/home/devweb/pikapp-web/src/Component/Authentication/LoginDialog.js",["265","266","267","268","269","270","271","272"],"import React, { useState } from \"react\";\nimport '../../Asset/scss/AuthenticationDialog.scss'\nimport closeLogo from '../../Asset/Icon/close.png'\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport PikaButton from \"../../Component/Button/PikaButton\";\nimport PikaTextField from \"../../Component/TextField/PikaTextField\";\nimport PinDialog from \"./PinDialog\";\n\nconst LoginDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const [pinDialog, setPin] = useState(false)\n    const [email, setEmail] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [isCaptcha, setIsCaptcha] = useState(false);\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHideLogin()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHideLogin()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const openPinDialog = () => {\n        if (checkEmail() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        setIsValid(true);\n\n        const data = {\n            email: email\n        };\n\n        dispatch({ type: 'LOGIN', payload: data });\n        dispatch({ type: 'LOGINSTEP', payload: true });\n\n        // setPin(true);\n        props.onHideLogin();\n        props.onShowPin();\n    }\n\n    const showPinDialog = () => {\n        if (pinDialog) {\n            return (\n                <PinDialog\n                    isShowPin={pinDialog}\n                    onHidePin={() => setPin(false)}\n                />\n            )\n        }\n    }\n\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    }\n\n    const checkEmail = () => {\n        let emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (emailRegex.test(email)) {\n            return true;\n        } else {\n            setErrorMsg(\"Email is not valid.\");\n            return false;\n        }\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Selangkah Lagi Sebelum Memesan!\n                    </div>\n\n                    <div className='textfield-auth'>\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\n                        \n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                    </Col>\n                                <Col />\n                            </Row>\n                            \n                        </Form>\n\n                        <div className='buttonSide-auth'>\n                            <p className=\"linkWords\" onClick={closeModal}>DAFTAR SAJA</p>\n                            <div className=\"submitButton-auth\" onClick={openPinDialog}>\n                                <div className=\"wordsButton-auth\">\n                                    SUBMIT\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className='bottomSide-auth'>\n                            <h4 className='countrySide-auth'>Indonesia</h4>\n                            <div className='reqSide-auth'>\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                :\n\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Selangkah Lagi Sebelum Memesan!\n                    </div>\n\n                    <div className='textfield-auth'>\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\n                        \n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                    </Col>\n                                <Col />\n                            </Row>\n                            \n                        </Form>\n\n                        <div className='buttonSide-auth'>\n                            <p className=\"linkWords\" onClick={closeModal}>DAFTAR SAJA</p>\n                            <div className=\"submitButton-auth\" onClick={openPinDialog}>\n                                <div className=\"wordsButton-auth\">\n                                    SUBMIT\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className='bottomSide-auth'>\n                            <h4 className='countrySide-auth'>Indonesia</h4>\n                            <div className='reqSide-auth'>\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default LoginDialog","/home/devweb/pikapp-web/src/Component/Authentication/ConfirmPinDialog.js",["273","274","275","276","277","278","279","280","281","282"],"import React, { useState } from \"react\";\nimport '../../Asset/scss/AuthenticationDialog.scss'\nimport closeLogo from '../../Asset/Icon/close.png'\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PinInput from \"react-pin-input\";\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport PikaButton from \"../../Component/Button/PikaButton\";\nimport Cookies from \"js-cookie\";\nimport LoginDialog from \"../Authentication/LoginDialog\";\nimport axios from \"axios\";\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport Swal from 'sweetalert2';\n\nconst ConfirmPinDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const AuthRedu = useSelector(state => state.AuthRedu);\n    const [loginDialog, setLogin] = useState(false)\n    const [confirmPin, setConfirmPin] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [isCaptcha, setIsCaptcha] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [captchaCounter, setCaptchaCounter] = useState(0);\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHideConfirmPin()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHideConfirmPin()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const handleConfirmPin = (e) => {\n        setConfirmPin(e);\n    }\n\n    const checkConfirmPin = () => {\n        if (AuthRedu.dataRegister.pin === confirmPin) {\n            return true;\n        } else {\n            setErrorMsg(\"PIN does not match.\");\n            return false;\n        }\n    };\n\n    const handleRegister = (e) => {\n        if (checkConfirmPin() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        setIsValid(true);\n        dispatch({ type: 'LOADING' });\n\n        const data = {\n            full_name: AuthRedu.dataRegister.full_name,\n            password: confirmPin,\n            phone_number: AuthRedu.dataRegister.phone_number,\n            email: AuthRedu.dataRegister.email,\n            gender: \"MALE\",\n            birth_day: \"01011970\",\n            token: \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\",\n        };\n\n        let uuid = uuidV4();\n        uuid = uuid.replace(/-/g, \"\");\n        const date = new Date().toISOString();\n        axios(address + \"auth/register\", {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-request-id\": uuid,\n                \"x-request-timestamp\": date,\n                \"x-client-id\": clientId,\n            },\n            method: \"POST\",\n            data: data,\n        })\n            .then((res) => {\n                Swal.fire({\n                    position: 'top',\n                    icon: 'success',\n                    title: 'Register Berhasil.',\n                    // showConfirmButton: true,\n                    confirmButtonColor: \"#4bb7ac\",\n                    confirmButtonText: \"OK\",\n                    // closeOnConfirm: false,\n                    timer: 3000\n                }).then(() => {\n                    handleLogin();\n                })\n                // window.location.reload();\n            })\n            .catch((err) => {\n                if (err.response.data !== undefined) {\n                    alert(err.response.data.err_message)\n                    // props.DoneLoad()\n                    dispatch({ type: 'DONELOAD' });\n                }\n                setCaptchaCounter(captchaCounter + 1);\n            });\n\n    }\n\n    const handleLogin = (e) => {\n        const data = {\n            username: AuthRedu.dataRegister.email,\n            pin: confirmPin,\n            fcm_token: \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\",\n        };\n\n        const auth = {\n            isLogged: false,\n            token: \"\",\n            new_event: true,\n            recommendation_status: false,\n            email: \"\",\n            is_email_verified: true\n        };\n\n        let uuid = uuidV4();\n        uuid = uuid.replace(/-/g, \"\");\n        const date = new Date().toISOString();\n        axios(address + \"auth/v2/login\", {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-request-id\": uuid,\n            \"x-request-timestamp\": date,\n            \"x-client-id\": clientId,\n        },\n        method: \"POST\",\n        data: data,\n        })\n        .then((res) => {\n            auth.isLogged = true;\n            auth.token = res.data.token;\n            auth.new_event = res.data.new_event;\n            auth.recommendation_status = res.data.recommendation_status;\n            auth.is_email_verified = res.data.is_email_verified;\n            auth.email = AuthRedu.dataRegister.email;\n            Cookies.set(\"auth\", auth, { expires: 1 });\n            var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\n            var latitude = getLocation.lat\n            var longitude = getLocation.lon\n            // props.onHideConfirmPin()\n            props.onHideRegisterFlow();\n            dispatch({ type: 'DONELOAD' });\n            // if (Cookies.get(\"lastLink\") !== undefined) {\n            //     var lastlink = JSON.parse(Cookies.get(\"lastLink\")).value;\n            // }\n            // window.location.reload();\n            // if (lastlink.includes(\"?latitude\") || lastlink.includes(\"store?\")) {\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value\n            // } else {\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value + `?latitude=${latitude}&longitude=${longitude}`\n            // }\n            // } else {\n            //     window.location.href = window.location.origin + `?latitude=${latitude}&longitude=${longitude}`\n            // }\n        }) \n        .catch((err) => {\n            if (err.response.data !== undefined) {\n                alert(err.response.data.err_message)\n                // props.DoneLoad()\n                dispatch({ type: 'DONELOAD' });\n            }\n            setCaptchaCounter(captchaCounter + 1);\n        });\n\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Konfirmasi PIN Anda\n                    </div>\n\n                    <div className='mob-menu-category-auth'>\n                        Konfirmasi 6 digit nomor PIN Anda\n                    </div>\n\n                    <div>\n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    <PinInput\n                                    length={6}\n                                    focus\n                                    // disabled\n                                    secret\n                                    ref={p => (pin => p)}\n                                    type=\"number\"\n                                    inputMode=\"numeric\"\n                                    onChange={handleConfirmPin}\n                                    />\n                                    <div></div>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={11}>\n                                {isValid || (\n                                    <Alert variant=\"danger\">{errorMsg}</Alert>\n                                )}\n                                </Col>\n                                <Col />\n                            </Row>\n                            \n                        </Form>\n                        \n                        <div className='buttonSide-auth'>\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n\n                            {/* <div className=\"submitButton-auth\" onClick={handleRegister}>\n                                <div className=\"wordsButton-auth\">\n                                    SUBMIT\n                                </div>\n                            </div> */}\n\n                            <div className=\"submitButton-auth\">\n                                <PikaButton \n                                    title=\"SUBMIT\" \n                                    buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                    handleClick={handleRegister}\n                                    >\n                                </PikaButton>\n                            </div>\n\n                        </div>\n\n                        <div className='bottomSide-auth'>\n                            <h4 className='countrySide-auth'>Indonesia</h4>\n                            <div className='reqSide-auth'>\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n                :\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Konfirmasi PIN Anda\n                    </div>\n\n                    <div className='mob-menu-category-auth'>\n                        Konfirmasi 6 digit nomor PIN Anda\n                    </div>\n\n                    <div>\n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    <PinInput\n                                    length={6}\n                                    focus\n                                    // disabled\n                                    secret\n                                    ref={p => (pin => p)}\n                                    type=\"number\"\n                                    inputMode=\"numeric\"\n                                    onChange={handleConfirmPin}\n                                    />\n                                    <div></div>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={11}>\n                                {isValid || (\n                                    <Alert variant=\"danger\">{errorMsg}</Alert>\n                                )}\n                                </Col>\n                                <Col />\n                            </Row>\n                            \n                        </Form>\n                        \n                        <div className='buttonSide-auth'>\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n\n                            {/* <div className=\"submitButton-auth\" onClick={handleRegister}>\n                                <div className=\"wordsButton-auth\">\n                                    SUBMIT\n                                </div>\n                            </div> */}\n\n                            <div className=\"submitButton-auth\">\n                                <PikaButton \n                                    title=\"SUBMIT\" \n                                    buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                    handleClick={handleRegister}\n                                    >\n                                </PikaButton>\n                            </div>\n\n                        </div>\n\n                        <div className='bottomSide-auth'>\n                            <h4 className='countrySide-auth'>Indonesia</h4>\n                            <div className='reqSide-auth'>\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ConfirmPinDialog","/home/devweb/pikapp-web/src/Component/Authentication/PinDialog.js",["283","284","285","286","287","288","289","290","291","292","293"],"import React, { useState } from \"react\";\nimport '../../Asset/scss/AuthenticationDialog.scss'\nimport closeLogo from '../../Asset/Icon/close.png'\nimport { useMediaQuery } from 'react-responsive'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PinInput from \"react-pin-input\";\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\nimport PikaButton from \"../../Component/Button/PikaButton\";\nimport ConfirmPinDialog from './ConfirmPinDialog';\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport ForgotPin from \"./ForgotPinDialog\";\nimport Button from \"react-bootstrap/Button\";\nimport NotifModal from '../Modal/NotifModal';\n\nconst PinDialog = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const AuthRedu = useSelector(state => state.AuthRedu);\n    const [confirmPinDialog, setConfirmPin] = useState(false);\n    const [forgotPinDialog, setForgotPin] = useState(false);\n    const [pin, setPin] = useState('');\n    const [isValid, setIsValid] = useState(true);\n    const [isCaptcha, setIsCaptcha] = useState(false);\n    const [errorMsg, setErrorMsg] = useState('');\n    const [isLoginStep, setIsLoginStep] = useState(false);\n    const [captchaCounter, setCaptchaCounter] = useState(0);\n    const [successMessage, setSuccessMessage] = useState('');\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHidePin()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            // setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHidePin()\n        } else {\n            // setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const openConfirmPinDialog = () => {\n\n        if (checkPin() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        setIsValid(true);\n\n        const data = {\n            full_name: AuthRedu.dataRegister.full_name,\n            phone_number: AuthRedu.dataRegister.phone_number,\n            email: AuthRedu.dataRegister.email,\n            pin: pin\n        };\n\n        dispatch({ type: 'REGISTER', payload: data });\n        setIsLoginStep(false);\n        // setConfirmPin(true);\n        props.onHidePin();\n        props.onShowConfirm();\n    }\n\n    const handleLogin = (e) => {\n        if (checkPin() === false) {\n            setIsValid(false);\n            return;\n        }\n\n        setIsValid(true);\n\n        dispatch({ type: 'LOADING' });\n\n        const data = {\n            username: AuthRedu.dataLogin.email,\n            pin: pin,\n            fcm_token: \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\",\n        };\n        const auth = {\n            isLogged: false,\n            token: \"\",\n            new_event: true,\n            recommendation_status: false,\n            email: \"\",\n            is_email_verified: true\n        };\n\n        let uuid = uuidV4();\n        uuid = uuid.replace(/-/g, \"\");\n        const date = new Date().toISOString();\n        axios(address + \"auth/v2/login\", {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-request-id\": uuid,\n            \"x-request-timestamp\": date,\n            \"x-client-id\": clientId,\n        },\n        method: \"POST\",\n        data: data,\n        })\n        .then((res) => {\n            setSuccessMessage(\"Login Berhasil.\");\n            setTimeout(() => {\n                auth.isLogged = true;\n                auth.token = res.data.token;\n                auth.new_event = res.data.new_event;\n                auth.recommendation_status = res.data.recommendation_status;\n                auth.is_email_verified = res.data.is_email_verified;\n                auth.email = AuthRedu.dataLogin.email;\n                Cookies.set(\"auth\", auth, { expires: 1 });\n                var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\n                var latitude = getLocation.lat\n                var longitude = getLocation.lon\n                // props.onHidePin()\n                props.onHideLoginFlow()\n                dispatch({ type: 'DONELOAD' });\n            }, 1000);\n            // if (Cookies.get(\"lastLink\") !== undefined) {\n            //     var lastlink = JSON.parse(Cookies.get(\"lastLink\")).value\n            // }\n            // window.location.reload();\n            // if (lastlink.includes(\"?latitude\") || lastlink.includes(\"store?\")) {\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value\n            // } else {\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value + `?latitude=${latitude}&longitude=${longitude}`\n            // }\n            // } else {\n            // window.location.href = window.location.origin + `?latitude=${latitude}&longitude=${longitude}`\n            // }\n        })  \n        .catch((err) => {\n            if (err.response.data !== undefined) {\n                alert(err.response.data.err_message)\n                // props.DoneLoad()\n                dispatch({ type: 'DONELOAD' });\n            }\n            setCaptchaCounter(captchaCounter + 1);\n        });\n    }\n\n    const showConfirmPinDialog = () => {\n        if (confirmPinDialog) {\n            return (\n                <ConfirmPinDialog\n                    isShowConfirmPin={confirmPinDialog}\n                    onHideConfirmPin={() => setConfirmPin(false)}\n                />\n            )\n        }\n    }\n\n    const openForgotPinDialog = () => {\n        props.onHidePin();\n        props.onShowForgotPin();\n        // setForgotPin(true);\n    }\n\n    const showForgotPinDialog = () => {\n        if (forgotPinDialog) {\n            return (\n                <ForgotPin\n                    isShowForgotPin={forgotPinDialog}\n                    onHideForgotPin={() => setForgotPin(false)}\n                />\n            )\n        }\n    }\n\n    const handlePin = (e) => {\n        setPin(e);\n    }\n\n    const checkPin = () => {\n        if (pin.length < 6) {\n            setErrorMsg(\"PIN must be within 6 digit numeric.\");\n            return false;\n        } else {\n            return true;\n        }\n    };\n\n    const showNotifModal = () => {\n        if (AllRedu.buttonLoad === false) {\n            return <NotifModal isShowNotif={AllRedu.buttonLoad} responseMessage={successMessage} />\n        }\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Ketik PIN Anda\n                    </div>\n\n                    <div className='mob-menu-category-auth'>\n                        Ketik 6 digit nomor PIN Anda\n                    </div>\n\n                    <div>\n                        \n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    <PinInput\n                                    length={6}\n                                    focus\n                                    // disabled\n                                    secret\n                                    ref={p => (pin => p)}\n                                    type=\"number\"\n                                    inputMode=\"numeric\"\n                                    // onChange={handlePin}\n                                    onComplete={handlePin}\n                                    />\n                                    <div></div>\n                                </Col>\n                            </Row>\n                        \n\n                            <Row>\n                                <Col xs={11}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                </Col>\n                                <Col />\n                            </Row>\n\n                            <Row>\n                                <Col xs={11}>\n                                    {\n                                    !AuthRedu.isLoginStep ?\n                                    \n                                    <div className='menu-category-auth btm30'>\n                                        \n                                    </div>\n                                    :\n                                    <div className='menu-category-auth btm30' onClick={openForgotPinDialog}>\n                                        LUPA PIN ?\n                                    </div>\n                                    }\n                                </Col>\n                            </Row>\n\n                        </Form>\n\n                        <div className='buttonSide-auth'>\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n                            {\n                                !AuthRedu.isLoginStep ?\n                                    <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\n                                        <div className=\"wordsButton-auth\">\n                                            NEXT\n                                        </div>\n                                    </div>\n                                    :\n                                    // <div className=\"submitButton-auth\" onClick={handleLogin}>\n                                    //     <div className=\"wordsButton-auth\">\n                                    //         SUBMIT\n                                    //     </div>\n                                    // </div>\n\n                                    <div className=\"submitButton-auth\">\n                                        <PikaButton \n                                            title=\"SUBMIT\" \n                                            buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                            handleClick={handleLogin}\n                                            >\n                                        </PikaButton>\n                                    </div>\n                            }\n                        </div>\n\n                        <div className='bottomSide-auth'>\n                            <h4 className='countrySide-auth'>Indonesia</h4>\n                            <div className='reqSide-auth'>\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                            </div>\n                        </div>\n                            \n                    </div>\n                </div>\n                :\n\n                <div className='menu-detail-auth'>\n                    <div className='menu-name-auth'>\n                        Ketik PIN Anda\n                    </div>\n\n                    <div className='mob-menu-category-auth'>\n                        Ketik 6 digit nomor PIN Anda\n                    </div>\n\n                    <div>\n                        \n                        <Form>\n                            <Row>\n                                <Col xs={11}>\n                                    <PinInput\n                                    length={6}\n                                    focus\n                                    // disabled\n                                    secret\n                                    ref={p => (pin => p)}\n                                    type=\"number\"\n                                    inputMode=\"numeric\"\n                                    // onChange={handlePin}\n                                    onComplete={handlePin}\n                                    />\n                                    <div></div>\n                                </Col>\n                            </Row>\n                        \n\n                            <Row>\n                                <Col xs={11}>\n                                    {isValid || (\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\n                                    )}\n                                </Col>\n                                <Col />\n                            </Row>\n\n                            <Row>\n                                <Col xs={11}>\n                                    {\n                                    !AuthRedu.isLoginStep ?\n                                    \n                                    <div className='menu-category-auth btm30'>\n                                        \n                                    </div>\n                                    :\n                                    <div className='menu-category-auth btm30' onClick={openForgotPinDialog}>\n                                        LUPA PIN ?\n                                    </div>\n                                    }\n                                </Col>\n                            </Row>\n\n                        </Form>\n\n                        <div className='buttonSide-auth'>\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\n                            {\n                                !AuthRedu.isLoginStep ?\n                                    <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\n                                        <div className=\"wordsButton-auth\">\n                                            NEXT\n                                        </div>\n                                    </div>\n                                    :\n                                    // <div className=\"submitButton-auth\" onClick={handleLogin}>\n                                    //     <div className=\"wordsButton-auth\">\n                                    //         SUBMIT\n                                    //     </div>\n                                    // </div>\n\n                                    <div className=\"submitButton-auth\">\n                                        <PikaButton \n                                            title=\"SUBMIT\" \n                                            buttonStyle=\"submitButton-auth wordsButton-auth\"\n                                            handleClick={handleLogin}\n                                            >\n                                        </PikaButton>\n                                    </div>\n                            }\n                        </div>\n\n                        <div className='bottomSide-auth'>\n                            <h4 className='countrySide-auth'>Indonesia</h4>\n                            <div className='reqSide-auth'>\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\n                            </div>\n                        </div>\n                            \n                    </div>\n                </div>\n            }\n            {showNotifModal()}\n        </div>\n    );\n}\n\nexport default PinDialog","/home/devweb/pikapp-web/src/Redux/Actions/ButtonAction.js",[],"/home/devweb/pikapp-web/src/Component/Modal/CartModal.js",["294"],"import React, { useState } from 'react'\nimport closeNarrow from '../../Asset/Icon/closeNarrow.png'\nimport diningTableColor from '../../Asset/Icon/diningTableColor.png'\nimport takeawayColor from '../../Asset/Icon/takeawayColor.png'\nimport CashierPayment from '../../Asset/Icon/CashierPayment.png'\nimport OvoPayment from '../../Asset/Icon/ovo_icon.png'\nimport '../../Asset/scss/CartModal.scss'\n\nconst CartModal = (props) => {\n    const [radioNumEat, setradioNumEat] = useState(props.indexOptionEat)\n    const [radioNumPay, setradioNumPay] = useState(props.indexOptionPay)\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        props.onHide()\n    }\n\n    const onChangeRadio = (num, title) => {\n        if (title === 'Pilih Cara Makan Anda') {\n            setradioNumEat(num)\n            props.handleData(num)\n            props.onHide()\n        } else if(title === 'Bayar Pakai Apa') {\n            setradioNumPay(num)\n            props.handleData(num)\n            props.onHide()\n        }\n    }\n\n    const choicesCartModal = () => {\n        let optionList = props.detailOptions\n        let choicesModal = optionList.map((optionVal, keyOption) => {\n            let imageOption;\n            if (optionVal.image === \"dineIn\") {\n                imageOption = diningTableColor;\n            } else if (optionVal.image === \"takeaway\") {\n                imageOption = takeawayColor;\n            } else if (optionVal.image === \"cashier\") {\n                imageOption = CashierPayment;\n            } else if (optionVal.image === \"ovo\") {\n                imageOption = OvoPayment;\n            }\n\n            if (props.title === 'Pilih Cara Makan Anda') {\n                return (\n                    <div key={keyOption} className='modalCart-detailContent'>\n                        <div className='modalCart-radioSection'>\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'EATMETHOD'} defaultChecked={radioNumEat === keyOption ? true : false} />\n                            <label htmlFor={optionVal.image}>\n                                <div className='modalCart-radioSide'>\n                                    <img className='modalCartradio-image' src={imageOption} alt='' />\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\n                                </div>\n                            </label>\n                        </div>\n                    </div>\n                )\n            } else if (props.title === 'Bayar Pakai Apa') {\n                return (\n                    <div key={keyOption} className='modalCart-detailContent'>\n                        <div className='modalCart-radioSection'>\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'PAYMETHOD'} defaultChecked={radioNumPay === keyOption ? true : false} />\n                            <label htmlFor={optionVal.image}>\n                                <div className='modalCart-radioSide'>\n                                    <img className='modalCartradio-image' src={imageOption} alt='' />\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\n                                </div>\n                            </label>\n                        </div>\n                    </div>\n                )\n            } else if (props.title === 'Rincian Pembayaran') {\n                return (\n                    <div key={keyOption} className='modalCart-detailTotalPrice'>\n                        <div className='modalCart-totalPrice'>\n                            <h2 className='modalCart-totalPrice-left'>Total Harga Barang</h2>\n                            <h2 className='modalCart-totalPrice-right'>{Intl.NumberFormat(\"id-ID\").format(optionVal.totalPrice)}</h2>\n                        </div>\n\n                        <div className='modalCart-discount'>\n                            <h2 className='modalCart-discount-left'>Diskon</h2>\n                            <h2 className='modalCart-discount-right'>{optionVal.discountPrice}</h2>\n                        </div>\n                    </div>\n                )\n            }\n        })\n        return choicesModal\n    }\n\n    return (\n        <>\n            <div className='modalCartPage' style={{\n                display: props.isShow ? 'block' : 'none'\n            }} onClick={closeModal}>\n                <div className='modalCartContent' onClick={e => e.stopPropagation()}>\n                    <span className='iconCloseNarrow' onClick={closeModal}>\n                        <img src={closeNarrow} className='closeLogoNarrow' alt='' />\n                    </span>\n\n                    <div className='modalCart-detail'>\n                        <h1 className='modalCart-title'>{props.title}</h1>\n\n                        {choicesCartModal()}\n                    </div>\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nexport default CartModal","/home/devweb/pikapp-web/src/Component/Menu/MenuDetail.js",["295","296"],"import React, { useState } from \"react\";\nimport '../../Asset/scss/MenuDetail.scss'\n// import prodPhoto from '../../Asset/Illustration/samplefood.jpg'\nimport closeLogo from '../../Asset/Icon/close.png'\nimport backLogo from '../../Asset/Icon/arrow-left.png'\nimport StarIcon from '../../Asset/Icon/star.png'\nimport { useMediaQuery } from 'react-responsive'\nimport { Scrollbars } from 'react-custom-scrollbars'\nimport MenuSelection from './MenuSelection'\nimport { useDispatch, useSelector } from 'react-redux'\nimport RegisterDialog from '../Authentication/RegisterDialog';\nimport Cookies from \"js-cookie\"\nimport PinDialog from \"../Authentication/PinDialog\";\nimport Loader from 'react-loader-spinner'\nimport Swal from 'sweetalert2'\n\nconst MenuDetail = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const menuCateg = props.handleCateg\n    const [menuSelect, setmenuSelect] = useState(false)\n    const [menuCondition, setmenuCondition] = useState(false)\n    const [registerDialog, setRegister] = useState(false)\n    const [pinDialog, setPin] = useState(false)\n    const [email, setEmail] = useState('');\n    const [loadingButton, setloadingButton] = useState(true)\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    const closeModal = (e) => {\n        e.stopPropagation()\n        dispatch({ type: 'DEFAULTSTATE' })\n        props.onHide()\n    }\n\n    const backModal = (e) => {\n        if (AllRedu.openMenuCart) {\n            setmenuSelect(false)\n            e.stopPropagation()\n            dispatch({ type: 'DEFAULTSTATE' })\n            props.onHide()\n        } else {\n            setmenuSelect(false)\n            dispatch({ type: 'DEFAULTSTATE' })\n        }\n    }\n\n    const addtoCart = () => {\n        if (!loadingButton) {\n            console.log('waitbro');\n        } else {\n            if (AllRedu.mandatCheck && AllRedu.mandatCheckCond && AllRedu.mandatRadio && AllRedu.mandatRadioCond) {\n                props.handleClick()\n                dispatch({ type: 'DEFAULTSTATE' })\n                props.onHide()\n            } else if (!AllRedu.mandatCheck && !AllRedu.mandatCheckCond && !AllRedu.mandatRadio && !AllRedu.mandatRadioCond) {\n                props.handleClick()\n                dispatch({ type: 'DEFAULTSTATE' })\n                props.onHide()\n            } else if (AllRedu.mandatCheck && AllRedu.mandatCheckCond && !AllRedu.mandatRadio && !AllRedu.mandatRadioCond) {\n                props.handleClick()\n                dispatch({ type: 'DEFAULTSTATE' })\n                props.onHide()\n            } else if (!AllRedu.mandatCheck && !AllRedu.mandatCheckCond && AllRedu.mandatRadio && AllRedu.mandatRadioCond) {\n                props.handleClick()\n                dispatch({ type: 'DEFAULTSTATE' })\n                props.onHide()\n            } else {\n                Swal.fire({\n                    position: 'top',\n                    icon: 'error',\n                    text: 'Pilih terlebih dahulu pilihan yang wajib',\n                    showConfirmButton: true,\n                    confirmButtonColor: \"#4bb7ac\",\n                    confirmButtonText: \"Close\",\n                    closeOnConfirm: false,\n                })\n            }\n        }\n    }\n\n    const countTotalPrice = () => {\n        let totalCheckPrice = 0\n        let totalRadioPrice = 0\n        let totalPrice = 0\n        let sumCheckPrice = AllRedu.checkboxes\n        sumCheckPrice.forEach(firstVal => {\n            firstVal.forEach(nestedVal => {\n                totalCheckPrice += nestedVal.price\n            })\n        });\n\n        let sumRadioPrice = AllRedu.radiobutton\n        sumRadioPrice.forEach(firstVal => {\n            firstVal.forEach(nestedVal => {\n                totalRadioPrice += nestedVal.price\n            })\n        });\n\n        totalCheckPrice = totalCheckPrice * AllRedu.validQTY\n        totalRadioPrice = totalRadioPrice * AllRedu.validQTY\n        totalPrice += totalCheckPrice + totalRadioPrice\n        totalPrice += AllRedu.validQTY * props.datas.foodPrice\n        return totalPrice\n    }\n\n    let auth;\n\n    const openMenuSelect = () => {\n\n        if (Cookies.get(\"auth\") === undefined) {\n            // props.onHide();\n            setRegister(true);\n            // showRegisterDialog();\n        } else {\n            auth = JSON.parse(Cookies.get(\"auth\"));\n            if (auth.isLogged === false) {\n                openPinDialog();\n            } else {\n                setloadingButton(false)\n                dispatch({ type: 'LOADING' })\n                setmenuSelect(true)\n                dispatch({ type: 'FOODCATEG', payload: findCateg })\n            }\n            // openPinDialog();\n\n        }\n    }\n\n    let findCateg\n    if (AllRedu.openMenuCart) {\n        findCateg = props.datas.foodCategory\n        if (!menuCondition) {\n            setmenuSelect(true)\n            setmenuCondition(true)\n        }\n    } else {\n        findCateg = menuCateg.filter((val) => {\n            return props.datas.category === parseInt(val.category_id)\n        })\n        findCateg = findCateg[0].category_name.toLowerCase()\n    }\n\n    let totalCheckPrice = 0\n    let totalRadioPrice = 0\n    let totalPrice = 0\n    let sumCheckPrice = AllRedu.checkboxes\n    sumCheckPrice.forEach(firstVal => {\n        firstVal.forEach(nestedVal => {\n            totalCheckPrice += nestedVal.price\n        })\n    });\n\n    let sumRadioPrice = AllRedu.radiobutton\n    sumRadioPrice.forEach(firstVal => {\n        firstVal.forEach(nestedVal => {\n            totalRadioPrice += nestedVal.price\n        })\n    });\n\n    totalCheckPrice = totalCheckPrice * AllRedu.validQTY\n    totalRadioPrice = totalRadioPrice * AllRedu.validQTY\n    totalPrice += totalCheckPrice + totalRadioPrice\n    totalPrice += AllRedu.validQTY * props.datas.foodPrice\n    props.handleAmount(totalPrice)\n\n    const showRegisterDialog = () => {\n        if (registerDialog) {\n            return (\n                <RegisterDialog\n                    isShowRegister={registerDialog}\n                    onHideRegister={() => setRegister(false)}\n                />\n            )\n        }\n    }\n\n    const openPinDialog = () => {\n        setEmail(auth.email);\n\n        const data = {\n            email: email\n        };\n\n        dispatch({ type: 'LOGIN', payload: data });\n        dispatch({ type: 'LOGINSTEP', payload: true });\n\n        setPin(true);\n    }\n\n    const showPinDialog = () => {\n        if (pinDialog) {\n            return (\n                <PinDialog\n                    isShowPin={pinDialog}\n                    // onHidePin={closeAuthDialog}\n                    onHidePin={() => setPin(false)}\n                />\n            )\n        }\n    }\n\n    const closeAuthDialog = () => {\n        setPin(false);\n        setRegister(false);\n    }\n\n    return (\n        <div>\n            {\n                !isMobile ?\n                    <div className='modalMenuDetail' style={{\n                        display: props.isShow ? 'block' : 'none'\n                    }} onClick={closeModal}\n                    >\n                        <div className='modal-content-menudetail' onClick={e => e.stopPropagation()}>\n                            {\n                                menuSelect ?\n                                    <span className='iconBack' onClick={backModal}>\n                                        <img src={backLogo} className='backLogo' alt='' />\n                                    </span>\n                                    :\n                                    <span className='iconClose' onClick={closeModal}>\n                                        <img src={closeLogo} className='closeLogo' alt='' />\n                                    </span>\n                            }\n\n                            <div className='menuDetail-layout'>\n                                <div className='menuContain-left'>\n                                    <div className='menuBanner'>\n                                        <img className='menuimg' src={props.datas.foodImage} alt='' />\n                                    </div>\n\n                                    <div className='menu-detail'>\n                                        {/* <div className='menu-star'>\n                                            <img className='menu-star-img' src={StarIcon} alt='' />\n                                            <h6 className='menu-star-rating'>5.0</h6>\n                                        </div> */}\n\n                                        <div className='menu-name'>\n                                            {props.datas.foodName}\n                                        </div>\n\n                                        <div className='menu-category'>\n                                            {findCateg}\n                                        </div>\n\n                                        <div className='menu-price'>\n                                            {Intl.NumberFormat(\"id-ID\").format(props.datas.foodPrice)}\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className='menuContain-right'>\n                                    {\n                                        menuSelect ?\n                                            <Scrollbars style={{ height: \"calc(100% - 133px)\" }}>\n                                                <MenuSelection handleData={props.handleData} datas={props.datas} handleClick={props.handleClick} loadingButton={() => setloadingButton(true)} />\n                                            </Scrollbars>\n                                            :\n                                            <div className='menuDesc'>\n                                                <div className='menuDesc-title'>\n                                                    Description\n                                                </div>\n                                                <div className='menuDesc-content'>\n                                                    {props.datas.foodDesc}\n                                                </div>\n                                            </div>\n                                    }\n\n                                    <div className='menuButton'>\n                                        {\n                                            menuSelect ?\n                                                <div className='openMenuSelection' style={{\n                                                    backgroundColor:\n                                                        AllRedu.mandatCheck && AllRedu.mandatCheckCond && AllRedu.mandatRadio && AllRedu.mandatRadioCond ?\n                                                            '#4bb7ac'\n                                                            :\n                                                            !AllRedu.mandatCheck && !AllRedu.mandatCheckCond && !AllRedu.mandatRadio && !AllRedu.mandatRadioCond ?\n                                                                '#4bb7ac'\n                                                                :\n                                                                AllRedu.mandatCheck && AllRedu.mandatCheckCond && !AllRedu.mandatRadio && !AllRedu.mandatRadioCond ?\n                                                                    '#4bb7ac'\n                                                                    :\n                                                                    !AllRedu.mandatCheck && !AllRedu.mandatCheckCond && AllRedu.mandatRadio && AllRedu.mandatRadioCond ?\n                                                                        '#4bb7ac'\n                                                                        :\n                                                                        '#aaaaaa'\n                                                }} onClick={addtoCart}>\n                                                    {\n                                                        !loadingButton ?\n                                                            <Loader\n                                                                type=\"ThreeDots\"\n                                                                color=\"#ffffff\"\n                                                                height={70}\n                                                                width={70}\n                                                            />\n                                                            :\n                                                            <h2 className='add-words'>\n                                                                {\n                                                                    AllRedu.checkboxes.length || AllRedu.radiobutton.length || AllRedu.validQTY ?\n                                                                        `TAMBAH - ${Intl.NumberFormat(\"id-ID\").format(countTotalPrice())}`\n                                                                        :\n                                                                        `TAMBAH - ${Intl.NumberFormat(\"id-ID\").format(props.datas.foodPrice)}`\n                                                                }\n                                                            </h2>\n                                                    }\n                                                </div>\n                                                :\n                                                <div onClick={openMenuSelect} className='openMenuSelection'>\n                                                    <h2 className='add-words'>\n                                                        PESAN\n                                                    </h2>\n                                                </div>\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    :\n                    <div className='mob-modalMenuDetail' style={{\n                        display: props.isShow ? 'block' : 'none'\n                    }} onClick={closeModal}\n                    >\n                        <div className='mob-modal-content-menudetail' onClick={e => e.stopPropagation()} style={{ height: menuSelect ? '88vh' : 'auto' }}>\n                            <div className='mob-menuBanner'>\n                                <img className='mob-menuimg' src={props.datas.foodImage} alt='' />\n                                {\n                                    menuSelect ?\n                                        <span className='mob-iconClose' onClick={backModal}>\n                                            <img src={closeLogo} className='mob-closeLogo' alt='' />\n                                        </span>\n                                        :\n                                        <span className='mob-iconClose' onClick={closeModal}>\n                                            <img src={closeLogo} className='mob-closeLogo' alt='' />\n                                        </span>\n                                }\n                            </div>\n\n                            <div className='mob-menuContain'>\n                                <div className='mob-inside-menuContain' style={{ boxShadow: menuSelect ? \"0px 5px 4px rgba(0, 0, 0, 0.1)\" : \"none\" }}>\n                                    <div className='mob-menu-detail'>\n                                        {/* <div className='mob-menu-star'>\n                                            <img className='mob-menu-star-img' src={StarIcon} alt='' />\n                                            <h6 className='mob-menu-star-rating'>{props.datas.foodRating}</h6>\n                                        </div> */}\n\n                                        <div className='mob-menu-name'>\n                                            {props.datas.foodName}\n                                        </div>\n\n                                        <div className='mob-menu-category'>\n                                            {findCateg}\n                                        </div>\n                                    </div>\n\n                                    <div className='mob-menu-price'>\n                                        {Intl.NumberFormat(\"id-ID\").format(props.datas.foodPrice)}\n                                    </div>\n                                </div>\n\n                                {\n                                    menuSelect ?\n                                        <Scrollbars style={{ height: \"calc(88vh - 375px)\" }}>\n                                            <MenuSelection handleData={props.handleData} datas={props.datas} handleClick={props.handleClick} loadingButton={() => setloadingButton(true)} />\n                                        </Scrollbars>\n                                        :\n                                        <div className='mob-menuDesc'>\n                                            <div className='mob-menu-desc'>\n                                                {props.datas.foodDesc}\n                                            </div>\n                                        </div>\n                                }\n\n                                <div className='mob-menuButton' style={{ boxShadow: menuSelect ? \"0px -5px 4px rgba(0, 0, 0, 0.1)\" : \"none\" }}>\n\n                                    {\n                                        menuSelect ?\n                                            <div className='mob-openMenuSelection' style={{\n                                                backgroundColor:\n                                                    AllRedu.mandatCheck && AllRedu.mandatCheckCond && AllRedu.mandatRadio && AllRedu.mandatRadioCond ?\n                                                        '#4bb7ac'\n                                                        :\n                                                        !AllRedu.mandatCheck && !AllRedu.mandatCheckCond && !AllRedu.mandatRadio && !AllRedu.mandatRadioCond ?\n                                                            '#4bb7ac'\n                                                            :\n                                                            AllRedu.mandatCheck && AllRedu.mandatCheckCond && !AllRedu.mandatRadio && !AllRedu.mandatRadioCond ?\n                                                                '#4bb7ac'\n                                                                :\n                                                                !AllRedu.mandatCheck && !AllRedu.mandatCheckCond && AllRedu.mandatRadio && AllRedu.mandatRadioCond ?\n                                                                    '#4bb7ac'\n                                                                    :\n                                                                    '#aaaaaa'\n                                            }} onClick={addtoCart}>\n                                                {\n                                                    !loadingButton ?\n                                                        <Loader\n                                                            type=\"ThreeDots\"\n                                                            color=\"#ffffff\"\n                                                            height={70}\n                                                            width={70}\n                                                        />\n                                                        :\n                                                        <h2 className='mob-add-words'>\n                                                            {\n                                                                AllRedu.checkboxes.length || AllRedu.radiobutton.length || AllRedu.validQTY ?\n                                                                    `TAMBAH - ${Intl.NumberFormat(\"id-ID\").format(countTotalPrice())}`\n                                                                    :\n                                                                    `TAMBAH - ${Intl.NumberFormat(\"id-ID\").format(props.datas.foodPrice)}`\n                                                            }\n                                                        </h2>\n                                                }\n                                            </div>\n                                            :\n                                            <div onClick={openMenuSelect} className='mob-openMenuSelection' style={{ backgroundColor: '#4bb7ac' }}>\n                                                <h2 className='mob-add-words'>\n                                                    PESAN\n                                                </h2>\n                                            </div>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n            }\n            {showRegisterDialog()}\n            {showPinDialog()}\n        </div>\n\n    );\n}\n\nexport default MenuDetail","/home/devweb/pikapp-web/src/Component/Menu/MenuSelection.js",["297","298","299"],"import React, { useEffect, useState } from \"react\";\nimport '../../Asset/scss/MenuSelection.scss'\nimport { useMediaQuery } from 'react-responsive'\nimport Autosize from 'autosize'\nimport { ValidQty } from '../../Redux/Actions'\nimport { connect } from 'react-redux'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Axios from 'axios'\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport Loader from 'react-loader-spinner'\n\n// const checkboxDummyData = [\n//     { additionname: 'topping', maxchoice: 3, isMandat: true, listaddition: [{ name: 'coklat', price: 5000, isChecked: false }, { name: 'keju', price: 6000, isChecked: false }, { name: 'pisang', price: 7000, isChecked: false }, { name: 'wijen', price: 8000, isChecked: false }] },\n//     { additionname: 'boba', maxchoice: 2, isMandat: false, listaddition: [{ name: 'rainbow', price: 1000, isChecked: false }, { name: 'jelly', price: 2000, isChecked: false }, { name: 'pudding', price: 3000, isChecked: false }, { name: 'pearl', price: 4000, isChecked: false }] },\n// ]\n\n// const radioDummyData = [\n//     { additionname: 'level pedas', isMandat: true, listaddition: [{ name: 'tidak pedas', isChecked: false }, { name: 'pedas', isChecked: false }, { name: 'pedas mampus', isChecked: false }] },\n//     { additionname: 'level dingin', isMandat: false, listaddition: [{ name: 'tidak dingin', isChecked: false }, { name: 'dingin', isChecked: false }, { name: 'dingin mampus', isChecked: false }] },\n// ]\n\nconst MenuSelection = (props) => {\n    const dispatch = useDispatch()\n    const AllRedu = useSelector(state => state.AllRedu)\n    const [detailCategory, setdetailCategory] = useState([\n        {\n            name: \"\",\n            amount: 1,\n        },\n    ])\n    const [note, setnote] = useState('')\n    const [checkboxVal, setcheckboxVal] = useState([])\n    const [checkboxData, setcheckboxData] = useState([])\n    const [checkboxMatch, setcheckboxMatch] = useState([])\n    const [totalCheckMandat, settotalCheckMandat] = useState(0)\n    const [indexCheckMandat, setindexCheckMandat] = useState(null)\n\n    const [radioVal, setradioVal] = useState([])\n    const [radioData, setradioData] = useState([])\n    const [radioMatch, setradioMatch] = useState([])\n    const [totalRadioMandat, settotalRadioMandat] = useState(0)\n    // const [indexGroupRadioMandat, setindexGroupRadioMandat] = useState(null)\n    // const [indexEachRadioMandat, setindexEachRadioMandat] = useState(null)\n\n    const [updateDataEdit, setupdateDataEdit] = useState(false)\n    const [updateEditChoice, setupdateEditChoice] = useState(false)\n\n    const isMobile = useMediaQuery({ maxWidth: 768 })\n\n    useEffect(() => {\n        Autosize(document.getElementById('note'))\n\n        //hit API in order to get response of product detail v2\n        let uuid = uuidV4()\n        uuid = uuid.replace(/-/g, \"\");\n        const date = new Date().toISOString();\n        Axios(`${address}/home/v2/detail/product/`, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-request-id\": uuid,\n                \"x-request-timestamp\": date,\n                \"x-client-id\": clientId,\n                \"token\": \"PUBLIC\",\n                \"pid\": props.datas.productId,\n            },\n            method: 'GET'\n        }).then(productRes => {\n            let productDet = productRes.data.results.extra_menus.extra_menu\n            let radioResponse = []\n            let checkboxResponse = []\n            productDet.forEach(valProduct => {\n                if (valProduct.menu_type === 'RADIO') {\n                    radioResponse.push(valProduct)\n                } else {\n                    checkboxResponse.push(valProduct)\n                }\n            })\n\n            let radioData = []\n            let radioValData = []\n            radioResponse.forEach(valRadRes => {\n                let listadditionradio = []\n                valRadRes.menu_extra_item.forEach(valList => {\n                    listadditionradio.push({\n                        name: valList.item_name,\n                        price: valList.extra_fee,\n                        isChecked: false\n                    })\n                })\n                radioData.push({\n                    additionname: valRadRes.menu_name,\n                    isMandat: valRadRes.is_mandatory,\n                    listaddition: listadditionradio\n                })\n                radioValData.push([])\n            })\n\n            let checkboxData = []\n            let checkValData = []\n            checkboxResponse.forEach(valCheckRes => {\n                let listadditioncheckbox = []\n                valCheckRes.menu_extra_item.forEach(valList => {\n                    listadditioncheckbox.push({\n                        name: valList.item_name,\n                        price: valList.extra_fee,\n                        isChecked: false\n                    })\n                })\n                checkboxData.push({\n                    additionname: valCheckRes.menu_name,\n                    maxchoice: valCheckRes.max_choice,\n                    isMandat: valCheckRes.is_mandatory,\n                    listaddition: listadditioncheckbox\n                })\n                checkValData.push([])\n            })\n\n            //set mandatory for checkboxes\n            let mandatCheckAvailability = checkboxData.length\n            let mandatCheckLength = checkboxData.length\n            let checkboxMandat = []\n            let totalMandatforCheck = 0\n            checkboxData.forEach(valCheck => {\n                if (valCheck.isMandat) {\n                    checkboxMandat.push(false)\n                    totalMandatforCheck++\n                    mandatCheckAvailability = mandatCheckAvailability - 1\n                } else {\n                    checkboxMandat.push(false)\n                }\n            })\n            if (mandatCheckLength === mandatCheckAvailability) {\n                dispatch({ type: 'MANDATCHECKCOND', payload: false })\n            } else {\n                dispatch({ type: 'MANDATCHECKCOND', payload: true })\n            }\n            setcheckboxMatch(checkboxMandat)\n            settotalCheckMandat(totalMandatforCheck)\n\n            //set mandatory for radio\n            let mandatRadioAvailability = radioData.length\n            let mandatRadioLength = radioData.length\n            let radioMandat = []\n            let totalMandatforRadio = 0\n            radioData.forEach(valCheck => {\n                if (valCheck.isMandat) {\n                    radioMandat.push(false)\n                    totalMandatforRadio++\n                    mandatRadioAvailability = mandatRadioAvailability - 1\n                } else {\n                    radioMandat.push(false)\n                }\n            })\n            if (mandatRadioLength === mandatRadioAvailability) {\n                dispatch({ type: 'MANDATRADIOCOND', payload: false })\n            } else {\n                dispatch({ type: 'MANDATRADIOCOND', payload: true })\n            }\n            setradioMatch(radioMandat)\n            settotalRadioMandat(totalMandatforRadio)\n\n            if (!AllRedu.openMenuCart) {\n                var datas = props.datas\n                var list = []\n                if (datas.foodExt !== undefined) {\n                    datas.foodExt.map((data) => {\n                        return list.push({\n                            name: data.name,\n                            amount: data.amount + 1,\n                        });\n                    });\n                    props.ValidQty(1)\n                    setdetailCategory(list);\n                    setradioData(radioData)\n                    setcheckboxData(checkboxData)\n                    setradioVal(radioValData)\n                    setcheckboxVal(checkValData)\n                }\n            } else {\n                let amountofProd = props.datas.foodExt\n                amountofProd.forEach((val) => {\n                    props.ValidQty(val.amount)\n                })\n                setdetailCategory(props.datas.foodExt)\n                setnote(props.datas.foodNote)\n                setradioData(radioData)\n                setcheckboxData(checkboxData)\n                dispatch({ type: 'CHECKBOXES', payload: props.datas.foodListCheckbox })\n                dispatch({ type: 'RADIOBUTTON', payload: props.datas.foodListRadio })\n                setupdateDataEdit(true)\n                setradioVal(props.datas.foodListRadio)\n                setcheckboxVal(props.datas.foodListCheckbox)\n            }\n            dispatch({ type: 'DONELOAD' })\n            props.loadingButton()\n        }).catch(err => console.log(err))\n\n    }, [])\n\n    useEffect(() => {\n        if (AllRedu.openMenuCart && updateDataEdit) {\n            //this function is used for replace api data with edit data (CHECKBOX)\n            let editCheckbox = []\n            let newlistcheckboxAddition = []\n            let foodListCheckbox = props.datas.foodListCheckbox\n\n            checkboxData.forEach((firstVal, indfirstVal) => {\n                firstVal.listaddition.forEach(secondVal => {\n\n                    foodListCheckbox.forEach((foodfirstVal, indfoodFirst) => {\n                        let countNoMatch = 1\n                        foodfirstVal.forEach((foodsecondVal) => {\n                            if (indfirstVal === indfoodFirst) {\n                                if (secondVal.name === foodsecondVal.name) {\n                                    newlistcheckboxAddition.push({\n                                        name: secondVal.name,\n                                        price: secondVal.price,\n                                        isChecked: true\n                                    })\n                                } else {\n                                    if (countNoMatch === foodfirstVal.length) {\n                                        newlistcheckboxAddition.push({\n                                            name: secondVal.name,\n                                            price: secondVal.price,\n                                            isChecked: false\n                                        })\n                                        countNoMatch = 1\n                                    } else {\n                                        countNoMatch++\n                                    }\n                                }\n                            }\n                        })\n                    })\n\n                    if (foodListCheckbox[indfirstVal].length === 0) {\n                        newlistcheckboxAddition.push({\n                            name: secondVal.name,\n                            price: secondVal.price,\n                            isChecked: false\n                        })\n                    }\n                })\n                editCheckbox.push({\n                    additionname: firstVal.additionname,\n                    maxchoice: firstVal.maxchoice,\n                    isMandat: firstVal.isMandat,\n                    listaddition: newlistcheckboxAddition\n                })\n                newlistcheckboxAddition = []\n            })\n            let editTotalcheckMandat = 0\n            let editArraycheckMandat = []\n            editCheckbox.forEach(valEdit => {\n                editArraycheckMandat.push(valEdit.isMandat)\n                if (valEdit.isMandat) {\n                    editTotalcheckMandat++\n                }\n            })\n            if (editTotalcheckMandat === totalCheckMandat) {\n                if (totalCheckMandat === 0) {\n                    dispatch({ type: 'MANDATCHECK', payload: false })\n                } else {\n                    dispatch({ type: 'MANDATCHECK', payload: true })\n                }\n            } else {\n                dispatch({ type: 'MANDATCHECK', payload: false })\n            }\n            setcheckboxMatch(editArraycheckMandat)\n\n            //this function is used for replace api data with edit data (RADIO)\n            let editRadio = []\n            let newlistradioAddition = []\n            let foodListRadio = props.datas.foodListRadio\n\n            radioData.forEach((firstVal, indfirstVal) => {\n                firstVal.listaddition.forEach(secondVal => {\n\n                    foodListRadio.forEach((foodfirstVal, indfoodFirst) => {\n                        foodfirstVal.forEach((foodsecondVal) => {\n                            if (indfirstVal === indfoodFirst) {\n                                if (secondVal.name === foodsecondVal.name) {\n                                    newlistradioAddition.push({\n                                        name: secondVal.name,\n                                        price: secondVal.price,\n                                        isChecked: true\n                                    })\n                                } else {\n                                    newlistradioAddition.push({\n                                        name: secondVal.name,\n                                        price: secondVal.price,\n                                        isChecked: false\n                                    })\n                                }\n                            }\n                        })\n                    })\n\n                    if (foodListRadio[indfirstVal].length === 0) {\n                        newlistradioAddition.push({\n                            name: secondVal.name,\n                            price: secondVal.price,\n                            isChecked: false\n                        })\n                    }\n                })\n                editRadio.push({\n                    additionname: firstVal.additionname,\n                    isMandat: firstVal.isMandat,\n                    listaddition: newlistradioAddition\n                })\n                newlistradioAddition = []\n            })\n            let editTotalradioMandat = 0\n            let editArrayradioMandat = []\n            editRadio.forEach(valEdit => {\n                editArrayradioMandat.push(valEdit.isMandat)\n                if (valEdit.isMandat) {\n                    editTotalradioMandat++\n                }\n            })\n            if (editTotalradioMandat === totalRadioMandat) {\n                if (totalRadioMandat === 0) {\n                    dispatch({ type: 'MANDATRADIO', payload: false })\n                } else {\n                    dispatch({ type: 'MANDATRADIO', payload: true })\n                }\n            } else {\n                dispatch({ type: 'MANDATRADIO', payload: false })\n            }\n            setradioMatch(editArrayradioMandat)\n\n            setcheckboxData(editCheckbox)\n            setradioData(editRadio)\n            setupdateDataEdit(false)\n            setupdateEditChoice(true)\n        }\n    }, [radioVal, checkboxVal])\n\n    const checkboxArrData = () => {\n        return checkboxData.map((listname, indlistname) => {\n            return (\n                <div key={indlistname} className='checkbox-section'>\n                    <div className='title-section'>\n                        <div className='titleSelection'>{listname.additionname.toUpperCase().toLowerCase()}</div>\n                        <div className='optionSelection'>{listname.isMandat ? 'Wajib' : 'Optional'}, Max {listname.maxchoice} items</div>\n                    </div>\n\n                    <div className='boxContainer'>\n                        {\n                            listname.listaddition.map((listadd, indlistadd) => {\n                                return (\n                                    AllRedu.openMenuCart ?\n                                        updateEditChoice ?\n                                            <div key={indlistadd} className='box-section'>\n                                                <input disabled={AllRedu.validQTY === 0} id={listadd.name} type='checkbox' name={`${listname.additionname}${indlistadd}`} className={`CHECKDOT${indlistname}`} value={listadd.name} onChange={(e) => onCheckboxChange(e, indlistname, listadd.price, `CHECKDOT${indlistname}`, listname.maxchoice, listname.isMandat)} defaultChecked={listadd.isChecked} />\n                                                <label htmlFor={listadd.name}>\n                                                    <div className='checkBox-side'>\n                                                        <div className='check-box' />\n                                                        <div className='check-box-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\n                                                    </div>\n\n                                                    <div className='additon-amount'>\n                                                        +{listadd.price}\n                                                    </div>\n                                                </label>\n                                            </div>\n                                            :\n                                            null\n                                        :\n                                        <div key={indlistadd} className='box-section'>\n                                            <input disabled={AllRedu.validQTY === 0} id={listadd.name} type='checkbox' name={`${listname.additionname}${indlistadd}`} className={`CHECKDOT${indlistname}`} value={listadd.name} onChange={(e) => onCheckboxChange(e, indlistname, listadd.price, `CHECKDOT${indlistname}`, listname.maxchoice, listname.isMandat)} defaultChecked={listadd.isChecked} />\n                                            <label htmlFor={listadd.name}>\n                                                <div className='checkBox-side'>\n                                                    <div className='check-box' />\n                                                    <div className='check-box-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\n                                                </div>\n\n                                                <div className='additon-amount'>\n                                                    +{listadd.price}\n                                                </div>\n                                            </label>\n                                        </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    const radioArrData = () => {\n        return radioData.map((listname, indlistname) => {\n            return (\n                <div key={indlistname} className='radio-section'>\n                    <div className='title-section'>\n                        <div className='titleSelection'>{listname.additionname}</div>\n                        <div className='optionSelection'>{listname.isMandat ? 'Wajib' : 'Optional'}, Pilih Salah Satu</div>\n                    </div>\n\n                    <div className='boxContainer'>\n                        {\n                            listname.listaddition.map((listadd, indlistadd) => {\n                                return (\n                                    AllRedu.openMenuCart ?\n                                        updateEditChoice ?\n                                            <div key={indlistadd} className='radiobox-section'>\n                                                <input disabled={AllRedu.validQTY === 0} onChange={(e) => onRadioChange(e, indlistname, listname.isMandat, listadd.price, indlistadd)} id={listadd.name} type='radio' name={listname.additionname} value={listadd.name} defaultChecked={listadd.isChecked} />\n                                                <label htmlFor={listadd.name}>\n                                                    <div className='radio-side'>\n                                                        <div className='radio-circle' />\n                                                        <div className='radio-circle-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\n                                                    </div>\n\n                                                    <div className='additon-amount'>\n                                                        +{listadd.price}\n                                                    </div>\n                                                </label>\n                                            </div>\n                                            :\n                                            null\n                                        :\n                                        <div key={indlistadd} className='radiobox-section'>\n                                            <input disabled={AllRedu.validQTY === 0} onChange={(e) => onRadioChange(e, indlistname, listname.isMandat, listadd.price, indlistadd)} id={listadd.name} type='radio' name={listname.additionname} value={listadd.name} defaultChecked={listadd.isChecked} />\n                                            <label htmlFor={listadd.name}>\n                                                <div className='radio-side'>\n                                                    <div className='radio-circle' />\n                                                    <div className='radio-circle-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\n                                                </div>\n\n                                                <div className='additon-amount'>\n                                                    +{listadd.price}\n                                                </div>\n                                            </label>\n                                        </div>\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    const onCheckboxChange = (e, indexlistname, listprice, name, max, mandat) => {\n        var checkedChecks = document.querySelectorAll(`.${name}:checked`)\n        if (checkedChecks.length > max) {\n            e.target.checked = false\n        } else {\n            let checkMandat = [...checkboxMatch]\n            if (mandat) {\n                checkMandat[indexlistname] = mandat\n                setindexCheckMandat(indexlistname)\n            }\n\n            let checkboxArr = [...checkboxVal]\n            if (e.target.checked) {\n                checkboxArr[indexlistname].push({ name: e.target.value, price: listprice, isChecked: true })\n                setcheckboxVal(checkboxArr)\n                dispatch({ type: 'CHECKBOXES', payload: checkboxArr })\n            } else {\n                checkboxArr[indexlistname] = checkboxArr[indexlistname].filter(val => val.name !== e.target.value)\n                setcheckboxVal(checkboxArr)\n                let sizeArr = 0\n                checkboxArr.forEach((firstVal) => {\n                    firstVal.forEach((nestedVal) => {\n                        if (nestedVal.name) {\n                            sizeArr += 1\n                        }\n                    })\n                })\n                if (sizeArr > 0) {\n                    dispatch({ type: 'CHECKBOXES', payload: checkboxArr })\n                    if (checkboxArr[indexlistname].length === 0) {\n                        checkMandat[indexlistname] = false\n                        // dispatch({ type: 'MANDATCHECK', payload: false })\n\n                    }\n                } else {\n                    checkMandat[indexlistname] = false\n                    dispatch({ type: 'CHECKBOXES', payload: [] })\n                    // dispatch({ type: 'MANDATCHECK', payload: false })\n                }\n            }\n\n            // console.log(checkMandat);\n            let totalMandatCheck = 0\n            checkMandat.forEach(valMandat => {\n                if (valMandat) {\n                    totalMandatCheck++\n                }\n            })\n            if (totalMandatCheck === totalCheckMandat) {\n                if (totalCheckMandat === 0) {\n                    dispatch({ type: 'MANDATCHECK', payload: false })\n                } else {\n                    dispatch({ type: 'MANDATCHECK', payload: true })\n                }\n            } else {\n                dispatch({ type: 'MANDATCHECK', payload: false })\n            }\n            setcheckboxMatch(checkMandat)\n        }\n    }\n\n    const onRadioChange = (e, indexlistname, mandat, listprice, indexlistadd) => {\n        let radioMandat = [...radioMatch]\n        if (mandat) {\n            radioMandat[indexlistname] = mandat\n        }\n        // console.log(indexlistname, indexGroupRadioMandat, 'selectGroupRadio');\n        // console.log(indexlistadd, indexEachRadioMandat, 'selectEachRadio');\n        // if (indexlistname === indexGroupRadioMandat) {\n        //     if (indexlistadd === indexEachRadioMandat) {\n        //         console.log('yoo');\n        //         if (e.target.checked) {\n        //             e.target.checked = false\n        //         }\n        //     }\n        // }\n        let radiobuttonArr = [...radioVal]\n        radiobuttonArr[indexlistname].pop()\n        radiobuttonArr[indexlistname].push({ name: e.target.value, price: listprice, isChecked: true })\n        setradioVal(radiobuttonArr)\n        dispatch({ type: 'RADIOBUTTON', payload: radiobuttonArr })\n\n        // console.log(radioMandat);\n        let totalMandatRadio = 0\n        radioMandat.forEach(valMandat => {\n            if (valMandat) {\n                totalMandatRadio++\n            }\n        })\n        if (totalMandatRadio === totalRadioMandat) {\n            if (totalRadioMandat === 0) {\n                dispatch({ type: 'MANDATRADIO', payload: false })\n            } else {\n                dispatch({ type: 'MANDATRADIO', payload: true })\n            }\n        } else {\n            dispatch({ type: 'MANDATRADIO', payload: false })\n        }\n        setradioMatch(radioMandat)\n        // setindexGroupRadioMandat(indexlistname)\n        // setindexEachRadioMandat(indexlistadd)\n    }\n\n    const handleDecrease = (e) => {\n        let updatedFoodlist = detailCategory.map((food) => {\n            if (food === e && food.amount > 1) {\n                food.amount = food.amount - 1;\n                props.ValidQty(food.amount)\n            }\n            return food;\n        })\n        setdetailCategory(updatedFoodlist)\n    }\n\n    const handleIncrease = (e) => {\n        let updatedFoodlist = detailCategory.map((food) => {\n            if (food === e) {\n                food.amount = food.amount + 1;\n                props.ValidQty(food.amount)\n            }\n            return food;\n        })\n        setdetailCategory(updatedFoodlist)\n    }\n\n    const handleAmount = () => {\n        return detailCategory.map((food, ind) => {\n            return (\n                <div key={ind} className='amount-box-inside'>\n                    <div className='minus-box' style={{ backgroundColor: AllRedu.validQTY > 1 ? '#4bb7ac' : '#767676' }} onClick={() => handleDecrease(food)}>\n                        <div className='minus-sym'>\n                            -\n                        </div>\n                    </div>\n\n                    <div className='number-area'>\n                        {food.amount}\n                    </div>\n\n                    <div className='plus-box' onClick={() => handleIncrease(food)}>\n                        <div className='plus-sym'>\n                            +\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    const handleNote = (e) => {\n        setnote(e.target.value)\n    }\n\n    var thedata = {\n        detailCategory: detailCategory,\n        note: note ? note : '',\n        foodCategory: AllRedu.openMenuCart ? props.datas.foodCategory : AllRedu.foodCateg,\n        listcheckbox: checkboxVal,\n        listradio: radioVal\n    }\n    props.handleData(thedata)\n\n    return (\n        <>\n            {\n                !isMobile ?\n                    <div className='menuSelection-layout'>\n                        {\n                            !AllRedu.buttonLoad ?\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Loader\n                                        type=\"ThreeDots\"\n                                        color=\"#4bb7ac\"\n                                        height={70}\n                                        width={70}\n                                    />\n                                </div>\n                                :\n                                <>\n                                    <div className='checkbox-layout'>\n                                        {checkboxArrData()}\n                                    </div>\n\n                                    <div className='radio-layout'>\n                                        {radioArrData()}\n                                    </div>\n\n                                    <div className='amount-section'>\n                                        <div className='titleSelection'>\n                                            Jumlah\n                                        </div>\n\n                                        <div className='amount-box'>\n                                            {handleAmount()}\n                                        </div>\n                                    </div>\n\n                                    <div className='note-section'>\n                                        <div className='titleSelection'>\n                                            Catatan\n                                        </div>\n\n                                        <div className='note-box'>\n                                            <textarea id=\"note\" placeholder={\"Tambahkan Catatanmu\"} defaultValue={props.datas.foodNote} className='note-area' onChange={handleNote} />\n                                        </div>\n                                    </div>\n                                </>\n                        }\n                    </div>\n                    :\n                    <div className='menuSelection-layout'>\n                        {\n                            !AllRedu.buttonLoad ?\n                                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                                    <Loader\n                                        type=\"ThreeDots\"\n                                        color=\"#4bb7ac\"\n                                        height={70}\n                                        width={70}\n                                    />\n                                </div>\n                                :\n                                <>\n                                    <div className='checkbox-layout'>\n                                        {checkboxArrData()}\n                                    </div>\n\n                                    <div className='radio-layout'>\n                                        {radioArrData()}\n                                    </div>\n\n                                    <div className='amount-section'>\n                                        <div className='titleSelection'>\n                                            Jumlah\n                                        </div>\n\n                                        <div className='amount-box'>\n                                            {handleAmount()}\n                                        </div>\n                                    </div>\n\n                                    <div className='note-section'>\n                                        <div className='titleSelection'>\n                                            Catatan\n                                        </div>\n\n                                        <div className='note-box'>\n                                            <textarea id=\"note\" placeholder={\"Tambahkan Catatanmu\"} defaultValue={props.datas.foodNote} className='note-area' onChange={handleNote} />\n                                        </div>\n                                    </div>\n                                </>\n                        }\n                    </div>\n            }\n        </>\n    );\n}\n\nexport default connect(null, { ValidQty })(MenuSelection)",{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","replacedBy":"303"},{"ruleId":"304","severity":1,"message":"305","line":1,"column":17,"nodeType":"306","messageId":"307","endLine":1,"endColumn":26},{"ruleId":"304","severity":1,"message":"308","line":1,"column":28,"nodeType":"306","messageId":"307","endLine":1,"endColumn":36},{"ruleId":"304","severity":1,"message":"309","line":16,"column":10,"nodeType":"306","messageId":"307","endLine":16,"endColumn":18},{"ruleId":"304","severity":1,"message":"305","line":1,"column":17,"nodeType":"306","messageId":"307","endLine":1,"endColumn":26},{"ruleId":"304","severity":1,"message":"310","line":1,"column":28,"nodeType":"306","messageId":"307","endLine":1,"endColumn":34},{"ruleId":"304","severity":1,"message":"311","line":5,"column":10,"nodeType":"306","messageId":"307","endLine":5,"endColumn":19},{"ruleId":"304","severity":1,"message":"310","line":1,"column":28,"nodeType":"306","messageId":"307","endLine":1,"endColumn":34},{"ruleId":"312","severity":1,"message":"313","line":31,"column":6,"nodeType":"314","endLine":31,"endColumn":8,"suggestions":"315"},{"ruleId":"312","severity":1,"message":"316","line":17,"column":8,"nodeType":"314","endLine":17,"endColumn":10,"suggestions":"317"},{"ruleId":"304","severity":1,"message":"318","line":2,"column":8,"nodeType":"306","messageId":"307","endLine":2,"endColumn":16},{"ruleId":"319","severity":1,"message":"320","line":84,"column":43,"nodeType":"321","messageId":"322","endLine":84,"endColumn":45},{"ruleId":"319","severity":1,"message":"320","line":143,"column":42,"nodeType":"321","messageId":"322","endLine":143,"endColumn":44},{"ruleId":"319","severity":1,"message":"320","line":145,"column":53,"nodeType":"321","messageId":"322","endLine":145,"endColumn":55},{"ruleId":"319","severity":1,"message":"320","line":308,"column":18,"nodeType":"321","messageId":"322","endLine":308,"endColumn":20},{"ruleId":"319","severity":1,"message":"320","line":320,"column":16,"nodeType":"321","messageId":"322","endLine":320,"endColumn":18},{"ruleId":"323","severity":1,"message":"324","line":797,"column":41,"nodeType":"325","messageId":"326","endLine":797,"endColumn":43},{"ruleId":"323","severity":1,"message":"327","line":854,"column":51,"nodeType":"325","messageId":"326","endLine":854,"endColumn":53},{"ruleId":"323","severity":1,"message":"327","line":879,"column":45,"nodeType":"325","messageId":"326","endLine":879,"endColumn":47},{"ruleId":"304","severity":1,"message":"328","line":9,"column":8,"nodeType":"306","messageId":"307","endLine":9,"endColumn":18},{"ruleId":"304","severity":1,"message":"329","line":15,"column":11,"nodeType":"306","messageId":"307","endLine":15,"endColumn":19},{"ruleId":"304","severity":1,"message":"330","line":19,"column":12,"nodeType":"306","messageId":"307","endLine":19,"endColumn":21},{"ruleId":"304","severity":1,"message":"331","line":19,"column":23,"nodeType":"306","messageId":"307","endLine":19,"endColumn":35},{"ruleId":"304","severity":1,"message":"332","line":30,"column":11,"nodeType":"306","messageId":"307","endLine":30,"endColumn":20},{"ruleId":"304","severity":1,"message":"333","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":16},{"ruleId":"304","severity":1,"message":"334","line":14,"column":8,"nodeType":"306","messageId":"307","endLine":14,"endColumn":20},{"ruleId":"304","severity":1,"message":"318","line":22,"column":8,"nodeType":"306","messageId":"307","endLine":22,"endColumn":16},{"ruleId":"319","severity":1,"message":"320","line":228,"column":39,"nodeType":"321","messageId":"322","endLine":228,"endColumn":41},{"ruleId":"319","severity":1,"message":"320","line":258,"column":39,"nodeType":"321","messageId":"322","endLine":258,"endColumn":41},{"ruleId":"319","severity":1,"message":"320","line":303,"column":53,"nodeType":"321","messageId":"322","endLine":303,"endColumn":55},{"ruleId":"319","severity":1,"message":"320","line":309,"column":59,"nodeType":"321","messageId":"322","endLine":309,"endColumn":61},{"ruleId":"319","severity":1,"message":"320","line":324,"column":53,"nodeType":"321","messageId":"322","endLine":324,"endColumn":55},{"ruleId":"319","severity":1,"message":"320","line":330,"column":59,"nodeType":"321","messageId":"322","endLine":330,"endColumn":61},{"ruleId":"319","severity":1,"message":"320","line":366,"column":20,"nodeType":"321","messageId":"322","endLine":366,"endColumn":22},{"ruleId":"319","severity":1,"message":"320","line":380,"column":21,"nodeType":"321","messageId":"322","endLine":380,"endColumn":23},{"ruleId":"319","severity":1,"message":"320","line":795,"column":31,"nodeType":"321","messageId":"322","endLine":795,"endColumn":33},{"ruleId":"323","severity":1,"message":"327","line":404,"column":49,"nodeType":"325","messageId":"326","endLine":404,"endColumn":51},{"ruleId":"323","severity":1,"message":"327","line":482,"column":38,"nodeType":"325","messageId":"326","endLine":482,"endColumn":40},{"ruleId":"323","severity":1,"message":"327","line":567,"column":38,"nodeType":"325","messageId":"326","endLine":567,"endColumn":40},{"ruleId":"323","severity":1,"message":"327","line":652,"column":38,"nodeType":"325","messageId":"326","endLine":652,"endColumn":40},{"ruleId":"335","severity":1,"message":"336","line":17,"column":1,"nodeType":"337","endLine":52,"endColumn":2},{"ruleId":"335","severity":1,"message":"336","line":11,"column":1,"nodeType":"337","endLine":30,"endColumn":2},{"ruleId":"304","severity":1,"message":"338","line":5,"column":5,"nodeType":"306","messageId":"307","endLine":5,"endColumn":15},{"ruleId":"304","severity":1,"message":"339","line":9,"column":5,"nodeType":"306","messageId":"307","endLine":9,"endColumn":17},{"ruleId":"304","severity":1,"message":"340","line":12,"column":5,"nodeType":"306","messageId":"307","endLine":12,"endColumn":18},{"ruleId":"304","severity":1,"message":"308","line":1,"column":16,"nodeType":"306","messageId":"307","endLine":1,"endColumn":24},{"ruleId":"304","severity":1,"message":"328","line":8,"column":8,"nodeType":"306","messageId":"307","endLine":8,"endColumn":18},{"ruleId":"304","severity":1,"message":"341","line":9,"column":8,"nodeType":"306","messageId":"307","endLine":9,"endColumn":21},{"ruleId":"304","severity":1,"message":"329","line":19,"column":11,"nodeType":"306","messageId":"307","endLine":19,"endColumn":19},{"ruleId":"304","severity":1,"message":"331","line":28,"column":23,"nodeType":"306","messageId":"307","endLine":28,"endColumn":35},{"ruleId":"304","severity":1,"message":"342","line":29,"column":12,"nodeType":"306","messageId":"307","endLine":29,"endColumn":26},{"ruleId":"304","severity":1,"message":"343","line":29,"column":28,"nodeType":"306","messageId":"307","endLine":29,"endColumn":45},{"ruleId":"304","severity":1,"message":"344","line":31,"column":12,"nodeType":"306","messageId":"307","endLine":31,"endColumn":15},{"ruleId":"304","severity":1,"message":"345","line":31,"column":17,"nodeType":"306","messageId":"307","endLine":31,"endColumn":23},{"ruleId":"304","severity":1,"message":"346","line":32,"column":12,"nodeType":"306","messageId":"307","endLine":32,"endColumn":15},{"ruleId":"304","severity":1,"message":"347","line":32,"column":17,"nodeType":"306","messageId":"307","endLine":32,"endColumn":23},{"ruleId":"304","severity":1,"message":"332","line":48,"column":11,"nodeType":"306","messageId":"307","endLine":48,"endColumn":20},{"ruleId":"304","severity":1,"message":"348","line":64,"column":11,"nodeType":"306","messageId":"307","endLine":64,"endColumn":26},{"ruleId":"304","severity":1,"message":"349","line":107,"column":11,"nodeType":"306","messageId":"307","endLine":107,"endColumn":24},{"ruleId":"304","severity":1,"message":"350","line":12,"column":8,"nodeType":"306","messageId":"307","endLine":12,"endColumn":12},{"ruleId":"304","severity":1,"message":"330","line":22,"column":12,"nodeType":"306","messageId":"307","endLine":22,"endColumn":21},{"ruleId":"304","severity":1,"message":"331","line":22,"column":23,"nodeType":"306","messageId":"307","endLine":22,"endColumn":35},{"ruleId":"304","severity":1,"message":"332","line":34,"column":11,"nodeType":"306","messageId":"307","endLine":34,"endColumn":20},{"ruleId":"304","severity":1,"message":"351","line":3,"column":8,"nodeType":"306","messageId":"307","endLine":3,"endColumn":17},{"ruleId":"304","severity":1,"message":"352","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":18},{"ruleId":"304","severity":1,"message":"330","line":20,"column":12,"nodeType":"306","messageId":"307","endLine":20,"endColumn":21},{"ruleId":"304","severity":1,"message":"331","line":20,"column":23,"nodeType":"306","messageId":"307","endLine":20,"endColumn":35},{"ruleId":"304","severity":1,"message":"332","line":30,"column":11,"nodeType":"306","messageId":"307","endLine":30,"endColumn":20},{"ruleId":"304","severity":1,"message":"351","line":3,"column":8,"nodeType":"306","messageId":"307","endLine":3,"endColumn":17},{"ruleId":"304","severity":1,"message":"352","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":18},{"ruleId":"304","severity":1,"message":"328","line":8,"column":8,"nodeType":"306","messageId":"307","endLine":8,"endColumn":18},{"ruleId":"304","severity":1,"message":"341","line":9,"column":8,"nodeType":"306","messageId":"307","endLine":9,"endColumn":21},{"ruleId":"304","severity":1,"message":"330","line":19,"column":12,"nodeType":"306","messageId":"307","endLine":19,"endColumn":21},{"ruleId":"304","severity":1,"message":"331","line":19,"column":23,"nodeType":"306","messageId":"307","endLine":19,"endColumn":35},{"ruleId":"304","severity":1,"message":"332","line":29,"column":11,"nodeType":"306","messageId":"307","endLine":29,"endColumn":20},{"ruleId":"304","severity":1,"message":"349","line":61,"column":11,"nodeType":"306","messageId":"307","endLine":61,"endColumn":24},{"ruleId":"304","severity":1,"message":"351","line":3,"column":8,"nodeType":"306","messageId":"307","endLine":3,"endColumn":17},{"ruleId":"304","severity":1,"message":"352","line":7,"column":8,"nodeType":"306","messageId":"307","endLine":7,"endColumn":18},{"ruleId":"304","severity":1,"message":"353","line":11,"column":8,"nodeType":"306","messageId":"307","endLine":11,"endColumn":19},{"ruleId":"304","severity":1,"message":"354","line":21,"column":12,"nodeType":"306","messageId":"307","endLine":21,"endColumn":23},{"ruleId":"304","severity":1,"message":"355","line":21,"column":25,"nodeType":"306","messageId":"307","endLine":21,"endColumn":33},{"ruleId":"304","severity":1,"message":"330","line":24,"column":12,"nodeType":"306","messageId":"307","endLine":24,"endColumn":21},{"ruleId":"304","severity":1,"message":"331","line":24,"column":23,"nodeType":"306","messageId":"307","endLine":24,"endColumn":35},{"ruleId":"304","severity":1,"message":"332","line":36,"column":11,"nodeType":"306","messageId":"307","endLine":36,"endColumn":20},{"ruleId":"304","severity":1,"message":"356","line":157,"column":17,"nodeType":"306","messageId":"307","endLine":157,"endColumn":25},{"ruleId":"304","severity":1,"message":"357","line":158,"column":17,"nodeType":"306","messageId":"307","endLine":158,"endColumn":26},{"ruleId":"304","severity":1,"message":"351","line":3,"column":8,"nodeType":"306","messageId":"307","endLine":3,"endColumn":17},{"ruleId":"304","severity":1,"message":"352","line":7,"column":8,"nodeType":"306","messageId":"307","endLine":7,"endColumn":18},{"ruleId":"304","severity":1,"message":"358","line":16,"column":8,"nodeType":"306","messageId":"307","endLine":16,"endColumn":14},{"ruleId":"304","severity":1,"message":"330","line":27,"column":12,"nodeType":"306","messageId":"307","endLine":27,"endColumn":21},{"ruleId":"304","severity":1,"message":"331","line":27,"column":23,"nodeType":"306","messageId":"307","endLine":27,"endColumn":35},{"ruleId":"304","severity":1,"message":"359","line":29,"column":12,"nodeType":"306","messageId":"307","endLine":29,"endColumn":23},{"ruleId":"304","severity":1,"message":"332","line":41,"column":11,"nodeType":"306","messageId":"307","endLine":41,"endColumn":20},{"ruleId":"304","severity":1,"message":"356","line":124,"column":21,"nodeType":"306","messageId":"307","endLine":124,"endColumn":29},{"ruleId":"304","severity":1,"message":"357","line":125,"column":21,"nodeType":"306","messageId":"307","endLine":125,"endColumn":30},{"ruleId":"304","severity":1,"message":"360","line":153,"column":11,"nodeType":"306","messageId":"307","endLine":153,"endColumn":31},{"ruleId":"304","severity":1,"message":"361","line":170,"column":11,"nodeType":"306","messageId":"307","endLine":170,"endColumn":30},{"ruleId":"323","severity":1,"message":"327","line":32,"column":66,"nodeType":"325","messageId":"326","endLine":32,"endColumn":68},{"ruleId":"304","severity":1,"message":"318","line":6,"column":8,"nodeType":"306","messageId":"307","endLine":6,"endColumn":16},{"ruleId":"304","severity":1,"message":"362","line":203,"column":11,"nodeType":"306","messageId":"307","endLine":203,"endColumn":26},{"ruleId":"304","severity":1,"message":"363","line":37,"column":12,"nodeType":"306","messageId":"307","endLine":37,"endColumn":28},{"ruleId":"312","severity":1,"message":"364","line":199,"column":8,"nodeType":"314","endLine":199,"endColumn":10,"suggestions":"365"},{"ruleId":"312","severity":1,"message":"366","line":339,"column":8,"nodeType":"314","endLine":339,"endColumn":31,"suggestions":"367"},"no-native-reassign",["368"],"no-negated-in-lhs",["369"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'getToken' is defined but never used.","'useRef' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.address'. Either include them or remove the dependency array.","ArrayExpression",["370"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'props.match.params.address', and 'props.match.params.notab'. Either include them or remove the dependency array.",["371"],"'StarIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'PikaButton' is defined but never used.","'AuthRedu' is assigned a value but never used.","'isCaptcha' is assigned a value but never used.","'setIsCaptcha' is assigned a value but never used.","'backModal' is assigned a value but never used.","'cartIcon' is defined but never used.","'Productimage' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'secretProd' is assigned a value but never used.","'clientIdProd' is assigned a value but never used.","'googleKeyProd' is assigned a value but never used.","'PikaTextField' is defined but never used.","'captchaCounter' is assigned a value but never used.","'setCaptchaCounter' is assigned a value but never used.","'lat' is assigned a value but never used.","'setLat' is assigned a value but never used.","'lon' is assigned a value but never used.","'setLon' is assigned a value but never used.","'showLoginDialog' is assigned a value but never used.","'showPinDialog' is assigned a value but never used.","'Swal' is defined but never used.","'closeLogo' is defined but never used.","'pikappLogo' is defined but never used.","'LoginDialog' is defined but never used.","'loginDialog' is assigned a value but never used.","'setLogin' is assigned a value but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'Button' is defined but never used.","'isLoginStep' is assigned a value but never used.","'showConfirmPinDialog' is assigned a value but never used.","'showForgotPinDialog' is assigned a value but never used.","'closeAuthDialog' is assigned a value but never used.","'indexCheckMandat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["372"],"React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'checkboxData', 'dispatch', 'props.datas.foodListCheckbox', 'props.datas.foodListRadio', 'radioData', 'totalCheckMandat', 'totalRadioMandat', and 'updateDataEdit'. Either include them or remove the dependency array.",["373"],"no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},"Update the dependencies array to be: [dispatch, props.match.params.address]",{"range":"382","text":"383"},"Update the dependencies array to be: [dispatch, history, props.match.params.address, props.match.params.notab]",{"range":"384","text":"385"},"Update the dependencies array to be: [AllRedu.openMenuCart, dispatch, props]",{"range":"386","text":"387"},"Update the dependencies array to be: [radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, totalCheckMandat, radioData, totalRadioMandat, dispatch]",{"range":"388","text":"389"},[1044,1046],"[dispatch, props.match.params.address]",[591,593],"[dispatch, history, props.match.params.address, props.match.params.notab]",[8654,8656],"[AllRedu.openMenuCart, dispatch, props]",[14720,14743],"[radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, totalCheckMandat, radioData, totalRadioMandat, dispatch]"]
=======
[{"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\index.js":"1","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\CartLayout.js":"2","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StatusLayout.js":"3","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\AuthLayout.js":"4","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MerchantQR.js":"5","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProfileLayout.js":"6","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StoreLayout.js":"7","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\DetailNavigation.js":"8","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MainNavigation.js":"9","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\ColorConstant.js":"10","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\APIConstant.js":"11","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Cart\\CartView.js":"12","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Profile\\ProfileView.js":"13","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Main\\JumbotronView.js":"14","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Status\\StatusView.js":"15","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Auth\\FormView.js":"16","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Store\\StoreView.js":"17","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Button\\PikaButton.js":"18","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\PikaModal.js":"19","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\TextField\\PikaTextField.js":"20","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\CartModal.js":"21","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\index.js":"22","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\index.js":"23","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AllReducers.js":"24","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\ButtonAction.js":"25","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\App.js":"26","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Store.js":"27","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProductLayout.js":"28","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Product\\ProductView.js":"29","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuDetail.js":"30","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuSelection.js":"31","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\LoginDialog.js":"32","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\RegisterDialog.js":"33","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\PinDialog.js":"34","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ConfirmPinDialog.js":"35","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ForgotPinDialog.js":"36","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AuthenticationReducers.js":"37","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\ResetPin\\ResetPinView.js":"38","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ResetPinDialog.js":"39","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ConfirmResetPinDialog.js":"40","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\NotifModal.js":"41","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\FoodCourtQR.js":"42","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Tour\\TourPage.js":"43"},{"size":456,"mtime":1619609816979,"results":"44","hashOfConfig":"45"},{"size":532,"mtime":1618198598860,"results":"46","hashOfConfig":"45"},{"size":865,"mtime":1614519902133,"results":"47","hashOfConfig":"45"},{"size":2443,"mtime":1618198598859,"results":"48","hashOfConfig":"45"},{"size":1737,"mtime":1621496752942,"results":"49","hashOfConfig":"45"},{"size":656,"mtime":1614927845136,"results":"50","hashOfConfig":"45"},{"size":1257,"mtime":1620222376547,"results":"51","hashOfConfig":"45"},{"size":860,"mtime":1618570418614,"results":"52","hashOfConfig":"45"},{"size":1954,"mtime":1619609929841,"results":"53","hashOfConfig":"45"},{"size":80,"mtime":1614519902089,"results":"54","hashOfConfig":"45"},{"size":785,"mtime":1620200677424,"results":"55","hashOfConfig":"45"},{"size":34894,"mtime":1621505024057,"results":"56","hashOfConfig":"45"},{"size":8796,"mtime":1621505024046,"results":"57","hashOfConfig":"45"},{"size":831,"mtime":1614519902137,"results":"58","hashOfConfig":"45"},{"size":26695,"mtime":1621505024009,"results":"59","hashOfConfig":"45"},{"size":13700,"mtime":1621505024008,"results":"60","hashOfConfig":"45"},{"size":15973,"mtime":1621512147499,"results":"61","hashOfConfig":"45"},{"size":991,"mtime":1614927845132,"results":"62","hashOfConfig":"45"},{"size":5545,"mtime":1617683991414,"results":"63","hashOfConfig":"45"},{"size":650,"mtime":1614927845134,"results":"64","hashOfConfig":"45"},{"size":5147,"mtime":1619609816968,"results":"65","hashOfConfig":"45"},{"size":246,"mtime":1618476021711,"results":"66","hashOfConfig":"45"},{"size":30,"mtime":1614927845139,"results":"67","hashOfConfig":"45"},{"size":1800,"mtime":1621504808509,"results":"68","hashOfConfig":"45"},{"size":877,"mtime":1617683991426,"results":"69","hashOfConfig":"45"},{"size":2680,"mtime":1621512147498,"results":"70","hashOfConfig":"45"},{"size":169,"mtime":1618198598863,"results":"71","hashOfConfig":"45"},{"size":274,"mtime":1617683991424,"results":"72","hashOfConfig":"45"},{"size":42451,"mtime":1621505024056,"results":"73","hashOfConfig":"45"},{"size":21745,"mtime":1621329422093,"results":"74","hashOfConfig":"45"},{"size":32865,"mtime":1621505024006,"results":"75","hashOfConfig":"45"},{"size":6427,"mtime":1619006161594,"results":"76","hashOfConfig":"45"},{"size":11231,"mtime":1619008007918,"results":"77","hashOfConfig":"45"},{"size":15690,"mtime":1621505024000,"results":"78","hashOfConfig":"45"},{"size":12739,"mtime":1621505023996,"results":"79","hashOfConfig":"45"},{"size":8867,"mtime":1621505023998,"results":"80","hashOfConfig":"45"},{"size":931,"mtime":1621497046336,"results":"81","hashOfConfig":"45"},{"size":1858,"mtime":1619013742817,"results":"82","hashOfConfig":"45"},{"size":11319,"mtime":1619014022352,"results":"83","hashOfConfig":"45"},{"size":18158,"mtime":1621505024003,"results":"84","hashOfConfig":"45"},{"size":862,"mtime":1618628857384,"results":"85","hashOfConfig":"45"},{"size":672,"mtime":1621505024065,"results":"86","hashOfConfig":"45"},{"size":1338,"mtime":1621501442791,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"eto61a",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"90"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\index.js",[],["193","194"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\CartLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StatusLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\AuthLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MerchantQR.js",["195","196"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProfileLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\StoreLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\DetailNavigation.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\MainNavigation.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\ColorConstant.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Asset\\Constant\\APIConstant.js",["197","198","199"],"export const address = \"https://dev-api.pikapp.id/\";\r\n// export const address = \"https://api.pikapp.id/\";\r\n\r\nvar secretDev = \"21f6fc80-cfdb-11ea-87d0-0242ac130003\"\r\nvar secretProd = \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\"\r\nexport const secret = secretDev;\r\n\r\nvar clientIdDev = \"abf0e2a9-e9ee-440f-8563-94481c64b797\"\r\nvar clientIdProd = \"d4aummjdkbzdsd46vygjvcy235ywmhkm\"\r\nexport const clientId = clientIdDev;\r\n// googleKeyDev need to activate billing which later should pay after expired\r\nvar googleKeyProd = \"AIzaSyBMG_JpxmoPEBH6fpveaowU2vkWYrZEw1Y\"\r\nvar googleKeyDev = \"AIzaSyAikqroR5x4BrRv5Yj-tWgUcqvjEKUysh4\"\r\nexport const googleKey = googleKeyDev;\r\n\r\nexport const jwtSecret = \"Er3lzchUa489bdlg35PCaGMKk2YzflBHCMue2jIAy9nFENvokE0JUbwytMFSvrajK8gYDttMdvzWw0OBRydt7pXfAAd1DTxWvE0Hc\"\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Cart\\CartView.js",["200","201","202","203","204","205","206"],"import React from \"react\";\r\nimport ArrowDownColor from \"../../Asset/Icon/ArrowDownColor.png\";\r\nimport ArrowRightWhite from \"../../Asset/Icon/ArrowRightWhite.png\";\r\nimport diningTableColor from \"../../Asset/Icon/diningTableColor.png\";\r\nimport takeawayColor from \"../../Asset/Icon/takeawayColor.png\";\r\nimport CashierPayment from \"../../Asset/Icon/CashierPayment.png\";\r\nimport OvoPayment from \"../../Asset/Icon/ovo_icon.png\";\r\nimport checklistLogo from \"../../Asset/Icon/checklist.png\";\r\nimport ArrowBack from \"../../Asset/Icon/arrow-left.png\";\r\nimport CartModal from \"../../Component/Modal/CartModal\";\r\nimport { cart } from \"../../App\";\r\nimport { address, secret, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport MenuDetail from '../../Component/Menu/MenuDetail'\r\nimport NotifModal from '../../Component/Modal/NotifModal'\r\nimport { connect } from \"react-redux\";\r\nimport { EditMenuCart } from '../../Redux/Actions'\r\nimport Loader from 'react-loader-spinner'\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { LoadingButton, DoneLoad } from '../../Redux/Actions'\r\nimport Swal from 'sweetalert2';\r\nimport TourPage from '../../Component/Tour/TourPage';\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: []\r\n};\r\n\r\nvar currentTotal = 0\r\n\r\nvar finalProduct = [\r\n  {\r\n    totalPrice: 20000,\r\n    discountPrice: 0,\r\n  },\r\n]\r\n\r\nclass CartView extends React.Component {\r\n  state = {\r\n    changeUI: true,\r\n    showModal: false,\r\n    currentModalTitle: \"\",\r\n    paymentOption: \"Pembayaran Di Kasir\",\r\n    paymentType: \"PAY_BY_CASHIER\",\r\n    biz_type: this.props.noTable !== undefined ? this.props.noTable > 0 ? \"DINE_IN\" : \"TAKE_AWAY\" : \"DINE_IN\",\r\n    eat_type: this.props.noTable !== undefined ? this.props.noTable > 0 ? \"Makan Di Tempat\" : \"Bungkus / Takeaway\" : \"Makan Di Tempat\",\r\n    indexOptionEat: this.props.noTable !== undefined ? this.props.noTable > 0 ? 0 : 1 : 0,\r\n    indexOptionPay: 0,\r\n    currentModal: [\r\n      {\r\n        image: \"\",\r\n        option: \"\",\r\n      },\r\n    ],\r\n    loadButton: false,\r\n    showMenuDet: false,\r\n    filteredCart: [],\r\n    currentData: {},\r\n    themid: '',\r\n    indexEdit: 0,\r\n    updateData: '',\r\n    successMessage: '',\r\n    isEmailVerified : false,\r\n    isShowCounterTime : false,\r\n    countHit : 0,\r\n    counterTime : 120,\r\n    startTour : false,\r\n    steptour:[\r\n      {\r\n        selector: '.cart-foodService',\r\n        content : () => (\r\n          <div>\r\n            <h4>Mau makan dimana?</h4>\r\n            <br />\r\n            <span>Kamu bisa ubah pilihan makan kamu antara Makan di Tempat atau Takeaway</span>\r\n          </div>\r\n        ),\r\n      },\r\n      {\r\n        selector: '.cart-paymentService',\r\n        content : () => (\r\n          <div>\r\n            <h4>Bayar pakai apa?</h4>\r\n            <br />\r\n            <span>Kami menyediakan 2 tipe pembayaran, secara OVO ataupun bayar di kasir</span>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        selector: '.cart-OrderButton',\r\n        content : () => (\r\n          <div>\r\n            <h4>Sudah siap makan?</h4>\r\n            <br />\r\n            <span>Silakan tekan tombol Order untuk melakukan pembayaran (psstt, untuk pembayaran di kasir, jangan lupa ke kasir ya!)</span>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        selector: '.cart-OrderButton-mob',\r\n        content : () => (\r\n          <div>\r\n            <h4>Sudah siap makan?</h4>\r\n            <br />\r\n            <span>Silakan tekan tombol Order untuk melakukan pembayaran (psstt, untuk pembayaran di kasir, jangan lupa ke kasir ya!)</span>\r\n          </div>\r\n        )\r\n      }\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n      is_email_verified: true\r\n    };\r\n\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    if(window.innerWidth < 700) {\r\n      this.state.steptour.splice(2,1);\r\n    } else {\r\n      this.state.steptour.pop();\r\n    }\r\n\r\n    if (localStorage.getItem(\"cartTour\") == 1) {\r\n      this.setState({ startTour : true});\r\n    } else if (localStorage.getItem('merchantFlow') == 1) {\r\n      this.setState({ startTour : true});\r\n    }\r\n\r\n    this.setState({ isEmailVerified: auth.is_email_verified });\r\n\r\n    if (this.state.isEmailVerified === false) {\r\n      this.handleReloadEmail();\r\n    }\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if(this.state.counterTime === 0) {\r\n      clearInterval(this.interval);\r\n      console.log(\"clear\");\r\n    }\r\n  }\r\n\r\n  handleDetail(data) {\r\n    if (data === \"eat-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Pilih Cara Makan Anda\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"dineIn\",\r\n            option: \"Makan Di Tempat\",\r\n          },\r\n          {\r\n            image: \"takeaway\",\r\n            option: \"Takeaway / Bungkus\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"pay-method\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Bayar Pakai Apa\" });\r\n      this.setState({\r\n        currentModal: [\r\n          {\r\n            image: \"cashier\",\r\n            option: \"Pembayaran Di Kasir\",\r\n          },\r\n          {\r\n            image: \"ovo\",\r\n            option: \"Pembayaran Ovo\",\r\n          },\r\n        ],\r\n      });\r\n    } else if (data === \"payment-detail\") {\r\n      this.setState({ showModal: true });\r\n      this.setState({ currentModalTitle: \"Rincian Pembayaran\" });\r\n      this.setState({\r\n        currentModal: finalProduct\r\n      });\r\n    }\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleDecrease(e, ind, mid) {\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    if (e.foodAmount > 1) {\r\n      let filteredStore = []\r\n      allCart.forEach((store) => {\r\n        if (store.mid === mid) {\r\n          filteredStore = store.food.filter((data, index) => {\r\n            return index === ind\r\n          })\r\n\r\n          let { foodAmount, foodTotalPrice } = filteredStore[0]\r\n\r\n          let countAmount = foodTotalPrice - (foodTotalPrice / foodAmount)\r\n\r\n          filteredStore[0].foodTotalPrice = countAmount\r\n          filteredStore[0].foodAmount = foodAmount - 1\r\n          store.food[ind] = filteredStore[0]\r\n        }\r\n      });\r\n\r\n      localStorage.setItem('cart', JSON.stringify(allCart))\r\n      this.setState({ updateData: 'updated' })\r\n    } else {\r\n      let filteredCart;\r\n      let addedMerchants = []\r\n      let newAllCart = []\r\n      allCart.forEach((store) => {\r\n        if (store.mid === mid) {\r\n          let filteredStore = store.food.filter((data, index) => {\r\n            return index !== ind\r\n          })\r\n\r\n          if (filteredStore.length === 0) {\r\n            filteredCart = cart.filter((filterStore) => {\r\n              return filterStore.mid !== store.mid;\r\n            });\r\n            localStorage.setItem(\"cart\", JSON.stringify(filteredCart))\r\n            filteredCart.forEach((cart) => {\r\n              addedMerchants.push(cart.mid)\r\n              Cookies.set(\"addedMerchants\", addedMerchants)\r\n            })\r\n          } else {\r\n            let newFilter = store.food\r\n            newFilter = []\r\n            filteredStore.forEach((val) => {\r\n              newFilter.push(val)\r\n            })\r\n            store.food = newFilter\r\n            newAllCart.push(store)\r\n          }\r\n        } else {\r\n          newAllCart.push(store)\r\n        }\r\n      });\r\n\r\n      if (newAllCart.length < 2) {\r\n        cart.splice(1)\r\n        localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n        window.history.back()\r\n      } else {\r\n        let filterMerchantCart = newAllCart.filter(valueCart => {\r\n          return valueCart.mid === mid\r\n        })\r\n        localStorage.setItem(\"cart\", JSON.stringify(newAllCart))\r\n        if (filterMerchantCart.length) {\r\n          this.setState({ updateData: 'updated' })\r\n        } else {\r\n          window.history.back()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleIncrease(e, ind, mid) {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === ind\r\n        })\r\n\r\n        let { foodAmount, foodTotalPrice } = filteredStore[0]\r\n\r\n        let countAmount = foodTotalPrice + (foodTotalPrice / foodAmount)\r\n\r\n        filteredStore[0].foodTotalPrice = countAmount\r\n        filteredStore[0].foodAmount = foodAmount + 1\r\n        store.food[ind] = filteredStore[0]\r\n      }\r\n    });\r\n\r\n    localStorage.setItem('cart', JSON.stringify(allCart))\r\n    this.setState({ updateData: 'updated' })\r\n  }\r\n\r\n  handleOption = (data) => {\r\n    let valueTab\r\n    if (this.props.noTable !== undefined) {\r\n      if (this.state.currentModalTitle === \"Pilih Cara Makan Anda\") {\r\n        if (data == 1) {\r\n          valueTab = 0\r\n          valueTab.toString()\r\n          localStorage.setItem('table', valueTab)\r\n        } else {\r\n          valueTab = localStorage.getItem('lastTable')\r\n          valueTab.toString()\r\n          localStorage.setItem('table', valueTab)\r\n        }\r\n      }\r\n    }\r\n    if (this.state.currentModalTitle === \"Pilih Cara Makan Anda\") {\r\n      if (data == 0) {\r\n        this.setState({ biz_type: \"DINE_IN\", eat_type: \"Makan Di Tempat\", indexOptionEat: 0 })\r\n      } else {\r\n        this.setState({ biz_type: \"TAKE_AWAY\", eat_type: \"Bungkus / Takeaway\", indexOptionEat: data })\r\n      }\r\n    } else if (this.state.currentModalTitle === \"Bayar Pakai Apa\") {\r\n      if (data === 0) {\r\n        this.setState({ paymentType: \"PAY_BY_CASHIER\", paymentOption: \"Pembayaran Di Kasir\", indexOptionPay: 0 })\r\n      } else {\r\n        this.setState({ paymentType: \"WALLET_OVO\", paymentOption: \"Pembayaran Ovo\", indexOptionPay: data })\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePayment = () => {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      window.history.back()\r\n    }\r\n    this.props.LoadingButton()\r\n\r\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    let storageData = JSON.parse(localStorage.getItem('cart'))\r\n    let noTab = this.props.noTable ? this.props.noTable : 0\r\n    let allMenu = storageData.filter(filterCart => {\r\n      return filterCart.mid === currentCartMerchant.mid\r\n    })\r\n    let selectedProd = []\r\n\r\n    allMenu[0].food.forEach(selectMenu => {\r\n      let newlistArr = ''\r\n      let extraprice = 0\r\n      selectMenu.foodListCheckbox.forEach((val) => {\r\n        val.forEach((val2) => {\r\n          newlistArr += `${val2.name}, `\r\n          extraprice += val2.price\r\n        })\r\n      })\r\n\r\n      selectMenu.foodListRadio.forEach((val) => {\r\n        val.forEach((val2) => {\r\n          newlistArr += `${val2.name}, `\r\n          extraprice += val2.price\r\n        })\r\n      })\r\n\r\n      newlistArr += selectMenu.foodNote\r\n      extraprice = extraprice.toString()\r\n\r\n      selectedProd.push({\r\n        product_id: selectMenu.productId,\r\n        notes: newlistArr,\r\n        qty: selectMenu.foodAmount,\r\n        extra_price: extraprice\r\n      })\r\n    })\r\n\r\n    var requestData = {\r\n      products: selectedProd,\r\n      payment_with: this.state.paymentType,\r\n      mid: currentCartMerchant.mid,\r\n      prices: finalProduct[0].totalPrice.toString(),\r\n      biz_type: this.state.biz_type,\r\n      table_no: noTab.toString()\r\n    }\r\n\r\n    // console.log(requestData);\r\n\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replace(/-/g, \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n\r\n    Axios(address + \"/txn/v2/txn-post/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"POST\",\r\n      data: requestData,\r\n    })\r\n      .then((res) => {\r\n        if (this.state.paymentType === 'PAY_BY_CASHIER') {\r\n          this.setState({ successMessage: 'Silahkan Bayar ke Kasir/Penjual' })\r\n          setTimeout(() => {\r\n            let filterOtherCart = storageData.filter(valFilter => {\r\n              return valFilter.mid !== currentCartMerchant.mid\r\n            })\r\n            localStorage.setItem(\"cart\", JSON.stringify(filterOtherCart))\r\n            localStorage.removeItem(\"table\")\r\n            localStorage.removeItem(\"lastTable\")\r\n            localStorage.removeItem(\"fctable\")\r\n            this.setState({ loadButton: true })\r\n            this.props.DoneLoad()\r\n          }, 1000);\r\n        } else {\r\n          this.setState({ successMessage: 'Silahkan Bayar melalui OVO' })\r\n          setTimeout(() => {\r\n            let filterOtherCart = storageData.filter(valFilter => {\r\n              return valFilter.mid !== currentCartMerchant.mid\r\n            })\r\n            localStorage.setItem(\"cart\", JSON.stringify(filterOtherCart))\r\n            localStorage.removeItem(\"table\")\r\n            localStorage.removeItem(\"lastTable\")\r\n            localStorage.removeItem(\"fctable\")\r\n            this.setState({ loadButton: true })\r\n            this.props.DoneLoad()\r\n          }, 1000);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data !== undefined) {\r\n          alert(err.response.data.err_message)\r\n          this.props.DoneLoad()\r\n        }\r\n      });\r\n  };\r\n\r\n  notifModal = () => {\r\n    if (this.props.AllRedu.buttonLoad === false) {\r\n      return <NotifModal isShowNotif={this.props.AllRedu.buttonLoad} responseMessage={this.state.successMessage} />\r\n    }\r\n  }\r\n\r\n  newListAllChoices = (food) => {\r\n    let newlistArr = ''\r\n    food.foodListCheckbox.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    food.foodListRadio.forEach((val) => {\r\n      val.forEach((val2) => {\r\n        return newlistArr += `${val2.name}, `\r\n      })\r\n    })\r\n    return <h5 className='cartList-content-choice'>{newlistArr}</h5>\r\n  }\r\n\r\n  onEditCart = (ind, mid) => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    allCart.forEach((store) => {\r\n      if (store.mid === mid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === ind\r\n        })\r\n      }\r\n    });\r\n\r\n    var objFilteredCart = {\r\n      productId: filteredStore[0].productId,\r\n      foodName: filteredStore[0].foodName,\r\n      foodDesc: \"\",\r\n      foodCategory: filteredStore[0].foodCategory,\r\n      foodPrice: filteredStore[0].foodPrice,\r\n      foodImage: filteredStore[0].foodImage,\r\n      foodNote: filteredStore[0].foodNote,\r\n      foodListCheckbox: filteredStore[0].foodListCheckbox,\r\n      foodListRadio: filteredStore[0].foodListRadio,\r\n      foodTotalPrice: filteredStore[0].foodTotalPrice,\r\n      foodExt: [\r\n        {\r\n          name: \"\",\r\n          amount: filteredStore[0].foodAmount,\r\n        },\r\n      ],\r\n    }\r\n\r\n    this.setState({ showMenuDet: true, filteredCart: filteredStore, currentData: objFilteredCart, indexEdit: ind, themid: mid })\r\n    this.props.EditMenuCart(true)\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  handleCartAmount = (price) => {\r\n    currentTotal = price\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleAmount={this.handleCartAmount}\r\n          handleClick={this.handleSaveCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data\r\n  }\r\n\r\n  handleSaveCart = () => {\r\n    let filteredStore = []\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    let getProductId\r\n    allCart.forEach((store) => {\r\n      if (store.mid === this.state.themid) {\r\n        filteredStore = store.food.filter((data, index) => {\r\n          return index === this.state.indexEdit\r\n        })\r\n\r\n        getProductId = filteredStore[0].productId\r\n\r\n        filteredStore[0].foodAmount = currentExt.detailCategory[0].amount\r\n        filteredStore[0].foodListCheckbox = currentExt.listcheckbox\r\n        filteredStore[0].foodListRadio = currentExt.listradio\r\n        filteredStore[0].foodNote = currentExt.note\r\n        filteredStore[0].foodTotalPrice = currentTotal\r\n\r\n        store.food[this.state.indexEdit] = filteredStore[0]\r\n      }\r\n    });\r\n    localStorage.setItem('cart', JSON.stringify(allCart))\r\n    this.setState({ updateData: 'updated' })\r\n\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    let newNotes = ''\r\n    currentExt.listcheckbox.forEach(val => {\r\n      val.forEach(val2 => {\r\n        return newNotes += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    currentExt.listradio.forEach(val => {\r\n      val.forEach(val2 => {\r\n        return newNotes += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    if (currentExt.note) {\r\n      newNotes += currentExt.note\r\n    }\r\n\r\n    console.log(newNotes);\r\n\r\n    let uuid = uuidV4();\r\n    const date = new Date().toISOString();\r\n    uuid = uuid.replace(/-/g, \"\");\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/cart-post/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"POST\",\r\n      data: {\r\n        mid: this.state.themid,\r\n        pid: getProductId,\r\n        notes: newNotes,\r\n        qty: currentExt.detailCategory[0].amount,\r\n      }\r\n    })\r\n      .then(() => {\r\n        console.log('savetocart succeed');\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  handleReloadEmail = () => {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n      is_email_verified: true\r\n    };\r\n\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    if (auth.is_email_verified === false) {\r\n      console.log(auth)\r\n      let uuid = uuidV4();\r\n      uuid = uuid.replace(/-/g, \"\");\r\n      const date = new Date().toISOString();\r\n      let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n      Axios(address + \"home/v2/customer-info\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-request-id\": uuid,\r\n          \"x-request-timestamp\": date,\r\n          \"x-client-id\": clientId,\r\n          \"x-signature\": signature,\r\n          \"token\": auth.token,\r\n        },\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          let data = res.data.results\r\n          auth.is_email_verified = data.is_email_verified;\r\n          Cookies.set(\"auth\", auth, { expires: 1 });\r\n          this.setState({ isEmailVerified: auth.is_email_verified });\r\n        })\r\n        .catch((err) => {\r\n        });\r\n    }\r\n  }\r\n\r\n  handleResendEmail = () => {\r\n    this.setState({ countHit: this.state.countHit + 1 });\r\n\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n      is_email_verified : true\r\n    };\r\n\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replace(/-/g, \"\");\r\n    const date = new Date().toISOString();\r\n    Axios(address + \"auth/resend-email/\" + auth.email + \"/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        Swal.fire({\r\n            position: 'top',\r\n            icon: 'success',\r\n            title: 'Email telah terkirim. Silahkan periksa email Anda.',\r\n            showConfirmButton: true,\r\n            confirmButtonColor: \"#4bb7ac\",\r\n            confirmButtonText: \"OK\",\r\n            closeOnConfirm: false,\r\n            // timer: 3000\r\n        }).then(() => {\r\n            if(this.state.countHit > 1) {\r\n              this.setState({ counterTime : 300});\r\n            } else {\r\n              this.setState({ counterTime : 120});\r\n            }\r\n            \r\n            this.setState({ isShowCounterTime : true });\r\n            this.countDownTime();\r\n        })\r\n      })\r\n      .catch((err) => {\r\n      });\r\n\r\n  }\r\n\r\n  countDownTime = () => {\r\n    this.interval = setInterval(\r\n      () => this.setState((state)=> ({ counterTime: this.state.counterTime - 1 })),\r\n      1000\r\n    );\r\n  }\r\n\r\n  tourPage = () => {\r\n    if (this.state.startTour === true) {\r\n      return (\r\n        <TourPage \r\n          stepsContent={this.state.steptour}\r\n          isShowTour={this.state.startTour}\r\n          isHideTour={() =>this.showTourPage(false)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  showTourPage = (isShowTour) => {\r\n    this.setState({ startTour: isShowTour });\r\n    document.body.style.overflowY = 'auto';\r\n    localStorage.setItem('cartTour', 0);\r\n    if(this.props.AuthRedu.isMerchantQR === true) {\r\n      localStorage.setItem('merchantFlow', 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loadButton) {\r\n      return <Redirect to='/status' />\r\n    }\r\n\r\n    const currentCartMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    let allCart = JSON.parse(localStorage.getItem('cart'))\r\n    let filterCart = allCart.filter(valCart => {\r\n      return valCart.mid === currentCartMerchant.mid\r\n    })\r\n    if (filterCart.length === 0) {\r\n      window.history.go(-1)\r\n    } else {\r\n      if (this.state.changeUI) {\r\n        this.setState({ changeUI: false })\r\n      }\r\n    }\r\n\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n      is_email_verified: true\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      // window.location.href = \"/login\"\r\n    }\r\n\r\n    let modal;\r\n    if (this.state.showModal === true) {\r\n      modal = (\r\n        <CartModal\r\n          isShow={this.state.showModal}\r\n          onHide={() => this.setModal(false)}\r\n          title={this.state.currentModalTitle}\r\n          detailOptions={this.state.currentModal}\r\n          handleData={this.handleOption}\r\n          indexOptionEat={this.state.indexOptionEat}\r\n          indexOptionPay={this.state.indexOptionPay}\r\n        />\r\n      );\r\n    } else {\r\n      modal = <></>\r\n    }\r\n\r\n    let storageData = JSON.parse(localStorage.getItem('cart'))\r\n    let data = storageData;\r\n    let storeList = data.filter((store) => {\r\n      if (store.mid !== \"\") {\r\n        return store;\r\n      }\r\n    });\r\n\r\n    let contentView = storeList.map((store) => {\r\n      let storeFood\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        storeFood = store.food.map((food, index) => {\r\n          return (\r\n            <div key={index} className='cartList-content'>\r\n              <div className='cartList-content-frame'>\r\n                <img className='cartList-content-image' src={food.foodImage} alt='' />\r\n              </div>\r\n\r\n              <div className='cartList-content-detail'>\r\n                <div className='cartList-content-detail-left'>\r\n                  <h2 className='cartList-content-title'>{food.foodName}</h2>\r\n                  {this.newListAllChoices(food)}\r\n                  <h5 className='cartList-content-notes'>{food.foodNote}</h5>\r\n                  <h3 className='cartList-content-price'>{Intl.NumberFormat(\"id-ID\").format(food.foodTotalPrice)}</h3>\r\n                </div>\r\n\r\n                <div className='cartList-content-detail-right'>\r\n                  <div className='cartList-editButton' onClick={() => this.onEditCart(index, store.mid)}>\r\n                    <div className='cartList-editWord'>EDIT</div>\r\n                  </div>\r\n\r\n                  <div className='cartList-amountBox'>\r\n                    <div className='cartList-amountBox-inside'>\r\n                      <div className='cartList-minusBox' onClick={() => this.handleDecrease(food, index, store.mid)}>\r\n                        <div className='cartList-minusSym'>\r\n                          -\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className='cartList-numberArea'>\r\n                        {food.foodAmount}\r\n                      </div>\r\n\r\n                      <div className='cartList-plusBox' onClick={() => this.handleIncrease(food, index, store.mid)}>\r\n                        <div className='cartList-plusSym'>\r\n                          +\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n      return storeFood\r\n    });\r\n\r\n    let detailView = storeList.map((store, index) => {\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        return (\r\n          <div key={index} className='cart-storeBox'>\r\n            <div className='cart-storeBox-header'>\r\n              <div className='cart-storeBox-title'>\r\n                {store.storeName}\r\n              </div>\r\n\r\n              <div className='cart-storeBox-distance'>\r\n                {store.storeDistance}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='cart-storeBox-content'>\r\n              <h4 className='cart-storeBox-descArea'>\r\n                {store.storeDesc}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    });\r\n\r\n    let totalPaymentShow = 0\r\n    let selectedMerch = storeList.map(store => {\r\n      if (store.mid === currentCartMerchant.mid) {\r\n        return store\r\n      }\r\n    });\r\n\r\n    selectedMerch[0].food.forEach(thefood => {\r\n      totalPaymentShow += thefood.foodTotalPrice\r\n    })\r\n\r\n    finalProduct = [\r\n      {\r\n        totalPrice: totalPaymentShow,\r\n        discountPrice: 0,\r\n      },\r\n    ]\r\n\r\n    let paymentImage;\r\n    let eatImage;\r\n    if (this.state.biz_type === \"DINE_IN\") {\r\n      eatImage = diningTableColor;\r\n    } else if (this.state.biz_type === \"TAKE_AWAY\") {\r\n      eatImage = takeawayColor;\r\n    }\r\n    if (this.state.paymentType === \"PAY_BY_CASHIER\") {\r\n      paymentImage = CashierPayment\r\n    } else if (this.state.paymentType === \"WALLET_OVO\") {\r\n      paymentImage = OvoPayment\r\n    }\r\n\r\n    if (this.state.changeUI) {\r\n      return (\r\n        <div style={{ display: 'flex', position: 'absolute', height: '100%', width: '100%', justifyContent: 'center', alignItems: 'center' }}>\r\n          <Loader\r\n            type=\"TailSpin\"\r\n            color=\"#4bb7ac\"\r\n            height={100}\r\n            width={100}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className='cartLayout'>\r\n          {\r\n          !this.state.isEmailVerified ?\r\n          <div className='verificationMsg'>\r\n            <div className='message'>Verifikasi Email Anda</div>\r\n            <div className='messageSend'>\r\n              <span>Email Verifikasi Telah Dirim ke Alamat Email Teregistrasi: <span className=\"txtBold\"> {auth.email} </span> </span>. Belum Masuk ? \r\n              { this.state.counterTime !== 0 && this.state.countHit > 0 ? <span className=\"txtIndent\" disabled={true}>Kirim Ulang</span> : <span className=\"txtUnderline\" onClick={() => this.handleResendEmail()}>Kirim Ulang</span> }\r\n              { this.state.isShowCounterTime ? <span className=\"txtIndent\"> {this.state.counterTime} sec </span> : <span> </span>}\r\n            </div>\r\n          </div>\r\n          :\r\n          <div></div>\r\n          }\r\n          <div className='cartTitle'>\r\n            <span className='logopikappCenter' onClick={() => window.history.back()} >\r\n              <img className='LogoPikappCart' src={ArrowBack} alt='' />\r\n            </span>\r\n\r\n            <h2 className='confirmationOrder'>Konfirmasi Pesanan Anda</h2>\r\n          </div>\r\n\r\n          <div className='cartContent'>\r\n            <div className='cart-LeftSide'>\r\n              <div className='cartList'>\r\n                <div className='cartList-header'>\r\n                  <h4 className='cartList-title'>\r\n                    Item Yang Dibeli\r\n                  </h4>\r\n                </div>\r\n\r\n                {contentView}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='cart-RightSide'>\r\n              <div className='flex-RightSide'>\r\n                {detailView}\r\n\r\n                <div className='cart-foodService' onClick={() => this.handleDetail(\"eat-method\")}>\r\n                  <div className='cart-foodService-header'>\r\n                    <div className='cart-foodService-title'>\r\n                      Pilih Cara Makan Anda\r\n                    </div>\r\n\r\n                    <div className='cart-foodService-selectButton' >\r\n                      <img className='cart-foodService-selectIcon' src={ArrowDownColor} alt='' />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className='cart-foodService-content'>\r\n                    <div className='cart-foodService-descArea'>\r\n                      <span>\r\n                        <img className='cart-foodService-logo' src={eatImage} alt='' />\r\n                      </span>\r\n\r\n                      <h3 className='cart-foodService-words'>\r\n                        {this.state.eat_type}\r\n                      </h3>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='cart-paymentService' onClick={() => this.handleDetail(\"pay-method\")}>\r\n                  <div className='cart-paymentService-header'>\r\n                    <div className='cart-paymentService-title'>\r\n                      Bayar Pakai Apa?\r\n                    </div>\r\n\r\n                    <div className='cart-paymentService-selectButton'>\r\n                      <img className='cart-paymentService-selectIcon' src={ArrowDownColor} alt='' />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className='cart-paymentService-content'>\r\n                    <div className='cart-paymentService-descArea'>\r\n                      <span>\r\n                        <img className='cart-paymentService-logo' src={paymentImage} alt='' />\r\n                      </span>\r\n\r\n                      <h3 className='cart-paymentService-words'>\r\n                        {this.state.paymentOption}\r\n                      </h3>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='cart-checkoutArea'>\r\n                  <div className='cart-TotalAmount' onClick={() => this.handleDetail(\"payment-detail\")}>\r\n                    <h3 className='cart-TotalAmount-title'>Total Bayar</h3>\r\n\r\n                    <div className='cart-TotalAmount-bottom'>\r\n                      <h2 className='cart-TotalAmount-price'>Rp. {Intl.NumberFormat(\"id-ID\").format(totalPaymentShow)}</h2>\r\n\r\n                      <img className='cart-TotalAmount-detailArrow' src={ArrowDownColor} alt='' />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className='cart-OrderButton buttonorder' onClick={() => this.handlePayment()}>\r\n                    <div className='cart-OrderButton-content'>\r\n                      <span className='cart-OrderButton-Frame'>\r\n                        <img className='cart-OrderButton-checklist' src={checklistLogo} alt='' />\r\n                      </span>\r\n\r\n                      <h1 className='cart-OrderButton-word'>PESAN</h1>\r\n                    </div>\r\n\r\n                    <span>\r\n                      <img className='cart-OrderButton-orderArrow' src={ArrowRightWhite} alt='' />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='cartLayout-mob'>\r\n          <div className='cart-checkoutArea-mob'>\r\n\r\n            <div className='cart-TotalAmount-mob' onClick={() => this.handleDetail(\"payment-detail\")}>\r\n              <h3 className='cart-TotalAmount-title-mob'>Total Bayar</h3>\r\n\r\n              <div className='cart-TotalAmount-bottom-mob'>\r\n                <h2 className='cart-TotalAmount-price-mob'>Rp. {Intl.NumberFormat(\"id-ID\").format(totalPaymentShow)}</h2>\r\n\r\n                <span className='cart-TotalAmount-detailArrowCenter-mob'>\r\n                  <img className='cart-TotalAmount-detailArrow-mob' src={ArrowDownColor} alt='' />\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='cart-OrderButton-mob buttonorder' onClick={() => this.handlePayment()}>\r\n              <div className='cart-OrderButton-content-mob'>\r\n                <span className='cart-OrderButton-Frame-mob'>\r\n                  <img className='cart-OrderButton-checklist-mob' src={checklistLogo} alt='' />\r\n                </span>\r\n\r\n                <h1 className='cart-OrderButton-word-mob'>PESAN</h1>\r\n              </div>\r\n\r\n              <span className='cart-OrderButton-orderArrowCenter-mob'>\r\n                <img className='cart-OrderButton-orderArrow-mob' src={ArrowRightWhite} alt='' />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {modal}\r\n        {this.menuDetail()}\r\n        {this.notifModal()}\r\n        {this.tourPage()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu,\r\n    AuthRedu: state.AuthRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { EditMenuCart, LoadingButton, DoneLoad })(CartView)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Profile\\ProfileView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Main\\JumbotronView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Status\\StatusView.js",["207","208","209","210"],"import React from \"react\";\r\nimport { Row, Col, Nav, Card, Modal } from \"react-bootstrap\";\r\nimport unpaidIcon from \"../../Asset/Icon/unpaid_status.png\";\r\nimport unpaidActiveIcon from \"../../Asset/Icon/unpaid_active_status.png\";\r\nimport packIcon from \"../../Asset/Icon/pack_status.png\";\r\nimport packActiveIcon from \"../../Asset/Icon/pack_active_status.png\";\r\nimport sendIcon from \"../../Asset/Icon/send_status.png\";\r\nimport sendActiveIcon from \"../../Asset/Icon/send_active_status.png\";\r\nimport reviewIcon from \"../../Asset/Icon/review_status.png\";\r\nimport reviewActiveIcon from \"../../Asset/Icon/review_active_status.png\";\r\nimport placeholderIcon from \"../../Asset/Icon/placeholder_icon.png\";\r\nimport dineinIcon from \"../../Asset/Icon/dinein_icon.png\";\r\nimport takeawayIcon from \"../../Asset/Icon/takeaway_icon.png\";\r\nimport categoryFoodIcon from \"../../Asset/Icon/category_food_icon.png\";\r\nimport pickupStatusIcon from \"../../Asset/Icon/pickup_status_icon.png\";\r\nimport cashierStatusIcon from \"../../Asset/Icon/cashier_icon.png\"\r\nimport ovoIcon from \"../../Asset/Icon/ovo_icon.png\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport Axios from \"axios\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport Cookies from \"js-cookie\";\r\nimport RegisterDialog from '../../Component/Authentication/RegisterDialog';\r\nimport Rating from 'react-rating'\r\n\r\nexport class StatusView extends React.Component {\r\n  state = {\r\n    showModal: false,\r\n    activeTab: 1,\r\n    showRegisterDialog : false,\r\n    isLogin : false,\r\n    data: [\r\n      {\r\n        title: \"\",\r\n        distance: \"\",\r\n        quantity: \"\",\r\n        status: \"\",\r\n        biz_type: \"\",\r\n        payment: \"\",\r\n        transactionId: \"\",\r\n        transactionTime: \"\",\r\n      },\r\n    ],\r\n    currentModal: {\r\n      transactionId: \"\",\r\n      transactionTime: \"\",\r\n      storeName: \"Store\",\r\n      storeLocation: \"Location\",\r\n      storeDistance: \"Distance\",\r\n      status: \"Status\",\r\n      payment: \"Cash\",\r\n      biz_type: \"\",\r\n      food: [\r\n        {\r\n          productId: \"\",\r\n          name: \"\",\r\n          price: 0,\r\n          image: \"\",\r\n          note: \"\",\r\n          quantity: 1,\r\n        },\r\n      ],\r\n    },\r\n    ratingScore: 0,\r\n    openRating: false,\r\n    ratingNote: \"\",\r\n    dummyData: [\r\n      {\r\n        title: \"goldlands\",\r\n        distance: \"7km\",\r\n        quantity: \"1\",\r\n        status: \"FINALIZE\",\r\n        biz_type: \"DINE_IN\",\r\n        payment: \"WALLET_OVO\",\r\n        transactionId: \"7777777\",\r\n        transactionTime: \"30 Januari 1994\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  handleDetail(transId) {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      // window.location.href = \"/login\"\r\n    }\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/\" + transId + \"/txn-detail/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var resultModal = { ...this.currentModal }\r\n        resultModal.transactionId = results.transaction_id\r\n        resultModal.transactionTime = results.transaction_time\r\n        resultModal.storeName = results.merchant_name\r\n        resultModal.storeDistance = \"\"\r\n        resultModal.storeLocation = \"\"\r\n        resultModal.status = results.status\r\n        resultModal.biz_type = results.biz_type\r\n        resultModal.payment = results.payment_with\r\n        resultModal.food = []\r\n        results.detail_products.forEach((product) => {\r\n          resultModal.food.push({\r\n            name: product.product_name,\r\n            price: product.price,\r\n            quantity: product.qty,\r\n            image: product.image,\r\n            note: product.notes\r\n          })\r\n        })\r\n        this.setState({\r\n          currentModal: resultModal\r\n        })\r\n      })\r\n      .catch((err) => {\r\n      });\r\n\r\n    this.setModal(true);\r\n  }\r\n\r\n  handleSelect(tabIndex) {\r\n    this.setState({ activeTab: tabIndex });\r\n  }\r\n\r\n  componentDidMount() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n      this.setState({ isLogin: auth.isLogged });\r\n    }\r\n    if(auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href}\r\n      Cookies.set(\"lastLink\", lastLink,{ expires: 1})\r\n      this.setRegisterDialog(true);\r\n      // window.location.href = \"/login\"\r\n    } else {\r\n      this.getTransactionHistory();\r\n    }\r\n    // var state = { ...this.state };\r\n    // state.data.pop();\r\n    // state.data.push({\r\n    //   title: \"Food1\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food4\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"unpaid\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food2\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"pick\",\r\n    // });\r\n    // state.data.push({\r\n    //   title: \"Food3\",\r\n    //   distance: \"dist1\",\r\n    //   quantity: \"qty1\",\r\n    //   status: \"send\",\r\n    // });\r\n    // this.setState({ data: state.data });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if(this.state.isLogin === false) {\r\n      var auth = {\r\n        isLogged: false,\r\n        token: \"\",\r\n        new_event: true,\r\n        recommendation_status: false,\r\n        email: \"\",\r\n      };\r\n      if(Cookies.get(\"auth\") !== undefined) {\r\n        auth = JSON.parse(Cookies.get(\"auth\"))\r\n        this.getTransactionHistory();\r\n        this.setState({ isLogin: auth.isLogged });\r\n      }\r\n    }\r\n  }\r\n\r\n  getTransactionHistory() {\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if(Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replaceAll(\"-\", \"\");\r\n    const date = new Date().toISOString();\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/txn-history/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        var results = res.data.results;\r\n        var stateData = { ...this.state }\r\n        stateData.data.pop()\r\n        results.forEach((result) => {\r\n          stateData.data.push({\r\n            title: result.merchant_name,\r\n            distance: \"\",\r\n            quantity: result.total_product,\r\n            status: result.status,\r\n            biz_type: result.biz_type,\r\n            payment: result.payment_with,\r\n            transactionId: result.transaction_id,\r\n            transactionTime: result.transaction_time,\r\n          })\r\n        })\r\n        this.setState({ data: stateData.data });\r\n      })\r\n      .catch((err) => {\r\n      });\r\n\r\n  }\r\n\r\n  setRegisterDialog(isShow) {\r\n    this.setState({ showRegisterDialog: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  showRegisterDialog = () => {\r\n    if (this.state.showRegisterDialog === true) {\r\n      return (\r\n        <RegisterDialog\r\n            isShowRegister={this.state.showRegisterDialog}\r\n            onHideRegister={() => this.setRegisterDialog(false)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  onRating = (value) => {\r\n    this.setState({ ratingScore: value })\r\n    this.setState({ openRating: true })\r\n  }\r\n\r\n  notesRating = (e) => {\r\n    this.setState({ ratingNote: e.target.value })\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    let modalList = this.state.currentModal.food;\r\n\r\n    let modalListView = modalList.map((data) => {\r\n      return (\r\n        <Row>\r\n          <Col>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={placeholderIcon} class=\"statusFoodIcon\" alt=\"food icon\" />\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodname\">{data.name}</p>\r\n                <p class=\"statusFoodPrice\">\r\n                  {Intl.NumberFormat(\"id-ID\", {\r\n                    style: \"currency\",\r\n                    currency: \"IDR\",\r\n                  }).format(data.price)}\r\n                </p>\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusFoodQuantity\">{data.quantity}x</p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <p class=\"statusFoodNote\">Catatan: {data.note}</p>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    });\r\n    let currentTotal = 0;\r\n    modalList.forEach((data) => {\r\n      currentTotal = currentTotal + data.price * data.quantity;\r\n    });\r\n    if (this.state.showModal === true) {\r\n      let payImage;\r\n      let payLabel;\r\n      if (this.state.currentModal.payment === \"PAY_BY_CASHIER\") {\r\n        payImage = cashierStatusIcon;\r\n        payLabel = \"Cashier\"\r\n      } else if (this.state.currentModal.payment === \"WALLET\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Cash\"\r\n      } else if (this.state.currentModal.payment === \"VA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"Virtual\"\r\n      } else if (this.state.currentModal.payment === \"WALLET_OVO\") {\r\n        payImage = ovoIcon;\r\n        payLabel = \"OVO\"\r\n      } else if (this.state.currentModal.payment === \"WALLET_DANA\") {\r\n        payImage = placeholderIcon;\r\n        payLabel = \"DANA\"\r\n      }\r\n      modal = (\r\n        <Modal\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n          show={() => this.setModal(true)}\r\n          onHide={() => this.setModal(false)}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              <p class=\"statusNoteLabel\">No Pesanan.</p>\r\n              <p class=\"statusNoteHeader\">{this.state.currentModal.transactionId}</p>\r\n              <p class=\"statusNoteLabel\">{this.state.currentModal.transactionTime}</p>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={categoryFoodIcon} class=\"statusStoreIcon\" alt=\"category icon\" />\r\n              </Col>\r\n              <Col>\r\n                <p class=\"statusStoreName\">\r\n                  {this.state.currentModal.storeName}\r\n                </p>\r\n                <p class=\"statusStoreLabel\">store location</p>\r\n                <p class=\"statusStoreLocation\">\r\n                  {this.state.currentModal.storeLocation}\r\n                </p>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col xs={2} md={1}>\r\n                <img src={pickupStatusIcon} class=\"statusStoreStatusIcon\" alt=\"pickup status\" />\r\n              </Col>\r\n              <Col>\r\n                <span class=\"statusStoreLabel\">status: </span>\r\n                <span class=\"statusStoreStatus\">\r\n                  {this.state.currentModal.status}\r\n                </span>\r\n                <span class=\"statusStoreDistance\">\r\n                  {this.state.currentModal.storeDistance}\r\n                </span>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStorePaymentLabel\">Metode Pembayaran</p>\r\n                <img src={payImage} class=\"statusFoodIcon\" alt=\"status icon\"></img>\r\n                <span class=\"statusStorePayment\">\r\n                  {payLabel}\r\n                </span>\r\n              </Col>\r\n            </Row>\r\n            {modalListView}\r\n            <Row>\r\n              <Col>\r\n                <p class=\"statusStoreTotal\">Total Pembayaran</p>\r\n              </Col>\r\n              <Col>\r\n                {Intl.NumberFormat(\"id-ID\", {\r\n                  style: \"currency\",\r\n                  currency: \"IDR\",\r\n                }).format(currentTotal)}\r\n              </Col>\r\n            </Row>\r\n          </Modal.Body>\r\n          <Modal.Footer />\r\n        </Modal>\r\n      );\r\n    } else {\r\n      modal = <></>;\r\n    }\r\n    let notPaidImage;\r\n    let contentView;\r\n\r\n    let currentState = this.state.activeTab;\r\n    if (currentState === 1) {\r\n      notPaidImage = unpaidActiveIcon;\r\n      contentView = this.state.data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if (value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = cashierStatusIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if (value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if (value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if (value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if (value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        }\r\n        if (value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if (value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"OPEN\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      notPaidImage = unpaidIcon;\r\n    }\r\n\r\n    let packImage;\r\n    if (currentState === 2) {\r\n      packImage = packActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if (value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if (value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if (value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if (value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if (value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        }\r\n        if (value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if (value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if (value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"PAID\" || value.status === \"MERCHANT_CONFIRM\" || value.status === \"CUSTOMER_ACCEPTED\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      packImage = packIcon;\r\n    }\r\n\r\n    let sendImage;\r\n    if (currentState === 3) {\r\n      sendImage = sendActiveIcon;\r\n      let data = this.state.data;\r\n      contentView = data.map((value) => {\r\n        let bizImage;\r\n        let bizLabel;\r\n        let payImage;\r\n        let payLabel;\r\n        if (value.payment === \"PAY_BY_CASHIER\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cashier\"\r\n        } else if (value.payment === \"WALLET\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Cash\"\r\n        } else if (value.payment === \"VA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"Virtual\"\r\n        } else if (value.payment === \"WALLET_OVO\") {\r\n          payImage = ovoIcon;\r\n          payLabel = \"OVO\"\r\n        } else if (value.payment === \"WALLET_DANA\") {\r\n          payImage = placeholderIcon;\r\n          payLabel = \"DANA\"\r\n        }\r\n        if (value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if (value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.biz_type === \"DINE_IN\") {\r\n          bizImage = dineinIcon\r\n          bizLabel = \"Dine in\"\r\n        } else if (value.biz_type === \"TAKE_AWAY\") {\r\n          bizImage = takeawayIcon;\r\n          bizLabel = \"Take away\"\r\n        }\r\n        if (value.status === \"DELIVER\" || value.status === \"ON_PROCESS\") {\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      sendImage = sendIcon;\r\n    }\r\n\r\n    let reviewImage;\r\n    if (currentState === 4) {\r\n      reviewImage = reviewActiveIcon;\r\n      let data = this.state.dummyData;\r\n      contentView = data.map((value) => {\r\n        if (value.status === \"CLOSE\" || value.status === \"FINALIZE\") {\r\n          let bizImage;\r\n          let bizLabel;\r\n          let payImage;\r\n          let payLabel;\r\n          if (value.payment === \"PAY_BY_CASHIER\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cashier\"\r\n          } else if (value.payment === \"WALLET\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Cash\"\r\n          } else if (value.payment === \"VA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"Virtual\"\r\n          } else if (value.payment === \"WALLET_OVO\") {\r\n            payImage = ovoIcon;\r\n            payLabel = \"OVO\"\r\n          } else if (value.payment === \"WALLET_DANA\") {\r\n            payImage = placeholderIcon;\r\n            payLabel = \"DANA\"\r\n          }\r\n          if (value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if (value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          if (value.biz_type === \"DINE_IN\") {\r\n            bizImage = dineinIcon\r\n            bizLabel = \"Dine in\"\r\n          } else if (value.biz_type === \"TAKE_AWAY\") {\r\n            bizImage = takeawayIcon;\r\n            bizLabel = \"Take away\"\r\n          }\r\n          return (\r\n            <Row className={\"statusCard\"}>\r\n              <Col xs={1} md={1} />\r\n              <Col>\r\n                <Card>\r\n                  <Row className={\"statusCard\"}>\r\n                    <Col xs={1} md={1}>\r\n                      <img\r\n                        src={categoryFoodIcon}\r\n                        class=\"statusIcon\"\r\n                        alt={\"statusIcon\"}\r\n                      ></img>\r\n                    </Col>\r\n                    <Col>\r\n                      <p class=\"statusTitle\">{value.title}</p>\r\n                      <p class=\"statusDistance\">{value.distance}</p>\r\n                      <p class=\"statusQty\">{value.quantity} produk</p>\r\n                      <PikaButton\r\n                        title={\"Detail\"}\r\n                        buttonStyle={\"statusPika\"}\r\n                        handleClick={() => this.handleDetail(value.transactionId)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className={\"statusLeftImg\"}>\r\n                      <img src={bizImage} alt=\"biz icon\"></img>\r\n                      <span class=\"statusLeftText\">{bizLabel}</span>\r\n                    </Col>\r\n                    <Col className={\"statusRightImg\"}>\r\n                      <img src={payImage} alt=\"pay icon\"></img>\r\n                      <span class=\"statusRightText\">{payLabel}</span>\r\n                    </Col>\r\n                  </Row>\r\n                  <Rating onChange={this.onRating} initialRating={this.state.ratingScore} />\r\n                  {\r\n                    this.state.openRating ?\r\n                      <textarea rows='5' id=\"ratingnote\" placeholder={\"Berikan rating untuk produk ini\"} onChange={this.notesRating} />\r\n                      :\r\n                      null\r\n                  }\r\n                </Card>\r\n              </Col>\r\n              <Col xs={1} md={1} />\r\n            </Row>\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      reviewImage = reviewIcon;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Nav variant=\"tabs\" defaultActiveKey={\"not-paid\"}>\r\n          <Nav.Item>\r\n            <Nav.Link\r\n              eventKey={\"not-paid\"}\r\n              onClick={() => this.handleSelect(1)}\r\n            >\r\n              <Row>\r\n                <img\r\n                  src={notPaidImage}\r\n                  alt={\"unpaid\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Belum Bayar</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"pack\"} onClick={() => this.handleSelect(2)}>\r\n              <Row>\r\n                <img src={packImage} alt={\"pack\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Dikemas</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"send\"} onClick={() => this.handleSelect(3)}>\r\n              <Row>\r\n                <img src={sendImage} alt={\"send\"} className={\"statusTabIcon\"} />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Siap / Dikirim</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={\"review\"} onClick={() => this.handleSelect(4)}>\r\n              <Row>\r\n                <img\r\n                  src={reviewImage}\r\n                  alt={\"review\"}\r\n                  className={\"statusTabIcon\"}\r\n                />\r\n              </Row>\r\n              <Row className={\"statusTabTitle\"}>Beri Penilaian</Row>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        {contentView}\r\n        {modal}\r\n        {this.showRegisterDialog()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Auth\\FormView.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Store\\StoreView.js",["211","212"],"import React from \"react\";\r\nimport StarIcon from '../../Asset/Icon/star.png'\r\nimport LocaIcon from '../../Asset/Icon/location.png'\r\nimport queryString from \"query-string\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, clientId, googleKey } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Geocode from \"react-geocode\"\r\nimport Skeleton from 'react-loading-skeleton'\r\nimport { connect } from 'react-redux'\r\nimport { DoneLoad } from '../../Redux/Actions'\r\nimport TourPage from '../../Component/Tour/TourPage';\r\n\r\nclass StoreView extends React.Component {\r\n  state = {\r\n    page: 0,\r\n    size: 6,\r\n    location: \"\",\r\n    data: {\r\n      title: \"\",\r\n      image: \"\",\r\n      desc: \"\",\r\n      data: [\r\n        {\r\n          address: \"\",\r\n          rating: \"\",\r\n          logo: \"\",\r\n          distance: \"\",\r\n          storeId: \"\",\r\n          storeName: \"\",\r\n          storeDesc: \"\",\r\n          storeImage: \"\",\r\n        },\r\n      ],\r\n    },\r\n    idCol: 0,\r\n    totalPage: 0,\r\n    boolpage: false,\r\n    loadView: true,\r\n    allMerchantAPI: [],\r\n    lat: \"\",\r\n    lon: \"\",\r\n    startTour : false,\r\n    steptour:[\r\n      {\r\n        selector: '',\r\n        content : () => (\r\n          <div>\r\n            <h2>Selamat Datang di PikApp!</h2>\r\n            <br />\r\n            <span>Yuk caritau cara memesan dengan PikApp dengan mudah.</span>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        selector: '.merchantList-layout',\r\n        content : () => (\r\n          <div>\r\n            <h4>Ini adalah Daftar Restoran</h4>\r\n            <br />\r\n            <span>Kamu bisa cek restoran apa saja yang ada di dalam foodcourt ini. Anda bisa tap salah satu restoran untuk ke halaman berikutnya.</span>\r\n          </div>\r\n        )\r\n      }\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.DoneLoad()\r\n    Cookies.set(\"homePage\", window.location.search)\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    } \r\n\r\n    if (localStorage.getItem(\"storeTour\") == 1) {\r\n      this.setState({ startTour : true});\r\n    }\r\n\r\n    // else {\r\n    const value = queryString.parse(window.location.search);\r\n    var merchant = \"\";\r\n\r\n    // if (navigator.geolocation) { //SHUTDOWN FOR A WHILE\r\n    //   navigator.geolocation.getCurrentPosition(position => {\r\n    //     let latitude = 0;\r\n    //     let longitude = 0;\r\n    \r\n    //     if(position) {\r\n    //       let latitude = position.coords.latitude\r\n    //       let longitude = position.coords.longitude\r\n    //       let longlat = { lat: latitude, lon: longitude }\r\n    //       console.log(latitude, longitude);\r\n    //       this.setState({ lat: latitude, lon: longitude })\r\n    //       localStorage.setItem(\"longlat\", JSON.stringify(longlat))\r\n    //     } else {\r\n    //       let latitude = 1;\r\n    //       let longitude = 1;\r\n    //       let longlat = { lat: latitude, lon: longitude }\r\n    //       console.log(latitude, longitude);\r\n    //       this.setState({ lat: latitude, lon: longitude })\r\n    //       localStorage.setItem(\"longlat\", JSON.stringify(longlat))\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    let latitude = -6.28862\r\n    let longitude = 106.71789\r\n    let longlat = { lat: latitude, lon: longitude }\r\n    console.log(latitude, longitude);\r\n    this.setState({ lat: latitude, lon: longitude })\r\n    localStorage.setItem(\"longlat\", JSON.stringify(longlat))\r\n    \r\n    // Show a map centered at latitude / longitude.\r\n\r\n    if (localStorage.getItem(\"longlat\")) {\r\n      var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n      latitude = getLocation.lat\r\n      longitude = getLocation.lon\r\n    } else {\r\n      // window.location.href = \"/login\"\r\n    }\r\n\r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n      // window.location.href = \"/login\"\r\n    }\r\n    else {\r\n      longitude = value.longitude || longitude\r\n      latitude = value.latitude || latitude\r\n      if (window.location.href.includes('?latitude') || window.location.href.includes('store?')) {\r\n\r\n      } else {\r\n        window.location.href = window.location.href + `?latitude=${latitude}&longitude=${longitude}`\r\n      }\r\n    }\r\n    longitude = value.longitude || longitude\r\n    latitude = value.latitude || latitude\r\n    merchant = value.merchant;\r\n\r\n    // GOOGLE GEOCODE\r\n    if (localStorage.getItem(\"address\")) {\r\n      var getAdress = JSON.parse(localStorage.getItem(\"address\"))\r\n      this.setState({ location: getAdress })\r\n    } else {\r\n      Geocode.setApiKey(googleKey)\r\n      Geocode.fromLatLng(latitude, longitude)\r\n        .then((res) => {\r\n          console.log(res.results[0].formatted_address);\r\n          this.setState({ location: res.results[0].formatted_address })\r\n          localStorage.setItem(\"address\", JSON.stringify(res.results[0].formatted_address));\r\n        })\r\n        .catch((err) => {\r\n          this.setState({ location: \"Tidak tersedia\" })\r\n        })\r\n    }\r\n\r\n    let addressRoute;\r\n    if (merchant === undefined) {\r\n      addressRoute =\r\n        address + \"home/v2/merchant/\" + longitude + \"/\" + latitude + \"/ALL/\";\r\n    } else {\r\n      addressRoute =\r\n        address +\r\n        \"home/v1/merchant/\" +\r\n        longitude +\r\n        \"/\" +\r\n        latitude +\r\n        \"/\" +\r\n        merchant\r\n        + \"/\"\r\n    }\r\n    var stateData;\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replace(/-/g, \"\");\r\n    const date = new Date().toISOString();\r\n    Axios(addressRoute, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"token\": \"PUBLIC\",\r\n        \"category\": \"1\",\r\n      },\r\n      method: \"GET\",\r\n      params: {\r\n        page: this.state.page,\r\n        size: this.state.size\r\n      }\r\n    })\r\n      .then((res) => {\r\n        console.log(res.data.results);\r\n        stateData = { ...this.state.data };\r\n        let responseDatas = res.data;\r\n        stateData.data.pop();\r\n        responseDatas.results.forEach((data) => {\r\n          stateData.data.push({\r\n            address: data.merchant_address,\r\n            rating: data.merchant_rating,\r\n            logo: data.merchant_logo,\r\n            distance: data.merchant_distance,\r\n            storeId: data.mid,\r\n            storeName: data.merchant_name,\r\n            storeDesc: \"\",\r\n            storeImage: data.merchant_pict,\r\n          })\r\n        })\r\n        if (Cookies.get(\"fcaddress\") !== undefined) {\r\n          let foodcourtadd = Cookies.get(\"fcaddress\")\r\n          let filterMerchantDetail = stateData.data.filter(fcVal => {\r\n            return fcVal.address.toLocaleLowerCase().includes(foodcourtadd.toLocaleLowerCase())\r\n          })\r\n          stateData.data = filterMerchantDetail\r\n          let filterMerchantMain = res.data.results.filter(fcVal => {\r\n            return fcVal.merchant_address.toLocaleLowerCase().includes(foodcourtadd.toLocaleLowerCase())\r\n          })\r\n          this.setState({ data: stateData, loadView: false, totalPage: responseDatas.total_pages, allMerchantAPI: filterMerchantMain });\r\n        } else {\r\n          this.setState({ data: stateData, loadView: false, totalPage: responseDatas.total_pages, allMerchantAPI: res.data.results });\r\n        }\r\n\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n        if (Cookies.get(\"fcaddress\") === undefined) {\r\n          if (res.data.results.length < 6) {\r\n            document.removeEventListener('scroll', this.loadMoreMerchant)\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n      });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.idCol > 0) {\r\n      if (this.state.boolpage === true) {\r\n        let addressRoute = address + \"home/v2/merchant/\" + this.state.lon + \"/\" + this.state.lat + \"/ALL/\";\r\n        var stateData;\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replace(/-/g, \"\");\r\n        const date = new Date().toISOString();\r\n        Axios(addressRoute, {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-request-id\": uuid,\r\n            \"x-request-timestamp\": date,\r\n            \"x-client-id\": clientId,\r\n            \"token\": \"PUBLIC\",\r\n            \"category\": \"1\",\r\n          },\r\n          method: \"GET\",\r\n          params: {\r\n            page: this.state.page,\r\n            size: this.state.size\r\n          }\r\n        })\r\n          .then((res) => {\r\n            stateData = { ...this.state.data };\r\n            let responseDatas = res.data;\r\n            if (Cookies.get(\"fcaddress\") !== undefined) {\r\n              let foodcourtadd = Cookies.get(\"fcaddress\")\r\n              let filterMerchantMain = res.data.results.filter(fcVal => {\r\n                return fcVal.merchant_address.toLocaleLowerCase().includes(foodcourtadd.toLocaleLowerCase())\r\n              })\r\n\r\n              filterMerchantMain.forEach((data) => {\r\n                stateData.data.push({\r\n                  address: data.merchant_address,\r\n                  rating: data.merchant_rating,\r\n                  logo: data.merchant_logo,\r\n                  distance: data.merchant_distance,\r\n                  storeId: data.mid,\r\n                  storeName: data.merchant_name,\r\n                  storeDesc: \"\",\r\n                  storeImage: data.merchant_pict,\r\n                })\r\n              })\r\n\r\n              let updateMerchant = [...this.state.allMerchantAPI]\r\n              filterMerchantMain.forEach((data) => {\r\n                updateMerchant.push(data)\r\n              })\r\n              this.setState({ boolpage: false, allMerchantAPI: updateMerchant })\r\n            } else {\r\n              responseDatas.results.forEach((data) => {\r\n                stateData.data.push({\r\n                  address: data.merchant_address,\r\n                  rating: data.merchant_rating,\r\n                  logo: data.merchant_logo,\r\n                  distance: data.merchant_distance,\r\n                  storeId: data.mid,\r\n                  storeName: data.merchant_name,\r\n                  storeDesc: \"\",\r\n                  storeImage: data.merchant_pict,\r\n                })\r\n              })\r\n              let updateMerchant = [...this.state.allMerchantAPI]\r\n              responseDatas.results.forEach((data) => {\r\n                updateMerchant.push(data)\r\n              })\r\n              this.setState({ boolpage: false, allMerchantAPI: updateMerchant })\r\n            }\r\n\r\n            document.addEventListener('scroll', this.loadMoreMerchant)\r\n            if (this.state.page === this.state.totalPage - 1) {\r\n              this.setState({ idCol: this.state.idCol + 1 })\r\n            }\r\n          })\r\n          .catch((err) => {\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  storeClick = (e) => {\r\n    localStorage.setItem('page', JSON.stringify(1))\r\n  }\r\n  handleDetail(data) {\r\n    return <Link to={\"/status\"}></Link>;\r\n  }\r\n\r\n  isBottom = (el) => {\r\n    return (el.getBoundingClientRect().top + 50) <= window.innerHeight\r\n  }\r\n\r\n  loadMoreMerchant = () => {\r\n    const wrappedElement = document.getElementById(\"idCol\")\r\n    if (this.state.idCol <= this.state.page) {\r\n      if (this.isBottom(wrappedElement)) {\r\n        // console.log('testloadmore');\r\n        this.setState({ idCol: this.state.idCol + 1, page: this.state.page + 1, boolpage: true })\r\n        document.removeEventListener('scroll', this.loadMoreMerchant)\r\n      }\r\n    } else {\r\n      document.removeEventListener('scroll', this.loadMoreMerchant)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  merchantLoading = () => (\r\n    <div className='merchantList-layout' >\r\n      <Skeleton style={{ paddingTop: 100, width: \"100%\", height: \"100%\" }} />\r\n    </div>\r\n  )\r\n\r\n  tourPage = () => {\r\n    if (this.state.startTour === true) {\r\n      return (\r\n        <TourPage \r\n          stepsContent={this.state.steptour}\r\n          isShowTour={this.state.startTour}\r\n          isHideTour={() =>this.showTourPage(false)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  showTourPage = (isShowTour) => {\r\n    this.setState({ startTour: isShowTour });\r\n    document.body.style.overflowY = 'auto';\r\n    localStorage.setItem('storeTour', 0);\r\n  }\r\n\r\n  render() {\r\n    if (localStorage.getItem('page')) {\r\n      let currentPage = JSON.parse(localStorage.getItem('page'))\r\n      if (currentPage === 1) {\r\n        localStorage.setItem('page', JSON.stringify(0))\r\n        window.location.reload()\r\n      }\r\n    }\r\n    console.log(this.state.data.data);\r\n    const storeDatas = this.state.data.data.map((data) => {\r\n      return data;\r\n    });\r\n    var allCards = storeDatas.map((cardData, indexCard) => {\r\n      return (\r\n        <Link to={\"/store?mid=\" + cardData.storeId} style={{ textDecoration: \"none\" }} onClick={() => this.storeClick(cardData)} >\r\n          <div key={indexCard} className='merchantList-layout' data-testid=\"merchantlist-item\">\r\n            <div className='merchantList-banner'>\r\n              {\r\n                cardData.storeImage ?\r\n                  <img src={cardData.storeImage} className='merchantList-image' alt='' />\r\n                  :\r\n                  <Skeleton style={{ paddingTop: 100, width: \"100%\", height: \"100%\" }} />\r\n              }\r\n            </div>\r\n            \r\n            <div className='merchantList-content'>\r\n              <div className='merchantList-contentLocStar'>\r\n                {/* <div className='merchantList-ratingArea'>\r\n                  <img src={StarIcon} className='merchantList-ratingIcon' alt='' />\r\n                  <div className='merchantList-ratingScore'>{cardData.rating ? cardData.rating : \"5.0\"}</div>\r\n                </div> */}\r\n\r\n                <div className='merchantList-locArea'>\r\n                  <img src={LocaIcon} className='merchantList-locIcon' alt='' />\r\n                  {\r\n                    cardData.distance ?\r\n                      <div className='merchantList-location'>{cardData.distance} <span className='merchantList-distance'>{'(' + Math.round((parseInt(cardData.distance) / 22) * 60) + ' min)'}</span></div>\r\n                      :\r\n                      <Skeleton style={{ paddingTop: 10, width: \"100%\", height: \"100%\" }} />\r\n                  }\r\n                </div>\r\n              </div>\r\n\r\n              {\r\n                cardData.storeName ?\r\n                  <div className='merchantList-storeName'>{cardData.storeName}</div>\r\n                  :\r\n                  <Skeleton style={{ paddingTop: 10, width: \"100%\", height: \"100%\" }} />\r\n              }\r\n\r\n              <div className='merchantList-storeCategory'>Merchant Categories</div>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className='merchantList-background'>\r\n        <div className=\"storeColumn\">\r\n          <h6 className=\"\" style={{ textAlign: \"left\" }}>\r\n            Lokasi:\r\n            </h6>\r\n          <p className=\"storeLabel\" style={{ textAlign: \"left\" }}>\r\n            {this.state.location || <Skeleton height={20} />}\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <div className='merchantList-grid'>\r\n            {allCards}\r\n          </div>\r\n          {\r\n            !this.state.loadView ?\r\n              this.state.idCol <= this.state.page ?\r\n                this.state.totalPage - 1 === this.state.page ?\r\n                  null\r\n                  :\r\n                  <div id={\"idCol\"}>\r\n                    {this.merchantLoading()}\r\n                  </div>\r\n                :\r\n                null\r\n              :\r\n              null\r\n          }\r\n          {this.tourPage()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { DoneLoad })(StoreView)\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Button\\PikaButton.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\PikaModal.js",[],["213","214"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\TextField\\PikaTextField.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\CartModal.js",["215"],"import React, { useState } from 'react'\r\nimport closeNarrow from '../../Asset/Icon/closeNarrow.png'\r\nimport diningTableColor from '../../Asset/Icon/diningTableColor.png'\r\nimport takeawayColor from '../../Asset/Icon/takeawayColor.png'\r\nimport CashierPayment from '../../Asset/Icon/CashierPayment.png'\r\nimport OvoPayment from '../../Asset/Icon/ovo_icon.png'\r\nimport '../../Asset/scss/CartModal.scss'\r\n\r\nconst CartModal = (props) => {\r\n    const [radioNumEat, setradioNumEat] = useState(props.indexOptionEat)\r\n    const [radioNumPay, setradioNumPay] = useState(props.indexOptionPay)\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        props.onHide()\r\n    }\r\n\r\n    const onChangeRadio = (num, title) => {\r\n        if (title === 'Pilih Cara Makan Anda') {\r\n            setradioNumEat(num)\r\n            props.handleData(num)\r\n            props.onHide()\r\n        } else if(title === 'Bayar Pakai Apa') {\r\n            setradioNumPay(num)\r\n            props.handleData(num)\r\n            props.onHide()\r\n        }\r\n    }\r\n\r\n    const choicesCartModal = () => {\r\n        let optionList = props.detailOptions\r\n        let choicesModal = optionList.map((optionVal, keyOption) => {\r\n            let imageOption;\r\n            if (optionVal.image === \"dineIn\") {\r\n                imageOption = diningTableColor;\r\n            } else if (optionVal.image === \"takeaway\") {\r\n                imageOption = takeawayColor;\r\n            } else if (optionVal.image === \"cashier\") {\r\n                imageOption = CashierPayment;\r\n            } else if (optionVal.image === \"ovo\") {\r\n                imageOption = OvoPayment;\r\n            }\r\n\r\n            if (props.title === 'Pilih Cara Makan Anda') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailContent'>\r\n                        <div className='modalCart-radioSection'>\r\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'EATMETHOD'} defaultChecked={radioNumEat === keyOption ? true : false} />\r\n                            <label htmlFor={optionVal.image}>\r\n                                <div className='modalCart-radioSide'>\r\n                                    <img className='modalCartradio-image' src={imageOption} alt='' />\r\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (props.title === 'Bayar Pakai Apa') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailContent'>\r\n                        <div className='modalCart-radioSection'>\r\n                            <input type='radio' id={optionVal.image} onChange={() => onChangeRadio(keyOption, props.title)} name={'PAYMETHOD'} defaultChecked={radioNumPay === keyOption ? true : false} />\r\n                            <label htmlFor={optionVal.image}>\r\n                                <div className='modalCart-radioSide'>\r\n                                    <img className='modalCartradio-image' src={imageOption} alt='' />\r\n                                    <div className='modalCart-radioTitle'>{optionVal.option}</div>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (props.title === 'Rincian Pembayaran') {\r\n                return (\r\n                    <div key={keyOption} className='modalCart-detailTotalPrice'>\r\n                        <div className='modalCart-totalPrice'>\r\n                            <h2 className='modalCart-totalPrice-left'>Total Harga Barang</h2>\r\n                            <h2 className='modalCart-totalPrice-right'>{Intl.NumberFormat(\"id-ID\").format(optionVal.totalPrice)}</h2>\r\n                        </div>\r\n\r\n                        <div className='modalCart-discount'>\r\n                            <h2 className='modalCart-discount-left'>Diskon</h2>\r\n                            <h2 className='modalCart-discount-right'>{optionVal.discountPrice}</h2>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n        return choicesModal\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='modalCartPage' style={{\r\n                display: props.isShow ? 'block' : 'none'\r\n            }} onClick={closeModal}>\r\n                <div className='modalCartContent' onClick={e => e.stopPropagation()}>\r\n                    <span className='iconCloseNarrow' onClick={closeModal}>\r\n                        <img src={closeNarrow} className='closeLogoNarrow' alt='' />\r\n                    </span>\r\n\r\n                    <div className='modalCart-detail'>\r\n                        <h1 className='modalCart-title'>{props.title}</h1>\r\n\r\n                        {choicesCartModal()}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartModal","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\index.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\index.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AllReducers.js",["216"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Actions\\ButtonAction.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\App.js",["217","218"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Store.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\ProductLayout.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\Product\\ProductView.js",["219","220","221","222","223","224","225","226","227","228","229","230"],"import React from \"react\";\r\nimport { prominent } from \"color.js\";\r\nimport rgbHex from 'rgb-hex'\r\nimport MenuDetail from \"../../Component/Menu/MenuDetail\";\r\nimport queryString from \"query-string\";\r\nimport cartIcon from \"../../Asset/Icon/cart_icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { address, clientId, secret } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport sha256 from \"crypto-js/hmac-sha256\";\r\nimport Axios from \"axios\";\r\nimport Cookies from \"js-cookie\"\r\nimport Storeimg from '../../Asset/Illustration/storeimg2.jpg'\r\nimport Productimage from '../../Asset/Illustration/storeimg.jpg'\r\nimport Logopikapp from '../../Asset/Logo/logo4x.png'\r\nimport NotifIcon from '../../Asset/Icon/bell.png'\r\nimport ProfileIcon from '../../Asset/Icon/avatar.png'\r\nimport OpenHourIcon from '../../Asset/Icon/hour.png'\r\nimport CoinIcon from '../../Asset/Icon/coin.png'\r\nimport LocationIcon from '../../Asset/Icon/location.png'\r\nimport PhoneIcon from '../../Asset/Icon/phone.png'\r\nimport StarIcon from '../../Asset/Icon/star.png'\r\nimport ArrowIcon from '../../Asset/Icon/arrowselect.png'\r\nimport Skeleton from 'react-loading-skeleton'\r\nimport Swal from 'sweetalert2'\r\nimport { connect } from 'react-redux'\r\nimport { ValidQty, OpenSelect } from '../../Redux/Actions'\r\nimport TourPage from '../../Component/Tour/TourPage';\r\n\r\nvar currentExt = {\r\n  detailCategory: [\r\n    {\r\n      name: \"\",\r\n      amount: 0,\r\n    },\r\n  ],\r\n  note: \"\",\r\n  foodCategory: '',\r\n  listcheckbox: [],\r\n  listradio: [],\r\n  foodTotal: 0,\r\n};\r\n\r\nvar currentTotal = 0\r\n\r\nclass ProductView extends React.Component {\r\n  state = {\r\n    page: 0, //products pagination\r\n    size: 9, //set amount of products to be shown in frontend\r\n    boolpage: false,\r\n    productPage: [], //set how many page of product merchant from backend server\r\n    idCateg: [], //set current product page of specific size of loaded products\r\n    testColor: false,\r\n    testingchange: false, //only for testing, would be remove\r\n    showModal: false, // show customization of selected menu such as qty, notes and more advance choice\r\n    showMenuDet: false, //show menu detail\r\n    isLogin: false,\r\n    data: {\r\n      mid: \"\",\r\n      title: \"\",\r\n      image: \"\",\r\n      logo: \"\",\r\n      desc: \"\",\r\n      address: \"\",\r\n      rating: \"\",\r\n      phone: \"\",\r\n      currentData: {\r\n        productId: \"\",\r\n        category: \"\",\r\n        foodName: \"\",\r\n        foodDesc: \"\",\r\n        foodPrice: 0,\r\n        foodImage: \"\",\r\n        foodExt: [\r\n          {\r\n            name: \"\",\r\n            amount: 0,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    backColor1: \"\", //merchant info background color\r\n    backColor2: \"\", //products info background color\r\n    categName: \"All Categories\", //initial for dropdown select\r\n    allProductsandCategories: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //mapping from API\r\n    productCategpersize: [{ category_id: \"\", category_name: \"\", order: null, category_products: [] }], //tobe shown in products area\r\n    choosenIndCateg: null, //index of category selected when load more products in selected category\r\n    counterLoad: 0,\r\n    isScrolling: false,\r\n    startTour : false,\r\n    steptour:[\r\n      {\r\n        selector: '',\r\n        content : () => (\r\n          <div>\r\n            <h2>Selamat Datang di PikApp!</h2>\r\n            <br />\r\n            <span>Yuk caritau cara memesan dengan PikApp dengan mudah.</span>\r\n          </div>\r\n        )\r\n      },\r\n      {\r\n        selector: '.product-merchant',\r\n        content : () => (\r\n          <div>\r\n            <h4>Ini adalah Menu Restoran</h4>\r\n            <br />\r\n            <span>Kamu bisa pilih makanan kesukaan kamu disini. Silakan tap untuk dipesan!</span>\r\n          </div>\r\n        )\r\n      }\r\n    ]\r\n  };\r\n\r\n  timeout = null\r\n\r\n  componentDidMount() {\r\n    this.props.ValidQty(0)\r\n    document.body.style.backgroundColor = 'white'\r\n    Cookies.set(\"lastProduct\", window.location.href, { expires: 1 })\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"));\r\n      this.setState({ isLogin: auth.isLogged });\r\n    } \r\n    \r\n    if (auth.isLogged === false) {\r\n      var lastLink = { value: window.location.href }\r\n      Cookies.set(\"lastLink\", lastLink, { expires: 1 })\r\n    }\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    const notab = value.table || \"\"\r\n\r\n    // let longlatAddress\r\n    let addressRoute\r\n    // if (JSON.parse(localStorage.getItem('longlat'))) {\r\n    //   longlatAddress = JSON.parse(localStorage.getItem('longlat'))\r\n    //   addressRoute = address + \"home/v2/detail/merchant/\" + longlatAddress.lon + \"/\" + longlatAddress.lat + \"/\"\r\n    // }\r\n    // if (navigator.geolocation) { //SHUTDOWN FOR A WHILE\r\n    //   navigator.geolocation.getCurrentPosition(position => {\r\n    //     let latitude = position.coords.latitude\r\n    //     let longitude = position.coords.longitude\r\n    //   })\r\n    // }\r\n    let latitude = -6.28862\r\n    let longitude = 106.71789\r\n    let longlat = { lat: latitude, lon: longitude }\r\n    localStorage.setItem(\"longlat\", JSON.stringify(longlat))\r\n    addressRoute = address + \"home/v2/detail/merchant/\" + longitude + \"/\" + latitude + \"/\"\r\n\r\n    let uuid = uuidV4();\r\n    uuid = uuid.replace(/-/g, \"\");\r\n    const date = new Date().toISOString();\r\n\r\n    Axios(addressRoute, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"token\": \"PUBLIC\",\r\n        \"mid\": mid,\r\n      },\r\n      method: \"GET\"\r\n    })\r\n      .then((res) => {\r\n        // console.log(res.data.results);\r\n        var currentMerchant = {\r\n          mid: \"\",\r\n          storeName: \"\",\r\n          storeDesc: \"\",\r\n          distance: \"\",\r\n          storeImage: \"\",\r\n          storeAdress: \"\",\r\n          storeRating: \"\",\r\n          storeLogo: \"\",\r\n        };\r\n        currentMerchant.mid = res.data.results.mid;\r\n        currentMerchant.storeName = res.data.results.merchant_name;\r\n        currentMerchant.storeDesc = \"Desc\";\r\n        currentMerchant.distance = res.data.results.merchant_distance;\r\n        currentMerchant.storeImage = res.data.results.merchant_pict;\r\n        currentMerchant.storeAdress = res.data.results.merchant_address;\r\n        currentMerchant.storeRating = res.data.results.merchant_rating;\r\n        currentMerchant.storeLogo = res.data.results.merchant_logo;\r\n\r\n        let selectedStore = []\r\n        selectedStore.push(res.data.results)\r\n        localStorage.setItem('selectedMerchant', JSON.stringify(selectedStore))\r\n        Cookies.set(\"currentMerchant\", currentMerchant, { expires: 1 })\r\n\r\n        let selectedMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\r\n        let filtersizeMerchant = JSON.parse(localStorage.getItem('selectedMerchant'))\r\n\r\n        let stateData = { ...this.state.data };\r\n        stateData.mid = mid;\r\n        stateData.title = currentMerchant.storeName;\r\n        stateData.image = currentMerchant.storeImage;\r\n        stateData.logo = currentMerchant.storeLogo;\r\n        stateData.desc = currentMerchant.storeDistance;\r\n        stateData.address = currentMerchant.storeAdress;\r\n        stateData.rating = currentMerchant.storeRating;\r\n        stateData.phone = \"081296000823\";\r\n        stateData.notable = notab\r\n        var productCateg = []\r\n        var idCateg = []\r\n        var productPage = []\r\n        productCateg = selectedMerchant[0].categories.map((categ) => {\r\n          idCateg.push(0)\r\n          productPage.push(this.state.size)\r\n          return categ\r\n        })\r\n\r\n        productCateg.forEach((val) => {\r\n          val.category_products = []\r\n        })\r\n\r\n        productCateg.forEach((categProd) => {\r\n          selectedMerchant[0].products.forEach((allproducts) => {\r\n            if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\r\n              categProd.category_products.push({\r\n                productId: allproducts.product_id,\r\n                category: allproducts.product_category,\r\n                foodName: allproducts.product_name,\r\n                foodDesc: allproducts.product_desc,\r\n                foodPrice: allproducts.product_price,\r\n                foodRating: allproducts.rating,\r\n                foodImage: allproducts.product_picture1,\r\n                foodExt: [\r\n                  {\r\n                    name: \"\",\r\n                    amount: 0,\r\n                  },\r\n                ],\r\n              })\r\n            }\r\n          })\r\n        })\r\n\r\n        let productPerSize = filtersizeMerchant[0].categories.map((categ) => {\r\n          return categ\r\n        })\r\n\r\n        productPerSize.forEach((val) => {\r\n          val.category_products = []\r\n        })\r\n\r\n        productPerSize.forEach((categProd) => {\r\n          filtersizeMerchant[0].products.forEach((allproducts) => {\r\n            if (categProd.category_id == allproducts.product_category) { //category categProd strings, allproducts number !NOTE\r\n              categProd.category_products.push({\r\n                productId: allproducts.product_id,\r\n                category: allproducts.product_category,\r\n                foodName: allproducts.product_name,\r\n                foodDesc: allproducts.product_desc,\r\n                foodPrice: allproducts.product_price,\r\n                foodRating: allproducts.rating,\r\n                foodImage: allproducts.product_picture1,\r\n                foodExt: [\r\n                  {\r\n                    name: \"\",\r\n                    amount: 0,\r\n                  },\r\n                ],\r\n              })\r\n            }\r\n          })\r\n        })\r\n\r\n        let firstShownProduct = []\r\n        productPerSize.forEach((categProd, indexcategProd) => {\r\n          firstShownProduct.push(categProd)\r\n          let newFilter = categProd.category_products.filter((valProd, indexvalProd) => {\r\n            return indexvalProd < this.state.size\r\n          })\r\n          categProd.category_products = newFilter\r\n          firstShownProduct[indexcategProd].category_products = []\r\n          firstShownProduct[indexcategProd].category_products = newFilter\r\n        })\r\n\r\n        let newImage = Storeimg\r\n        Axios.get(currentMerchant.storeImage)\r\n          .then(() => {\r\n            newImage = currentMerchant.storeImage\r\n            prominent(newImage, { amount: 3 }).then((color) => {\r\n              // return RGB color for example [241, 221, 63]\r\n              var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n              var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n              this.brightenColor(merchantColor, 70, productColor, 60)\r\n              this.setState({ data: stateData, allProductsandCategories: productCateg, productCategpersize: productPerSize, idCateg, productPage });\r\n              document.addEventListener('scroll', this.loadMoreMerchant)\r\n              document.addEventListener('scroll', this.onScrollCart)\r\n            });\r\n            \r\n            if (localStorage.getItem(\"productTour\") == 1) {\r\n              if(this.props.AuthRedu.isMerchantQR === false) {\r\n                this.state.steptour.shift();\r\n              }\r\n              this.setState({ startTour : true});\r\n            } \r\n            else if (localStorage.getItem('merchantFlow') == 1) {\r\n              this.setState({ startTour : true});\r\n            }\r\n          }).catch(err => {\r\n            console.log(err)\r\n            newImage = Storeimg\r\n            prominent(newImage, { amount: 3 }).then((color) => {\r\n              // return RGB color for example [241, 221, 63]\r\n              var merchantColor = rgbHex(color[0][0], color[0][1], color[0][2])\r\n              var productColor = rgbHex(color[2][0], color[2][1], color[2][2])\r\n              this.brightenColor(merchantColor, 70, productColor, 60)\r\n              this.setState({ data: stateData, allProductsandCategories: productCateg, productCategpersize: productPerSize, idCateg, productPage });\r\n              document.addEventListener('scroll', this.loadMoreMerchant)\r\n            });\r\n            \r\n            if (localStorage.getItem(\"productTour\") == 1) {\r\n              if(this.props.AuthRedu.isMerchantQR === false) {\r\n                this.state.steptour.shift();\r\n              }\r\n              this.setState({ startTour : true});\r\n            } \r\n            else if (localStorage.getItem('merchantFlow') == 1) {\r\n              this.setState({ startTour : true});\r\n            }\r\n          })\r\n      })\r\n      .catch((err) => console.log(err)); \r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.idCateg[this.state.choosenIndCateg] > 0) { //load more products with selected index of category\r\n      if (this.state.boolpage === true) {\r\n        this.loadProducts(this.state.choosenIndCateg)\r\n      } else {\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n      }\r\n    }\r\n\r\n    if (this.state.isLogin === false) {\r\n      var auth = {\r\n        isLogged: false,\r\n        token: \"\",\r\n        new_event: true,\r\n        recommendation_status: false,\r\n        email: \"\",\r\n      };\r\n      if (Cookies.get(\"auth\") !== undefined) {\r\n        auth = JSON.parse(Cookies.get(\"auth\"));\r\n        this.setState({ isLogin: auth.isLogged });\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  brightenColor = (hex, percent, hex2, percent2) => {\r\n    // convert 3 char codes --> 6, e.g. `E0F` --> `EE00FF`\r\n    //backColor1\r\n    if (hex.length == 3) {\r\n      hex = hex.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r = parseInt(hex.substr(0, 2), 16),\r\n      g = parseInt(hex.substr(2, 2), 16),\r\n      b = parseInt(hex.substr(4, 2), 16);\r\n\r\n    let brightColor = '#' +\r\n      ((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16)).substr(1);\r\n\r\n    //backColor2\r\n    if (hex2.length == 3) {\r\n      hex2 = hex2.replace(/(.)/g, '$1$1');\r\n    }\r\n\r\n    var r2 = parseInt(hex2.substr(0, 2), 16),\r\n      g2 = parseInt(hex2.substr(2, 2), 16),\r\n      b2 = parseInt(hex2.substr(4, 2), 16);\r\n\r\n    let brightColor2 = '#' +\r\n      ((0 | (1 << 8) + r2 + (256 - r2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + g2 + (256 - g2) * percent2 / 100).toString(16)).substr(1) +\r\n      ((0 | (1 << 8) + b2 + (256 - b2) * percent2 / 100).toString(16)).substr(1);\r\n\r\n    this.setState({ backColor1: brightColor, backColor2: brightColor2, testColor: false })\r\n    document.body.style.backgroundColor = '#' + hex;\r\n  }\r\n\r\n  onScrollCart = () => {\r\n    this.setState({ isScrolling: true })\r\n    clearTimeout(this.timeout)\r\n    this.timeout = setTimeout(() => {\r\n      this.setState({ isScrolling: false })\r\n    }, 300);\r\n  }\r\n\r\n  loadProducts = (indexOfCateg) => {\r\n    let getindexProd = this.state.allProductsandCategories[indexOfCateg].category_products\r\n    let loadtheProd = getindexProd.filter((valProd, indvalProd) => {\r\n      return indvalProd >= this.state.idCateg[indexOfCateg] && indvalProd < this.state.productPage[indexOfCateg]\r\n    })\r\n\r\n    let updatedProduct = this.state.productCategpersize\r\n    updatedProduct.forEach((value, index) => {\r\n      if (index === indexOfCateg) {\r\n        loadtheProd.forEach((valLoadProd) => {\r\n          value.category_products.push(valLoadProd)\r\n        })\r\n      }\r\n    })\r\n\r\n    this.setState({ boolpage: false, productCategpersize: updatedProduct })\r\n    document.addEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  handlePhone = (phone) => { //go to Whatsapp chat\r\n    phone.substring(1)\r\n    let waNumber = '62' + phone\r\n    window.location.href = `https://wa.me/${waNumber}`\r\n  }\r\n\r\n  handleDetail(data) {\r\n    this.setState({ currentData: data });\r\n    this.setState({ showMenuDet: true });\r\n    document.body.style.overflowY = 'hidden'\r\n  }\r\n\r\n  setModal(isShow) {\r\n    this.setState({ showModal: isShow });\r\n  }\r\n\r\n  setMenuDetail(isShow) {\r\n    this.setState({ showMenuDet: isShow })\r\n    document.body.style.overflowY = ''\r\n  }\r\n\r\n  handleCart = (data) => {\r\n    currentExt = data;\r\n  };\r\n\r\n  handleAddCart = () => {\r\n    var currentMerchant = JSON.parse(Cookies.get(\"currentMerchant\"))\r\n    const value = queryString.parse(window.location.search);\r\n    const mid = value.mid;\r\n    this.setModal(false);\r\n    var isStorePresent = false;\r\n    let cart = JSON.parse(localStorage.getItem('cart'))\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        isStorePresent = true;\r\n      }\r\n    });\r\n\r\n    let duplicateProduct = []\r\n    var isDuplicate = false;\r\n    cart.forEach((data) => {\r\n      if (data.mid === this.state.data.mid) {\r\n        data.food.forEach((food) => {\r\n          if (food.productId === this.state.currentData.productId) {\r\n            isDuplicate = true;\r\n            duplicateProduct.push(food)\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    var isDuplicateSelection = false\r\n    let indexOfspesificCart = 0 //get index of spesific cart product after break loop or match condition\r\n    if (isStorePresent && isDuplicate) {\r\n      let countAllSelection = 0\r\n      let sizecartArr = 0 //size cart of spesific index\r\n      let sizecurrentArr = 0 //size current selected menu\r\n\r\n      //loop list checkbox from current menu selection\r\n      currentExt.listcheckbox.forEach((currentfirstVal) => {\r\n        currentfirstVal.forEach((currentnestedVal) => {\r\n          if (currentnestedVal.name) {\r\n            sizecurrentArr += 1\r\n          }\r\n        })\r\n      })\r\n\r\n      //loop list radio from current menu selection\r\n      currentExt.listradio.forEach((currentfirstVal) => {\r\n        currentfirstVal.forEach((currentnestedVal) => {\r\n          if (currentnestedVal.name) {\r\n            sizecurrentArr += 1\r\n          }\r\n        })\r\n      })\r\n\r\n      let boolSpesificInd = true //to break following loop\r\n      duplicateProduct.forEach((menuProd, index) => {\r\n        if (boolSpesificInd) {\r\n          //loop list checkbox from cart\r\n          menuProd.foodListCheckbox.forEach(firstVal => {\r\n            firstVal.forEach(nestedVal => {\r\n              if (nestedVal.name) {\r\n                sizecartArr += 1\r\n              }\r\n            })\r\n          })\r\n\r\n          //loop list radio from cart\r\n          menuProd.foodListRadio.forEach(firstVal => {\r\n            firstVal.forEach(nestedVal => {\r\n              if (nestedVal.name) {\r\n                sizecartArr += 1\r\n              }\r\n            })\r\n          })\r\n\r\n          console.log(sizecartArr);\r\n          console.log(sizecurrentArr);\r\n          if (sizecartArr === sizecurrentArr) {\r\n            menuProd.foodListCheckbox.forEach((firstVal) => {\r\n              firstVal.forEach((nestedVal) => {\r\n\r\n                //loop listcheckbox from current advance selection to be match with added cart\r\n                currentExt.listcheckbox.forEach((currentfirstVal) => {\r\n                  currentfirstVal.forEach((currentnestedVal) => {\r\n                    if (nestedVal.name === currentnestedVal.name) {\r\n                      countAllSelection += 1\r\n                    }\r\n                  })\r\n                })\r\n              })\r\n            })\r\n\r\n            // loop radio from added cart\r\n            menuProd.foodListRadio.forEach((firstVal) => {\r\n              firstVal.forEach((nestedVal) => {\r\n\r\n                //loop radio from current advance selection to be match with added cart\r\n                currentExt.listradio.forEach((currentfirstVal) => {\r\n                  currentfirstVal.forEach((currentnestedVal) => {\r\n                    if (nestedVal.name === currentnestedVal.name) {\r\n                      countAllSelection += 1\r\n                    }\r\n                  })\r\n                })\r\n              })\r\n            })\r\n\r\n            if (sizecartArr === countAllSelection) {\r\n              if (menuProd.foodNote === currentExt.note) {\r\n                indexOfspesificCart = index\r\n                isDuplicateSelection = true\r\n                boolSpesificInd = false\r\n              } else {\r\n                sizecartArr = 0\r\n                countAllSelection = 0\r\n              }\r\n            } else {\r\n              sizecartArr = 0\r\n              countAllSelection = 0\r\n            }\r\n          } else {\r\n            sizecartArr = 0\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    var isFound = false\r\n    if (isStorePresent === true) {\r\n      if (isDuplicate === true) {\r\n        if (isDuplicateSelection) {\r\n          console.log('duplicate');\r\n          cart.forEach((data) => {\r\n            if (isFound === false) {\r\n              if (data.mid === this.state.data.mid) {\r\n                console.log('same mid');\r\n                if (isFound === false) {\r\n                  if (duplicateProduct[indexOfspesificCart].foodNote === currentExt.note) {\r\n                    isFound = true\r\n                    duplicateProduct[indexOfspesificCart].foodAmount += currentExt.detailCategory[0].amount\r\n                    duplicateProduct[indexOfspesificCart].foodTotalPrice += currentTotal\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n          if (isFound === false) {\r\n            var isAdded = false\r\n            cart.forEach((data) => {\r\n              if (data.mid === this.state.data.mid) {\r\n                data.food.forEach((food) => {\r\n                  if (isAdded === false) {\r\n                    isAdded = true\r\n                    data.food.push({\r\n                      productId: this.state.currentData.productId,\r\n                      foodName: this.state.currentData.foodName,\r\n                      foodPrice: this.state.currentData.foodPrice,\r\n                      foodImage: this.state.currentData.foodImage,\r\n                      foodCategory: currentExt.foodCategory,\r\n                      foodAmount: currentExt.detailCategory[0].amount,\r\n                      foodNote: currentExt.note,\r\n                      foodListCheckbox: currentExt.listcheckbox,\r\n                      foodListRadio: currentExt.listradio,\r\n                      foodTotalPrice: currentTotal\r\n                    });\r\n                  }\r\n                });\r\n              }\r\n            })\r\n          };\r\n        } else {\r\n          console.log('noduplicate choice');\r\n          cart.forEach((data) => {\r\n            if (data.mid === this.state.data.mid) {\r\n              data.food.push({\r\n                productId: this.state.currentData.productId,\r\n                foodName: this.state.currentData.foodName,\r\n                foodPrice: this.state.currentData.foodPrice,\r\n                foodImage: this.state.currentData.foodImage,\r\n                foodCategory: currentExt.foodCategory,\r\n                foodAmount: currentExt.detailCategory[0].amount,\r\n                foodNote: currentExt.note,\r\n                foodListCheckbox: currentExt.listcheckbox,\r\n                foodListRadio: currentExt.listradio,\r\n                foodTotalPrice: currentTotal\r\n              });\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        console.log('noduplicate product');\r\n        cart.forEach((data) => {\r\n          if (data.mid === this.state.data.mid) {\r\n            data.food.push({\r\n              productId: this.state.currentData.productId,\r\n              foodName: this.state.currentData.foodName,\r\n              foodPrice: this.state.currentData.foodPrice,\r\n              foodImage: this.state.currentData.foodImage,\r\n              foodCategory: currentExt.foodCategory,\r\n              foodAmount: currentExt.detailCategory[0].amount,\r\n              foodNote: currentExt.note,\r\n              foodListCheckbox: currentExt.listcheckbox,\r\n              foodListRadio: currentExt.listradio,\r\n              foodTotalPrice: currentTotal\r\n            });\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      cart.push({\r\n        mid: mid,\r\n        storeName: currentMerchant.storeName,\r\n        storeDesc: currentMerchant.storeDesc,\r\n        storeDistance: currentMerchant.distance,\r\n        food: [\r\n          {\r\n            productId: this.state.currentData.productId,\r\n            foodName: this.state.currentData.foodName,\r\n            foodPrice: this.state.currentData.foodPrice,\r\n            foodImage: this.state.currentData.foodImage,\r\n            foodCategory: currentExt.foodCategory,\r\n            foodAmount: currentExt.detailCategory[0].amount,\r\n            foodNote: currentExt.note,\r\n            foodListCheckbox: currentExt.listcheckbox,\r\n            foodListRadio: currentExt.listradio,\r\n            foodTotalPrice: currentTotal\r\n          },\r\n        ],\r\n      });\r\n    }\r\n    let addedMerchants = []\r\n    if (Cookies.get(\"addedMerchants\") === undefined) {\r\n      if (!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    } else {\r\n      addedMerchants = JSON.parse(Cookies.get(\"addedMerchants\"))\r\n      if (!addedMerchants.includes(mid)) {\r\n        addedMerchants.push(mid)\r\n        Cookies.set(\"addedMerchants\", addedMerchants)\r\n      }\r\n    }\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    Swal.fire({\r\n      position: 'top',\r\n      icon: 'success',\r\n      title: 'Berhasil masuk cart',\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    })\r\n    var auth = {\r\n      isLogged: false,\r\n      token: \"\",\r\n      new_event: true,\r\n      recommendation_status: false,\r\n      email: \"\",\r\n    };\r\n    if (Cookies.get(\"auth\") !== undefined) {\r\n      auth = JSON.parse(Cookies.get(\"auth\"))\r\n    }\r\n\r\n    let newNotes = ''\r\n    currentExt.listcheckbox.forEach(val => {\r\n      val.forEach(val2 => {\r\n        return newNotes += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    currentExt.listradio.forEach(val => {\r\n      val.forEach(val2 => {\r\n        return newNotes += `${val2.name}, `\r\n      })\r\n    })\r\n\r\n    if (currentExt.note) {\r\n      newNotes += currentExt.note\r\n    }\r\n\r\n    let uuid = uuidV4();\r\n    const date = new Date().toISOString();\r\n    uuid = uuid.replace(/-/g, \"\");\r\n    let signature = sha256(clientId + \":\" + auth.email + \":\" + secret + \":\" + date, secret)\r\n    Axios(address + \"txn/v1/cart-post/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-request-id\": uuid,\r\n        \"x-request-timestamp\": date,\r\n        \"x-client-id\": clientId,\r\n        \"x-signature\": signature,\r\n        \"token\": auth.token,\r\n      },\r\n      method: \"POST\",\r\n      data: {\r\n        mid: this.state.data.mid,\r\n        pid: this.state.currentData.productId,\r\n        notes: newNotes,\r\n        qty: currentExt.detailCategory[0].amount,\r\n      }\r\n    })\r\n      .then(() => {\r\n        console.log('addtocart succeed');\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  changeMenu = () => {\r\n    this.props.OpenSelect(!this.props.AllRedu.openSelect)\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n  }\r\n\r\n  changeHeader = (menu) => {\r\n    this.props.OpenSelect(false)\r\n    this.setState({ categName: menu })\r\n  }\r\n\r\n  isBottom = (el) => {\r\n    return (el.getBoundingClientRect().top + 100) <= window.innerHeight\r\n  }\r\n\r\n  stopAndLoadMore = (ind) => {\r\n    // console.log(ind);\r\n    // console.log(this.state.idCateg[ind]);\r\n    // console.log(this.state.productPage[ind]);\r\n    if (this.state.productCategpersize[ind].category_products.length < this.state.allProductsandCategories[ind].category_products.length) {\r\n      // console.log('testloadmore');\r\n      var openidCateg = [...this.state.idCateg]\r\n      openidCateg[ind] += this.state.size\r\n\r\n      var openproductPage = [...this.state.productPage]\r\n      openproductPage[ind] += this.state.size\r\n\r\n      this.setState({ idCateg: openidCateg, productPage: openproductPage, boolpage: true, choosenIndCateg: ind })\r\n    } else {\r\n      // console.log('nambah');\r\n      var num = this.state.counterLoad\r\n      num++\r\n      this.setState({ counterLoad: num })\r\n    }\r\n  }\r\n\r\n  loadMoreMerchant = () => {\r\n    this.state.productCategpersize.forEach((val, ind) => {\r\n      var wrappedElement = document.getElementById(ind)\r\n      if (this.isBottom(wrappedElement)) {\r\n        // console.log(this.state.counterLoad, 'counterLoad');\r\n        // console.log(wrappedElement.id, 'wrap');\r\n        if (wrappedElement.id == this.state.counterLoad) {\r\n          // console.log(ind, 'selected index');\r\n          document.removeEventListener('scroll', this.loadMoreMerchant)\r\n          this.stopAndLoadMore(ind)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('scroll', this.loadMoreMerchant)\r\n    document.removeEventListener('scroll', this.onScrollCart)\r\n\r\n  }\r\n\r\n  contentView = () => {\r\n    return this.state.productCategpersize.map((categ, indcateg) => {\r\n      return (\r\n        <div key={indcateg} className='product-section'>\r\n          <h2 id={categ.category_name.toLocaleLowerCase()} className='product-categ'>{categ.category_name.toLocaleLowerCase() || <Skeleton height={50} width={200} />}</h2>\r\n\r\n          <div className='list-product'>\r\n            {\r\n              categ.category_products.map((product, indprod) => {\r\n                return (\r\n                  <div key={indprod} className='product-merchant' onClick={() => this.handleDetail(product)}>\r\n                    <div className='product-img'>\r\n                      <img src={product.foodImage} className='product-imgContent' alt='' />\r\n                    </div>\r\n\r\n                    {/* desktop view */}\r\n                    <div className='product-detail'>\r\n                      {/* <div className='product-star'>\r\n                        <img className='product-star-img' src={StarIcon} alt='' />\r\n                        <h6 className='product-star-rating'>{product.foodRating}</h6>\r\n                      </div> */}\r\n\r\n                      <div className='product-name'>\r\n                        {product.foodName}\r\n                      </div>\r\n\r\n                      <div className='product-desc'>\r\n                        {product.foodDesc}\r\n                      </div>\r\n\r\n                      <div className='product-price'>\r\n                        {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* mobile view */}\r\n                    <div className='product-detail-mob'>\r\n                      <div className='product-detailInfo-mob'>\r\n                        {/* <div className='product-star-mob'>\r\n                          <img className='product-star-img-mob' src={StarIcon} alt='' />\r\n                          <h6 className='product-star-rating-mob'>{product.foodRating}</h6>\r\n                        </div> */}\r\n\r\n                        <div className='product-name-mob'>\r\n                          {product.foodName}\r\n                        </div>\r\n\r\n                        <div className='product-desc-mob'>\r\n                          {product.foodDesc}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className='product-price-mob'>\r\n                        {Intl.NumberFormat(\"id-ID\").format(product.foodPrice)}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          {\r\n            this.state.productCategpersize[indcateg].category_products.length < this.state.allProductsandCategories[indcateg].category_products.length ?\r\n              <div id={indcateg}>\r\n                <Skeleton style={{ paddingTop: 100, borderRadius: 30 }} />\r\n              </div>\r\n              :\r\n              <div id={indcateg}>\r\n                {/* <Skeleton style={{paddingTop:100, borderRadius: 30}} /> */}\r\n              </div>\r\n          }\r\n        </div>\r\n      );\r\n    })\r\n  }\r\n\r\n  handleCartAmount = (price) => {\r\n    currentTotal = price\r\n  }\r\n\r\n  menuDetail = () => {\r\n    if (this.state.showMenuDet === true) {\r\n      return (\r\n        <MenuDetail\r\n          isShow={this.state.showMenuDet}\r\n          onHide={() => this.setMenuDetail(false)}\r\n          datas={this.state.currentData}\r\n          handleCateg={this.state.productCategpersize}\r\n          handleAmount={this.handleCartAmount}\r\n          handleClick={this.handleAddCart}\r\n          handleData={this.handleCart}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  tourPage = () => {\r\n    if (this.state.startTour === true) {\r\n      return (\r\n        <TourPage \r\n          stepsContent={this.state.steptour}\r\n          isShowTour={this.state.startTour}\r\n          isHideTour={() =>this.showTourPage(false)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  showTourPage = (isShowTour) => {\r\n    this.setState({ startTour: isShowTour });\r\n    document.body.style.overflowY = 'auto';\r\n    localStorage.setItem('productTour', 0);\r\n  }\r\n\r\n  render() {\r\n    let cartButton;\r\n    const value = queryString.parse(window.location.search);\r\n    let notab = \"\"\r\n    if (localStorage.getItem('table')) {\r\n      if (!value.table) {\r\n        notab = localStorage.getItem('fctable')\r\n      } else {\r\n        notab = value.table || \"\"\r\n      }\r\n    } else {\r\n      if (localStorage.getItem('fctable')) {\r\n        notab = localStorage.getItem('fctable')\r\n      } else {\r\n        notab = value.table || \"\"\r\n      }\r\n    }\r\n    if (JSON.parse(localStorage.getItem('cart'))) {\r\n      let allCart = JSON.parse(localStorage.getItem('cart'))\r\n      let filterMerchantCart = allCart.filter(cartVal => {\r\n        return this.state.data.mid === cartVal.mid\r\n      })\r\n      if (filterMerchantCart.length) {\r\n        localStorage.setItem('table', notab)\r\n        localStorage.setItem('lastTable', notab)\r\n        let totalCartIcon = 0\r\n        filterMerchantCart[0].food.forEach(valCart => {\r\n          totalCartIcon += valCart.foodTotalPrice\r\n        })\r\n        if (filterMerchantCart[0].mid) {\r\n          if (this.state.isScrolling) {\r\n            cartButton = <></>\r\n          } else {\r\n            cartButton = (\r\n              <Link to={\"/cart\"}>\r\n                <div className='cartIcon-layout'>\r\n                  <div className='cartIcon-content'>\r\n                    <div className='cartItem-total'>Checkout {filterMerchantCart[0].food.length} Items</div>\r\n                    <div className='cartItem-price'>{Intl.NumberFormat(\"id-ID\").format(totalCartIcon)}</div>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            );\r\n          }\r\n        } else {\r\n          cartButton = <></>;\r\n        }\r\n      } else {\r\n        cartButton = <></>;\r\n      }\r\n    }\r\n\r\n    if (this.state.categName !== \"All Categories\") {\r\n      if (this.props.AllRedu.openSelect === false) {\r\n        //scroll to selected menu\r\n        document.addEventListener('scroll', this.loadMoreMerchant)\r\n        document.getElementById(this.state.categName).scrollIntoView({ behavior: \"smooth\" })\r\n        this.setState({ categName: 'All Categories' })\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className='storeBanner'>\r\n          {\r\n            this.state.data.image ?\r\n              <img src={this.state.data.image} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n              :\r\n              <Skeleton style={{ paddingTop: 10, width: \"100%\", height: \"100%\" }} />\r\n          }\r\n\r\n          {\r\n            this.state.isLogin ?\r\n              <div className='iconBanner'>\r\n                <Link to={\"/profile\"}>\r\n                  <div className='profileIcon-sec'>\r\n                    <div className='profileIcon'>\r\n                      <span className='reactProfIcons'>\r\n                        <img className='profileicon-img' src={ProfileIcon} alt='' />\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n\r\n                <Link to={\"/status\"}>\r\n                  <div className='notifIcon-sec'>\r\n                    <div className='notifIcon'>\r\n                      <span className='reactNotifIcons'>\r\n                        <img className='notificon-img' src={NotifIcon} alt='' />\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n              :\r\n              <div></div>\r\n          }\r\n        </div>\r\n        <div className='merchant-section' style={{ backgroundColor: this.state.backColor1 }}>\r\n          <div className='inside-merchantSection'>\r\n            <div className='merchant-info'>\r\n              <div className='top-merchantInfo'>\r\n                <div className='inside-topMerchantInfo'>\r\n                  <div className='merchant-title'>\r\n                    <div className='merchant-logo'>\r\n                      {\r\n                        this.state.data.logo ?\r\n                          <img src={this.state.data.logo} style={{ objectFit: 'cover' }} width='100%' height='100%' alt='' />\r\n                          :\r\n                          <Skeleton style={{ paddingTop: 10, width: \"100%\", height: \"100%\" }} />\r\n                      }\r\n                    </div>\r\n\r\n                    <div className='merchant-name'>\r\n                      <div className='merchant-mainName'>\r\n                        {this.state.data.title || <Skeleton style={{ paddingTop: 30, width: 200 }} />}\r\n                      </div>\r\n\r\n                      <div className='merchant-categName'>\r\n                        <div className='merchant-allcateg'>Merchant Category</div>\r\n                        <div className='merchant-starInfo'>\r\n                          {\r\n                            // this.state.data.rating ?\r\n                            //   <>\r\n                            //     <img className='star-img' src={StarIcon} alt='' />\r\n                            //     <div className='merchant-star'>{this.state.data.rating}</div>\r\n                            //   </>\r\n                            //   :\r\n                            //   null\r\n                            // <Skeleton width={50} />\r\n                          }\r\n                          {/* <div className='star-votes'>(50+ Upvotes)</div> */}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchant-call-sec' onClick={() => this.handlePhone(this.state.data.phone)}>\r\n                    <div className='merchant-call'>\r\n                      <span className='merchantCall-icon'>\r\n                        <img className='merchantCall-img' src={PhoneIcon} alt='' />\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='bottom-merchantInfo'>\r\n                <div className='inside-bottomMerchantInfo'>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='openhouricon' src={OpenHourIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>Open</div>\r\n                      <div className='bottom-detail-info'>Jum (08.00 - 20.00)</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='coinicon' src={CoinIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>$$$</div>\r\n                      <div className='bottom-detail-info'>50 K - 100 K</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className='merchantdetail-section'>\r\n                    <div className='icon-based'>\r\n                      <img className='locationicon' src={LocationIcon} alt='' />\r\n                    </div>\r\n\r\n                    <div className='detail-info'>\r\n                      <div className='top-detail-info'>Store Address</div>\r\n                      <div className='bottom-detail-info'>{this.state.data.address || <Skeleton style={{ paddingTop: 30, width: 100 }} />}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='merchant-category'>\r\n              <div className='select-category'>\r\n                <div className='listCategory'>\r\n                  <h2 className='categoryName'>{this.state.categName}</h2>\r\n\r\n                  <div className='arrow-based' onClick={() => this.changeMenu()} >\r\n                    <img className='arrowicon' src={ArrowIcon} alt='' />\r\n                  </div>\r\n                </div>\r\n\r\n                {\r\n                  this.props.AllRedu.openSelect ?\r\n                    <div className='custom-options'>\r\n                      <span className='custom-optionCloser' defaultValue='Rice Box'>Closer</span>\r\n                      {\r\n                        this.state.productCategpersize.map((menuCategory, index) => (\r\n                          <span key={index} className='custom-option' onClick={() => this.changeHeader(menuCategory.category_name.toLocaleLowerCase())}>{menuCategory.category_name.toLocaleLowerCase()}</span>\r\n                        ))\r\n                      }\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='product-layout' style={{ backgroundColor: this.state.backColor2 }}>\r\n          <div className='mainproduct-sec'>\r\n            {this.contentView()}\r\n\r\n            <div className='pikapp-info'>\r\n              <h3 className='pikappInfo'>Digital Menu By</h3>\r\n              <img className='Logopikapp' src={Logopikapp} alt='' />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {cartButton}\r\n        {this.menuDetail()}\r\n        {this.tourPage()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst Mapstatetoprops = (state) => {\r\n  return {\r\n    AllRedu: state.AllRedu,\r\n    AuthRedu: state.AuthRedu\r\n  }\r\n}\r\n\r\nexport default connect(Mapstatetoprops, { ValidQty, OpenSelect })(ProductView)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuDetail.js",["231","232"],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Menu\\MenuSelection.js",["233","234","235","236","237","238","239","240"],"import React, { useEffect, useState } from \"react\";\r\nimport '../../Asset/scss/MenuSelection.scss'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport Autosize from 'autosize'\r\nimport { ValidQty } from '../../Redux/Actions'\r\nimport { connect } from 'react-redux'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Axios from 'axios'\r\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\n\r\nconst checkboxDummyData = [\r\n    { additionname: 'topping', maxchoice: 3, isMandat: true, listaddition: [{ name: 'coklat', price: 5000, isChecked: false }, { name: 'keju', price: 6000, isChecked: false }, { name: 'pisang', price: 7000, isChecked: false }, { name: 'wijen', price: 8000, isChecked: false }] },\r\n    { additionname: 'boba', maxchoice: 2, isMandat: false, listaddition: [{ name: 'rainbow', price: 1000, isChecked: false }, { name: 'jelly', price: 2000, isChecked: false }, { name: 'pudding', price: 3000, isChecked: false }, { name: 'pearl', price: 4000, isChecked: false }] },\r\n]\r\n\r\nconst radioDummyData = [\r\n    { additionname: 'level pedas', isMandat: true, listaddition: [{ name: 'tidak pedas', isChecked: false }, { name: 'pedas', isChecked: false }, { name: 'pedas mampus', isChecked: false }] },\r\n    { additionname: 'level dingin', isMandat: false, listaddition: [{ name: 'tidak dingin', isChecked: false }, { name: 'dingin', isChecked: false }, { name: 'dingin mampus', isChecked: false }] },\r\n]\r\n\r\nconst MenuSelection = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const [detailCategory, setdetailCategory] = useState([\r\n        {\r\n            name: \"\",\r\n            amount: 1,\r\n        },\r\n    ])\r\n    const [note, setnote] = useState('')\r\n    const [checkboxVal, setcheckboxVal] = useState([])\r\n    const [checkboxData, setcheckboxData] = useState([])\r\n    const [indexCheckMandat, setindexCheckMandat] = useState(null)\r\n\r\n    const [radioVal, setradioVal] = useState([])\r\n    const [radioData, setradioData] = useState([])\r\n\r\n    const [updateDataEdit, setupdateDataEdit] = useState(false)\r\n    const [updateEditChoice, setupdateEditChoice] = useState(false)\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    useEffect(() => {\r\n        Autosize(document.getElementById('note'))\r\n\r\n        //hit API in order to get response of product detail v2\r\n        let uuid = uuidV4()\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        Axios(`${address}/home/v2/detail/product/`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-request-id\": uuid,\r\n                \"x-request-timestamp\": date,\r\n                \"x-client-id\": clientId,\r\n                \"token\": \"PUBLIC\",\r\n                \"pid\": props.datas.productId,\r\n            },\r\n            method: 'GET'\r\n        }).then(productRes => {\r\n            let productDet = productRes.data.results.extra_menus.extra_menu\r\n            let radioResponse = []\r\n            let checkboxResponse = []\r\n            productDet.forEach(valProduct => {\r\n                if (valProduct.menu_type === 'RADIO') {\r\n                    radioResponse.push(valProduct)\r\n                } else {\r\n                    checkboxResponse.push(valProduct)\r\n                }\r\n            })\r\n\r\n            let radioData = []\r\n            let radioValData = []\r\n            radioResponse.forEach(valRadRes => {\r\n                let listadditionradio = []\r\n                valRadRes.menu_extra_item.forEach(valList => {\r\n                    listadditionradio.push({\r\n                        name: valList.item_name,\r\n                        price: valList.extra_fee,\r\n                        isChecked: false\r\n                    })\r\n                })\r\n                radioData.push({\r\n                    additionname: valRadRes.menu_name,\r\n                    isMandat: valRadRes.menu_extra_item[0].is_mandatory,\r\n                    listaddition: listadditionradio\r\n                })\r\n                radioValData.push([])\r\n            })\r\n\r\n            let checkboxData = []\r\n            let checkValData = []\r\n            checkboxResponse.forEach(valCheckRes => {\r\n                let listadditioncheckbox = []\r\n                valCheckRes.menu_extra_item.forEach(valList => {\r\n                    listadditioncheckbox.push({\r\n                        name: valList.item_name,\r\n                        price: valList.extra_fee,\r\n                        isChecked: false\r\n                    })\r\n                })\r\n                checkboxData.push({\r\n                    additionname: valCheckRes.menu_name,\r\n                    maxchoice: valCheckRes.menu_extra_item[0].max_choice,\r\n                    isMandat: valCheckRes.menu_extra_item[0].is_mandatory,\r\n                    listaddition: listadditioncheckbox\r\n                })\r\n                checkValData.push([])\r\n            })\r\n\r\n            //set mandatory for checkboxes\r\n            let mandatCheckAvailability = checkboxData.length\r\n            let mandatCheckLength = checkboxData.length\r\n            checkboxData.forEach(valCheck => {\r\n                if (valCheck.isMandat) {\r\n                    mandatCheckAvailability = checkboxData.length - 1\r\n                }\r\n            })\r\n            if (mandatCheckLength === mandatCheckAvailability) {\r\n                dispatch({ type: 'MANDATCHECKCOND', payload: false })\r\n            } else {\r\n                dispatch({ type: 'MANDATCHECKCOND', payload: true })\r\n            }\r\n\r\n            //set mandatory for radio\r\n            let mandatRadioAvailability = radioData.length\r\n            let mandatRadioLength = radioData.length\r\n            radioData.forEach(valCheck => {\r\n                if (valCheck.isMandat) {\r\n                    mandatRadioAvailability = radioData.length - 1\r\n                }\r\n            })\r\n            if (mandatRadioLength === mandatRadioAvailability) {\r\n                dispatch({ type: 'MANDATRADIOCOND', payload: false })\r\n            } else {\r\n                dispatch({ type: 'MANDATRADIOCOND', payload: true })\r\n            }\r\n\r\n            if (!AllRedu.openMenuCart) {\r\n                var datas = props.datas\r\n                var list = []\r\n                if (datas.foodExt !== undefined) {\r\n                    datas.foodExt.map((data) => {\r\n                        return list.push({\r\n                            name: data.name,\r\n                            amount: data.amount + 1,\r\n                        });\r\n                    });\r\n                    props.ValidQty(1)\r\n                    setdetailCategory(list);\r\n                    setradioData(radioData)\r\n                    setcheckboxData(checkboxData)\r\n                    setradioVal(radioValData)\r\n                    setcheckboxVal(checkValData)\r\n                }\r\n            } else {\r\n                let amountofProd = props.datas.foodExt\r\n                amountofProd.forEach((val) => {\r\n                    props.ValidQty(val.amount)\r\n                })\r\n                setdetailCategory(props.datas.foodExt)\r\n                setnote(props.datas.foodNote)\r\n                setradioData(radioData)\r\n                setcheckboxData(checkboxData)\r\n                setupdateDataEdit(true)\r\n                dispatch({ type: 'CHECKBOXES', payload: props.datas.foodListCheckbox })\r\n                dispatch({ type: 'RADIOBUTTON', payload: props.datas.foodListRadio })\r\n                setradioVal(props.datas.foodListRadio)\r\n                setcheckboxVal(props.datas.foodListCheckbox)\r\n            }\r\n        }).catch(err => console.log(err))\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (AllRedu.openMenuCart && updateDataEdit) {\r\n            //this function is used for replace api data with edit data (CHECKBOX)\r\n            let editCheckbox = []\r\n            let newlistcheckboxAddition = []\r\n            let foodListCheckbox = props.datas.foodListCheckbox\r\n\r\n            checkboxData.forEach((firstVal, indfirstVal) => {\r\n                firstVal.listaddition.forEach(secondVal => {\r\n\r\n                    foodListCheckbox.forEach((foodfirstVal, indfoodFirst) => {\r\n                        let countNoMatch = 1\r\n                        foodfirstVal.forEach((foodsecondVal) => {\r\n                            if (indfirstVal === indfoodFirst) {\r\n                                if (secondVal.name === foodsecondVal.name) {\r\n                                    newlistcheckboxAddition.push({\r\n                                        name: secondVal.name,\r\n                                        price: secondVal.price,\r\n                                        isChecked: true\r\n                                    })\r\n                                } else {\r\n                                    if (countNoMatch === foodfirstVal.length) {\r\n                                        newlistcheckboxAddition.push({\r\n                                            name: secondVal.name,\r\n                                            price: secondVal.price,\r\n                                            isChecked: false\r\n                                        })\r\n                                        countNoMatch = 1\r\n                                    } else {\r\n                                        countNoMatch++\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    if (foodListCheckbox[indfirstVal].length === 0) {\r\n                        newlistcheckboxAddition.push({\r\n                            name: secondVal.name,\r\n                            price: secondVal.price,\r\n                            isChecked: false\r\n                        })\r\n                    }\r\n                })\r\n                editCheckbox.push({\r\n                    additionname: firstVal.additionname,\r\n                    maxchoice: firstVal.maxchoice,\r\n                    listaddition: newlistcheckboxAddition\r\n                })\r\n                newlistcheckboxAddition = []\r\n            })\r\n\r\n            //this function is used for replace api data with edit data (RADIO)\r\n            let editRadio = []\r\n            let newlistradioAddition = []\r\n            let foodListRadio = props.datas.foodListRadio\r\n\r\n            radioData.forEach((firstVal, indfirstVal) => {\r\n                firstVal.listaddition.forEach(secondVal => {\r\n\r\n                    foodListRadio.forEach((foodfirstVal, indfoodFirst) => {\r\n                        foodfirstVal.forEach((foodsecondVal) => {\r\n                            if (indfirstVal === indfoodFirst) {\r\n                                if (secondVal.name === foodsecondVal.name) {\r\n                                    newlistradioAddition.push({\r\n                                        name: secondVal.name,\r\n                                        price: secondVal.price,\r\n                                        isChecked: true\r\n                                    })\r\n                                } else {\r\n                                    newlistradioAddition.push({\r\n                                        name: secondVal.name,\r\n                                        price: secondVal.price,\r\n                                        isChecked: false\r\n                                    })\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    if (foodListRadio[indfirstVal].length === 0) {\r\n                        newlistradioAddition.push({\r\n                            name: secondVal.name,\r\n                            price: secondVal.price,\r\n                            isChecked: false\r\n                        })\r\n                    }\r\n                })\r\n                editRadio.push({\r\n                    additionname: firstVal.additionname,\r\n                    listaddition: newlistradioAddition\r\n                })\r\n                newlistradioAddition = []\r\n            })\r\n            setcheckboxData(editCheckbox)\r\n            setradioData(editRadio)\r\n            setupdateDataEdit(false)\r\n            setupdateEditChoice(true)\r\n        }\r\n    }, [radioVal, checkboxVal])\r\n\r\n    const checkboxArrData = () => {\r\n        return checkboxData.map((listname, indlistname) => {\r\n            return (\r\n                <div key={indlistname} className='checkbox-section'>\r\n                    <div className='title-section'>\r\n                        <div className='titleSelection'>Tambah {listname.additionname.toUpperCase().toLowerCase()}</div>\r\n                        <div className='optionSelection'>Optional, Max {listname.maxchoice} items {listname.isMandat ? '*wajib' : null}</div>\r\n                    </div>\r\n\r\n                    <div className='boxContainer'>\r\n                        {\r\n                            listname.listaddition.map((listadd, indlistadd) => {\r\n                                return (\r\n                                    AllRedu.openMenuCart ?\r\n                                        updateEditChoice ?\r\n                                            <div key={indlistadd} className='box-section'>\r\n                                                <input disabled={AllRedu.validQTY === 0} defaultChecked={listadd.isChecked} id={listadd.name} type='checkbox' name={`${listname.additionname}` + `${indlistadd}`} className={`${listname.additionname}`} value={listadd.name} onChange={(e) => onCheckboxChange(e, indlistname, listadd.price, `${listname.additionname}`, listname.maxchoice, listname.isMandat)} defaultChecked={listadd.isChecked} />\r\n                                                <label htmlFor={listadd.name}>\r\n                                                    <div className='checkBox-side'>\r\n                                                        <div className='check-box' />\r\n                                                        <div className='check-box-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                    </div>\r\n\r\n                                                    <div className='additon-amount'>\r\n                                                        +{listadd.price}\r\n                                                    </div>\r\n                                                </label>\r\n                                            </div>\r\n                                            :\r\n                                            null\r\n                                        :\r\n                                        <div key={indlistadd} className='box-section'>\r\n                                            <input disabled={AllRedu.validQTY === 0} defaultChecked={listadd.isChecked} id={listadd.name} type='checkbox' name={`${listname.additionname}` + `${indlistadd}`} className={`${listname.additionname}`} value={listadd.name} onChange={(e) => onCheckboxChange(e, indlistname, listadd.price, `${listname.additionname}`, listname.maxchoice, listname.isMandat)} defaultChecked={listadd.isChecked} />\r\n                                            <label htmlFor={listadd.name}>\r\n                                                <div className='checkBox-side'>\r\n                                                    <div className='check-box' />\r\n                                                    <div className='check-box-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                </div>\r\n\r\n                                                <div className='additon-amount'>\r\n                                                    +{listadd.price}\r\n                                                </div>\r\n                                            </label>\r\n                                        </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const radioArrData = () => {\r\n        return radioData.map((listname, indlistname) => {\r\n            return (\r\n                <div key={indlistname} className='radio-section'>\r\n                    <div className='title-section'>\r\n                        <div className='titleSelection'>{listname.additionname}</div>\r\n                        <div className='optionSelection'>Pilih Salah Satu {listname.isMandat ? '*wajib' : null}</div>\r\n                    </div>\r\n\r\n                    <div className='boxContainer'>\r\n                        {\r\n                            listname.listaddition.map((listadd, indlistadd) => {\r\n                                return (\r\n                                    AllRedu.openMenuCart ?\r\n                                        updateEditChoice ?\r\n                                            <div key={indlistadd} className='radiobox-section'>\r\n                                                <input disabled={AllRedu.validQTY === 0} onChange={(e) => onRadioChange(e, indlistname, listname.isMandat, listadd.price)} id={listadd.name} type='radio' name={listname.additionname} value={listadd.name} defaultChecked={listadd.isChecked} />\r\n                                                <label htmlFor={listadd.name}>\r\n                                                    <div className='radio-side'>\r\n                                                        <div className='radio-circle' />\r\n                                                        <div className='radio-circle-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                    </div>\r\n\r\n                                                    <div className='additon-amount'>\r\n                                                        +{listadd.price}\r\n                                                    </div>\r\n                                                </label>\r\n                                            </div>\r\n                                            :\r\n                                            null\r\n                                        :\r\n                                        <div key={indlistadd} className='radiobox-section'>\r\n                                            <input disabled={AllRedu.validQTY === 0} onChange={(e) => onRadioChange(e, indlistname, listname.isMandat, listadd.price)} id={listadd.name} type='radio' name={listname.additionname} value={listadd.name} defaultChecked={listadd.isChecked} />\r\n                                            <label htmlFor={listadd.name}>\r\n                                                <div className='radio-side'>\r\n                                                    <div className='radio-circle' />\r\n                                                    <div className='radio-circle-name'>{listadd.name.toUpperCase().toLowerCase()}</div>\r\n                                                </div>\r\n\r\n                                                <div className='additon-amount'>\r\n                                                        +{listadd.price}\r\n                                                    </div>\r\n                                            </label>\r\n                                        </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onCheckboxChange = (e, indexlistname, listprice, name, max, mandat) => {\r\n        var checkedChecks = document.querySelectorAll(`.${name}:checked`)\r\n        if (checkedChecks.length > max) {\r\n            e.target.checked = false\r\n        } else {\r\n            if (mandat) {\r\n                dispatch({ type: 'MANDATCHECK', payload: mandat })\r\n                setindexCheckMandat(indexlistname)\r\n            }\r\n            let checkboxArr = [...checkboxVal]\r\n            if (e.target.checked) {\r\n                checkboxArr[indexlistname].push({ name: e.target.value, price: listprice, isChecked: true })\r\n                setcheckboxVal(checkboxArr)\r\n                dispatch({ type: 'CHECKBOXES', payload: checkboxArr })\r\n            } else {\r\n                checkboxArr[indexlistname] = checkboxArr[indexlistname].filter(val => val.name !== e.target.value)\r\n                setcheckboxVal(checkboxArr)\r\n                let sizeArr = 0\r\n                checkboxArr.forEach((firstVal) => {\r\n                    firstVal.forEach((nestedVal) => {\r\n                        if (nestedVal.name) {\r\n                            sizeArr += 1\r\n                        }\r\n                    })\r\n                })\r\n                if (sizeArr > 0) {\r\n                    dispatch({ type: 'CHECKBOXES', payload: checkboxArr })\r\n                    if (indexCheckMandat === indexlistname) {\r\n                        if (checkboxArr[indexCheckMandat].length === 0) {\r\n                            dispatch({ type: 'MANDATCHECK', payload: false })\r\n                        }\r\n                    }\r\n                } else {\r\n                    dispatch({ type: 'CHECKBOXES', payload: [] })\r\n                    dispatch({ type: 'MANDATCHECK', payload: false })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onRadioChange = (e, indexlistname, mandat, listprice) => {\r\n        if (mandat) {\r\n            dispatch({ type: 'MANDATRADIO', payload: mandat })\r\n        }\r\n        let radiobuttonArr = [...radioVal]\r\n        radiobuttonArr[indexlistname].pop()\r\n        radiobuttonArr[indexlistname].push({ name: e.target.value, price: listprice, isChecked: true })\r\n        setradioVal(radiobuttonArr)\r\n        dispatch({ type: 'RADIOBUTTON', payload: radiobuttonArr })\r\n    }\r\n\r\n    const handleDecrease = (e) => {\r\n        let updatedFoodlist = detailCategory.map((food) => {\r\n            if (food === e && food.amount > 1) {\r\n                food.amount = food.amount - 1;\r\n                props.ValidQty(food.amount)\r\n            }\r\n            return food;\r\n        })\r\n        setdetailCategory(updatedFoodlist)\r\n    }\r\n\r\n    const handleIncrease = (e) => {\r\n        let updatedFoodlist = detailCategory.map((food) => {\r\n            if (food === e) {\r\n                food.amount = food.amount + 1;\r\n                props.ValidQty(food.amount)\r\n            }\r\n            return food;\r\n        })\r\n        setdetailCategory(updatedFoodlist)\r\n    }\r\n\r\n    const handleAmount = () => {\r\n        return detailCategory.map((food, ind) => {\r\n            return (\r\n                <div key={ind} className='amount-box-inside'>\r\n                    <div className='minus-box' style={{ backgroundColor: AllRedu.validQTY > 1 ? '#4bb7ac' : '#767676' }} onClick={() => handleDecrease(food)}>\r\n                        <div className='minus-sym'>\r\n                            -\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='number-area'>\r\n                        {food.amount}\r\n                    </div>\r\n\r\n                    <div className='plus-box' onClick={() => handleIncrease(food)}>\r\n                        <div className='plus-sym'>\r\n                            +\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const handleNote = (e) => {\r\n        setnote(e.target.value)\r\n    }\r\n\r\n    var thedata = {\r\n        detailCategory: detailCategory,\r\n        note: note ? note : '',\r\n        foodCategory: AllRedu.openMenuCart ? props.datas.foodCategory : AllRedu.foodCateg,\r\n        listcheckbox: checkboxVal,\r\n        listradio: radioVal\r\n    }\r\n    props.handleData(thedata)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !isMobile ?\r\n                    <div className='menuSelection-layout'>\r\n                        <div className='checkbox-layout'>\r\n                            {checkboxArrData()}\r\n                        </div>\r\n\r\n                        <div className='radio-layout'>\r\n                            {radioArrData()}\r\n                        </div>\r\n\r\n                        <div className='amount-section'>\r\n                            <div className='titleSelection'>\r\n                                Jumlah\r\n                            </div>\r\n\r\n                            <div className='amount-box'>\r\n                                {handleAmount()}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='note-section'>\r\n                            <div className='titleSelection'>\r\n                                Catatan\r\n                            </div>\r\n\r\n                            <div className='note-box'>\r\n                                <textarea id=\"note\" placeholder={\"Tambahkan Catatanmu\"} defaultValue={props.datas.foodNote} className='note-area' onChange={handleNote} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className='menuSelection-layout'>\r\n                        <div className='checkbox-layout'>\r\n                            {checkboxArrData()}\r\n                        </div>\r\n\r\n                        <div className='radio-layout'>\r\n                            {radioArrData()}\r\n                        </div>\r\n\r\n                        <div className='amount-section'>\r\n                            <div className='titleSelection'>\r\n                                Jumlah\r\n                            </div>\r\n\r\n                            <div className='amount-box'>\r\n                                {handleAmount()}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='note-section'>\r\n                            <div className='titleSelection'>\r\n                                Catatan\r\n                            </div>\r\n\r\n                            <div className='note-box'>\r\n                                <textarea id=\"note\" placeholder={\"Tambahkan Catatanmu\"} defaultValue={props.datas.foodNote} className='note-area' onChange={handleNote} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(null, { ValidQty })(MenuSelection)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\LoginDialog.js",["241","242","243","244","245","246","247","248"],"import React, { useState } from \"react\";\r\nimport '../../Asset/scss/AuthenticationDialog.scss'\r\nimport closeLogo from '../../Asset/Icon/close.png'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport PikaTextField from \"../../Component/TextField/PikaTextField\";\r\nimport PinDialog from \"./PinDialog\";\r\n\r\nconst LoginDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const [pinDialog, setPin] = useState(false)\r\n    const [email, setEmail] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideLogin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideLogin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const openPinDialog = () => {\r\n        if (checkEmail() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n\r\n        const data = {\r\n            email: email\r\n        };\r\n\r\n        dispatch({ type: 'LOGIN', payload: data });\r\n        dispatch({ type: 'LOGINSTEP', payload: true });\r\n\r\n        // setPin(true);\r\n        props.onHideLogin();\r\n        props.onShowPin();\r\n    }\r\n\r\n    const showPinDialog = () => {\r\n        if (pinDialog) {\r\n            return (\r\n                <PinDialog\r\n                    isShowPin={pinDialog}\r\n                    onHidePin={() => setPin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const checkEmail = () => {\r\n        let emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (emailRegex.test(email)) {\r\n            return true;\r\n        } else {\r\n            setErrorMsg(\"Email is not valid.\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Selangkah Lagi Sebelum Memesan!\r\n                    </div>\r\n\r\n                    <div className='textfield-auth'>\r\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\r\n                        \r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                    </Col>\r\n                                <Col />\r\n                            </Row>\r\n                            \r\n                        </Form>\r\n\r\n                        <div className='buttonSide-auth'>\r\n                            <p className=\"linkWords\" onClick={closeModal}>DAFTAR SAJA</p>\r\n                            <div className=\"submitButton-auth\" onClick={openPinDialog}>\r\n                                <div className=\"wordsButton-auth\">\r\n                                    SUBMIT\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='bottomSide-auth'>\r\n                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                            <div className='reqSide-auth'>\r\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Selangkah Lagi Sebelum Memesan!\r\n                    </div>\r\n\r\n                    <div className='textfield-auth'>\r\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\r\n                        \r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                    </Col>\r\n                                <Col />\r\n                            </Row>\r\n                            \r\n                        </Form>\r\n\r\n                        <div className='buttonSide-auth'>\r\n                            <p className=\"linkWords\" onClick={closeModal}>DAFTAR SAJA</p>\r\n                            <div className=\"submitButton-auth\" onClick={openPinDialog}>\r\n                                <div className=\"wordsButton-auth\">\r\n                                    SUBMIT\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='bottomSide-auth'>\r\n                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                            <div className='reqSide-auth'>\r\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\RegisterDialog.js",["249","250","251","252","253","254","255","256","257","258","259","260","261"],"import React, { useState } from \"react\";\r\nimport '../../Asset/scss/AuthenticationDialog.scss'\r\nimport closeLogo from '../../Asset/Icon/close.png'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport PikaTextField from \"../../Component/TextField/PikaTextField\";\r\nimport LoginDialog from \"../Authentication/LoginDialog\";\r\nimport PinDialog from \"./PinDialog\";\r\nimport ConfirmPinDialog from \"./ConfirmPinDialog\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport ForgotPin from \"./ForgotPinDialog\";\r\n\r\nconst RegisterDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [loginDialog, setLogin] = useState(false);\r\n    const [pinDialog, setPin] = useState(false);\r\n    const [confirmPinDialog, setConfirmPin] = useState(false);\r\n    const [forgotPinDialog, setForgotPin] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [captchaCounter, setCaptchaCounter] = useState(0);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [lat, setLat] = useState('');\r\n    const [lon, setLon] = useState('');\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    // if(AuthRedu.dataRegister) {\r\n    //     setName(AuthRedu.dataRegister.full_name);\r\n    //     setEmail(AuthRedu.dataRegister.email);\r\n    //     setPhone(AuthRedu.dataRegister.phone_number);\r\n    // }\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideRegister()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideRegister()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const openLoginDialog = () => {\r\n        setLogin(true);\r\n    }\r\n\r\n    const showLoginDialog = () => {\r\n        if (loginDialog) {\r\n            return (\r\n                <LoginDialog\r\n                    isShowLogin={loginDialog}\r\n                    onHideLogin={() => setLogin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    const openPinDialog = (e) => {\r\n        if (checkEmail() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n        if (checkName() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n        if (checkPhone() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        // this.props.LoadingButton()\r\n        setIsValid(true);\r\n\r\n        const data = {\r\n            full_name: name,\r\n            phone_number: phone,\r\n            email: email\r\n        };\r\n\r\n        dispatch({ type: 'REGISTER', payload: data });\r\n        dispatch({ type: 'LOGINSTEP', payload: false });\r\n\r\n        setPin(true);\r\n        // setConfirmPin(true);\r\n        // setForgotPin(true);\r\n        // props.onHideRegister();\r\n    }\r\n\r\n    const showPinDialog = () => {\r\n        if (pinDialog) {\r\n            return (\r\n                <PinDialog\r\n                    isShowPin={pinDialog}\r\n                    onHidePin={() => setPin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const handlePhone = (e) => {\r\n        setPhone(e.target.value);\r\n    }\r\n\r\n    const checkEmail = () => {\r\n        let emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (emailRegex.test(email)) {\r\n            return true;\r\n        } else {\r\n            setErrorMsg(\"Email is not valid.\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const checkName = () => {\r\n        if (name.length > 0) {\r\n            return true;\r\n        } else {\r\n            setErrorMsg(\"Name cannot be empty.\");\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const checkPhone = () => {\r\n        if (phone.startsWith(\"08\")) {\r\n            return true;\r\n        } else {\r\n            setErrorMsg(\"Phone not valid.\");\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const onChange = (value) => {\r\n        console.log(value);\r\n    }\r\n\r\n    const closeRegisterFlowDialog = () => {\r\n        setConfirmPin(false);\r\n        props.onHideRegister();\r\n    }\r\n\r\n    const closeLoginFlowDialog = () => {\r\n        setPin(false);\r\n        props.onHideRegister();\r\n    }\r\n\r\n    const closeForgotFlowDialog = () => {\r\n        setForgotPin(false);\r\n        props.onHideRegister();\r\n    }\r\n\r\n    const showDialog = (value) => {\r\n        if(pinDialog) {\r\n            return (\r\n                <PinDialog\r\n                    isShowPin={pinDialog}\r\n                    onHidePin={() => setPin(false)}\r\n                    onShowConfirm={() => setConfirmPin(true)}\r\n                    onShowForgotPin={() => setForgotPin(true)}\r\n                    onHideLoginFlow={closeLoginFlowDialog}\r\n                />\r\n            )\r\n        } else if(loginDialog){\r\n            return (\r\n                <LoginDialog\r\n                    isShowLogin={loginDialog}\r\n                    onHideLogin={() => setLogin(false)}\r\n                    onShowPin={() => setPin(true)}\r\n                />\r\n            )\r\n        } \r\n        else if(confirmPinDialog) {\r\n            return (\r\n                <ConfirmPinDialog\r\n                    isShowConfirmPin={confirmPinDialog}\r\n                    onHideConfirmPin={() => setConfirmPin(false)}\r\n                    onHideRegisterFlow={closeRegisterFlowDialog}\r\n                />\r\n            )\r\n        }\r\n        else if (forgotPinDialog) {\r\n            return (\r\n                <ForgotPin\r\n                    isShowForgotPin={forgotPinDialog}\r\n                    onHideForgotPin={() => setForgotPin(false)}\r\n                    onHideForgotFlow={closeForgotFlowDialog}\r\n                />\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Selangkah Lagi Sebelum Memesan!\r\n                    </div>\r\n\r\n                    <div className='textfield-auth'>\r\n                        <input type='text' className='textfieldinput-auth' placeholder=\"Nama Lengkap\" onChange={handleName} />\r\n                        <input type='tel' className='textfieldinput-auth' placeholder=\"Nomor Handphone (Whatsapp)\" onChange={handlePhone} />\r\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\r\n\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {!isCaptcha || (\r\n                                        <ReCAPTCHA sitekey=\"asd\" onChange={onChange} />\r\n                                    )}\r\n                                </Col>\r\n                                <Col />\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={6}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                </Col>\r\n                                <Col />\r\n                            </Row>\r\n                        \r\n                            <div className='buttonSide-auth'>\r\n                                <p className=\"linkWords\" onClick={openLoginDialog}>LOGIN SAJA</p>\r\n                                <div className=\"submitButton-auth\" onClick={openPinDialog}>\r\n                                    <div className=\"wordsButton-auth\">\r\n                                        NEXT\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='bottomSide-auth'>\r\n                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                <div className='reqSide-auth'>\r\n                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='modalMenuDetail-auth' style={{\r\n                    display: props.isShowRegister ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose-auth' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout-auth'>\r\n                            <div className='menuContain-all-auth'>\r\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\r\n\r\n                                {showDialog()}\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className='modalMenuDetail-auth' style={{\r\n                    display: props.isShowRegister ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose-auth' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout-auth'>\r\n                            <div className='menuContain-all-auth'>\r\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\r\n\r\n                                {showDialog()}\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegisterDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\PinDialog.js",["262","263","264","265","266","267","268","269","270","271","272"],"import React, { useState } from \"react\";\r\nimport '../../Asset/scss/AuthenticationDialog.scss'\r\nimport closeLogo from '../../Asset/Icon/close.png'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PinInput from \"react-pin-input\";\r\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport ConfirmPinDialog from './ConfirmPinDialog';\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport ForgotPin from \"./ForgotPinDialog\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport NotifModal from '../Modal/NotifModal';\r\n\r\nconst PinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [confirmPinDialog, setConfirmPin] = useState(false);\r\n    const [forgotPinDialog, setForgotPin] = useState(false);\r\n    const [pin, setPin] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [isLoginStep, setIsLoginStep] = useState(false);\r\n    const [captchaCounter, setCaptchaCounter] = useState(0);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHidePin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHidePin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const openConfirmPinDialog = () => {\r\n\r\n        if (checkPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n\r\n        const data = {\r\n            full_name: AuthRedu.dataRegister.full_name,\r\n            phone_number: AuthRedu.dataRegister.phone_number,\r\n            email: AuthRedu.dataRegister.email,\r\n            pin: pin\r\n        };\r\n\r\n        dispatch({ type: 'REGISTER', payload: data });\r\n        setIsLoginStep(false);\r\n        // setConfirmPin(true);\r\n        props.onHidePin();\r\n        props.onShowConfirm();\r\n    }\r\n\r\n    const handleLogin = (e) => {\r\n        if (checkPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n\r\n        dispatch({ type: 'LOADING' });\r\n\r\n        const data = {\r\n            username: AuthRedu.dataLogin.email,\r\n            pin: pin,\r\n            fcm_token: \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\",\r\n        };\r\n        const auth = {\r\n            isLogged: false,\r\n            token: \"\",\r\n            new_event: true,\r\n            recommendation_status: false,\r\n            email: \"\",\r\n            is_email_verified: true\r\n        };\r\n\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        axios(address + \"auth/v2/login\", {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-request-id\": uuid,\r\n            \"x-request-timestamp\": date,\r\n            \"x-client-id\": clientId,\r\n        },\r\n        method: \"POST\",\r\n        data: data,\r\n        })\r\n        .then((res) => {\r\n            setSuccessMessage(\"Login Berhasil.\");\r\n            setTimeout(() => {\r\n                auth.isLogged = true;\r\n                auth.token = res.data.token;\r\n                auth.new_event = res.data.new_event;\r\n                auth.recommendation_status = res.data.recommendation_status;\r\n                auth.is_email_verified = res.data.is_email_verified;\r\n                auth.email = AuthRedu.dataLogin.email;\r\n                Cookies.set(\"auth\", auth, { expires: 1 });\r\n                var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n                var latitude = getLocation.lat\r\n                var longitude = getLocation.lon\r\n                // props.onHidePin()\r\n                props.onHideLoginFlow()\r\n                dispatch({ type: 'DONELOAD' });\r\n            }, 1000);\r\n            // if (Cookies.get(\"lastLink\") !== undefined) {\r\n            //     var lastlink = JSON.parse(Cookies.get(\"lastLink\")).value\r\n            // }\r\n            // window.location.reload();\r\n            // if (lastlink.includes(\"?latitude\") || lastlink.includes(\"store?\")) {\r\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value\r\n            // } else {\r\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value + `?latitude=${latitude}&longitude=${longitude}`\r\n            // }\r\n            // } else {\r\n            // window.location.href = window.location.origin + `?latitude=${latitude}&longitude=${longitude}`\r\n            // }\r\n        })  \r\n        .catch((err) => {\r\n            if (err.response.data !== undefined) {\r\n                alert(err.response.data.err_message)\r\n                // props.DoneLoad()\r\n                dispatch({ type: 'DONELOAD' });\r\n            }\r\n            setCaptchaCounter(captchaCounter + 1);\r\n        });\r\n    }\r\n\r\n    const showConfirmPinDialog = () => {\r\n        if (confirmPinDialog) {\r\n            return (\r\n                <ConfirmPinDialog\r\n                    isShowConfirmPin={confirmPinDialog}\r\n                    onHideConfirmPin={() => setConfirmPin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    const openForgotPinDialog = () => {\r\n        props.onHidePin();\r\n        props.onShowForgotPin();\r\n        // setForgotPin(true);\r\n    }\r\n\r\n    const showForgotPinDialog = () => {\r\n        if (forgotPinDialog) {\r\n            return (\r\n                <ForgotPin\r\n                    isShowForgotPin={forgotPinDialog}\r\n                    onHideForgotPin={() => setForgotPin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    const handlePin = (e) => {\r\n        setPin(e);\r\n    }\r\n\r\n    const checkPin = () => {\r\n        if (pin.length < 6) {\r\n            setErrorMsg(\"PIN must be within 6 digit numeric.\");\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    const showNotifModal = () => {\r\n        if (AllRedu.buttonLoad === false) {\r\n            return <NotifModal isShowNotif={AllRedu.buttonLoad} responseMessage={successMessage} />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Ketik PIN Anda\r\n                    </div>\r\n\r\n                    <div className='mob-menu-category-auth'>\r\n                        Ketik 6 digit nomor PIN Anda\r\n                    </div>\r\n\r\n                    <div>\r\n                        \r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    <PinInput\r\n                                    length={6}\r\n                                    focus\r\n                                    // disabled\r\n                                    secret\r\n                                    ref={p => (pin => p)}\r\n                                    type=\"number\"\r\n                                    inputMode=\"numeric\"\r\n                                    // onChange={handlePin}\r\n                                    onComplete={handlePin}\r\n                                    />\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                        \r\n\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                </Col>\r\n                                <Col />\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {\r\n                                    !AuthRedu.isLoginStep ?\r\n                                    \r\n                                    <div className='menu-category-auth btm30'>\r\n                                        \r\n                                    </div>\r\n                                    :\r\n                                    <div className='menu-category-auth btm30' onClick={openForgotPinDialog}>\r\n                                        LUPA PIN ?\r\n                                    </div>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Form>\r\n\r\n                        <div className='buttonSide-auth'>\r\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n                            {\r\n                                !AuthRedu.isLoginStep ?\r\n                                    <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\r\n                                        <div className=\"wordsButton-auth\">\r\n                                            NEXT\r\n                                        </div>\r\n                                    </div>\r\n                                    :\r\n                                    // <div className=\"submitButton-auth\" onClick={handleLogin}>\r\n                                    //     <div className=\"wordsButton-auth\">\r\n                                    //         SUBMIT\r\n                                    //     </div>\r\n                                    // </div>\r\n\r\n                                    <div className=\"submitButton-auth\">\r\n                                        <PikaButton \r\n                                            title=\"SUBMIT\" \r\n                                            buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                            handleClick={handleLogin}\r\n                                            >\r\n                                        </PikaButton>\r\n                                    </div>\r\n                            }\r\n                        </div>\r\n\r\n                        <div className='bottomSide-auth'>\r\n                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                            <div className='reqSide-auth'>\r\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                            </div>\r\n                        </div>\r\n                            \r\n                    </div>\r\n                </div>\r\n                :\r\n\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Ketik PIN Anda\r\n                    </div>\r\n\r\n                    <div className='mob-menu-category-auth'>\r\n                        Ketik 6 digit nomor PIN Anda\r\n                    </div>\r\n\r\n                    <div>\r\n                        \r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    <PinInput\r\n                                    length={6}\r\n                                    focus\r\n                                    // disabled\r\n                                    secret\r\n                                    ref={p => (pin => p)}\r\n                                    type=\"number\"\r\n                                    inputMode=\"numeric\"\r\n                                    // onChange={handlePin}\r\n                                    onComplete={handlePin}\r\n                                    />\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n                        \r\n\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                </Col>\r\n                                <Col />\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    {\r\n                                    !AuthRedu.isLoginStep ?\r\n                                    \r\n                                    <div className='menu-category-auth btm30'>\r\n                                        \r\n                                    </div>\r\n                                    :\r\n                                    <div className='menu-category-auth btm30' onClick={openForgotPinDialog}>\r\n                                        LUPA PIN ?\r\n                                    </div>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Form>\r\n\r\n                        <div className='buttonSide-auth'>\r\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n                            {\r\n                                !AuthRedu.isLoginStep ?\r\n                                    <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\r\n                                        <div className=\"wordsButton-auth\">\r\n                                            NEXT\r\n                                        </div>\r\n                                    </div>\r\n                                    :\r\n                                    // <div className=\"submitButton-auth\" onClick={handleLogin}>\r\n                                    //     <div className=\"wordsButton-auth\">\r\n                                    //         SUBMIT\r\n                                    //     </div>\r\n                                    // </div>\r\n\r\n                                    <div className=\"submitButton-auth\">\r\n                                        <PikaButton \r\n                                            title=\"SUBMIT\" \r\n                                            buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                            handleClick={handleLogin}\r\n                                            >\r\n                                        </PikaButton>\r\n                                    </div>\r\n                            }\r\n                        </div>\r\n\r\n                        <div className='bottomSide-auth'>\r\n                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                            <div className='reqSide-auth'>\r\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                            </div>\r\n                        </div>\r\n                            \r\n                    </div>\r\n                </div>\r\n            }\r\n            {showNotifModal()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ConfirmPinDialog.js",["273","274","275","276","277","278","279","280","281","282"],"import React, { useState } from \"react\";\r\nimport '../../Asset/scss/AuthenticationDialog.scss'\r\nimport closeLogo from '../../Asset/Icon/close.png'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PinInput from \"react-pin-input\";\r\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\nimport Cookies from \"js-cookie\";\r\nimport LoginDialog from \"../Authentication/LoginDialog\";\r\nimport axios from \"axios\";\r\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Swal from 'sweetalert2';\r\n\r\nconst ConfirmPinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [loginDialog, setLogin] = useState(false)\r\n    const [confirmPin, setConfirmPin] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [captchaCounter, setCaptchaCounter] = useState(0);\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideConfirmPin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideConfirmPin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const handleConfirmPin = (e) => {\r\n        setConfirmPin(e);\r\n    }\r\n\r\n    const checkConfirmPin = () => {\r\n        if (AuthRedu.dataRegister.pin === confirmPin) {\r\n            return true;\r\n        } else {\r\n            setErrorMsg(\"PIN does not match.\");\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleRegister = (e) => {\r\n        if (checkConfirmPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n        dispatch({ type: 'LOADING' });\r\n\r\n        const data = {\r\n            full_name: AuthRedu.dataRegister.full_name,\r\n            password: confirmPin,\r\n            phone_number: AuthRedu.dataRegister.phone_number,\r\n            email: AuthRedu.dataRegister.email,\r\n            gender: \"MALE\",\r\n            birth_day: \"01011970\",\r\n            token: \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\",\r\n        };\r\n\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        axios(address + \"auth/register\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-request-id\": uuid,\r\n                \"x-request-timestamp\": date,\r\n                \"x-client-id\": clientId,\r\n            },\r\n            method: \"POST\",\r\n            data: data,\r\n        })\r\n            .then((res) => {\r\n                Swal.fire({\r\n                    position: 'top',\r\n                    icon: 'success',\r\n                    title: 'Register Berhasil.',\r\n                    // showConfirmButton: true,\r\n                    confirmButtonColor: \"#4bb7ac\",\r\n                    confirmButtonText: \"OK\",\r\n                    // closeOnConfirm: false,\r\n                    timer: 3000\r\n                }).then(() => {\r\n                    handleLogin();\r\n                })\r\n                // window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n                if (err.response.data !== undefined) {\r\n                    alert(err.response.data.err_message)\r\n                    // props.DoneLoad()\r\n                    dispatch({ type: 'DONELOAD' });\r\n                }\r\n                setCaptchaCounter(captchaCounter + 1);\r\n            });\r\n\r\n    }\r\n\r\n    const handleLogin = (e) => {\r\n        const data = {\r\n            username: AuthRedu.dataRegister.email,\r\n            pin: confirmPin,\r\n            fcm_token: \"qaah4zq3cutmr36kqvq95qj5hax8f9ku25fv\",\r\n        };\r\n\r\n        const auth = {\r\n            isLogged: false,\r\n            token: \"\",\r\n            new_event: true,\r\n            recommendation_status: false,\r\n            email: \"\",\r\n            is_email_verified: true\r\n        };\r\n\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        axios(address + \"auth/v2/login\", {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-request-id\": uuid,\r\n            \"x-request-timestamp\": date,\r\n            \"x-client-id\": clientId,\r\n        },\r\n        method: \"POST\",\r\n        data: data,\r\n        })\r\n        .then((res) => {\r\n            auth.isLogged = true;\r\n            auth.token = res.data.token;\r\n            auth.new_event = res.data.new_event;\r\n            auth.recommendation_status = res.data.recommendation_status;\r\n            auth.is_email_verified = res.data.is_email_verified;\r\n            auth.email = AuthRedu.dataRegister.email;\r\n            Cookies.set(\"auth\", auth, { expires: 1 });\r\n            var getLocation = JSON.parse(localStorage.getItem(\"longlat\"))\r\n            var latitude = getLocation.lat\r\n            var longitude = getLocation.lon\r\n            // props.onHideConfirmPin()\r\n            props.onHideRegisterFlow();\r\n            dispatch({ type: 'DONELOAD' });\r\n            // if (Cookies.get(\"lastLink\") !== undefined) {\r\n            //     var lastlink = JSON.parse(Cookies.get(\"lastLink\")).value;\r\n            // }\r\n            // window.location.reload();\r\n            // if (lastlink.includes(\"?latitude\") || lastlink.includes(\"store?\")) {\r\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value\r\n            // } else {\r\n            //     window.location.href = JSON.parse(Cookies.get(\"lastLink\")).value + `?latitude=${latitude}&longitude=${longitude}`\r\n            // }\r\n            // } else {\r\n            //     window.location.href = window.location.origin + `?latitude=${latitude}&longitude=${longitude}`\r\n            // }\r\n        }) \r\n        .catch((err) => {\r\n            if (err.response.data !== undefined) {\r\n                alert(err.response.data.err_message)\r\n                // props.DoneLoad()\r\n                dispatch({ type: 'DONELOAD' });\r\n            }\r\n            setCaptchaCounter(captchaCounter + 1);\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Konfirmasi PIN Anda\r\n                    </div>\r\n\r\n                    <div className='mob-menu-category-auth'>\r\n                        Konfirmasi 6 digit nomor PIN Anda\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    <PinInput\r\n                                    length={6}\r\n                                    focus\r\n                                    // disabled\r\n                                    secret\r\n                                    ref={p => (pin => p)}\r\n                                    type=\"number\"\r\n                                    inputMode=\"numeric\"\r\n                                    onChange={handleConfirmPin}\r\n                                    />\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                {isValid || (\r\n                                    <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                )}\r\n                                </Col>\r\n                                <Col />\r\n                            </Row>\r\n                            \r\n                        </Form>\r\n                        \r\n                        <div className='buttonSide-auth'>\r\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n\r\n                            {/* <div className=\"submitButton-auth\" onClick={handleRegister}>\r\n                                <div className=\"wordsButton-auth\">\r\n                                    SUBMIT\r\n                                </div>\r\n                            </div> */}\r\n\r\n                            <div className=\"submitButton-auth\">\r\n                                <PikaButton \r\n                                    title=\"SUBMIT\" \r\n                                    buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                    handleClick={handleRegister}\r\n                                    >\r\n                                </PikaButton>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className='bottomSide-auth'>\r\n                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                            <div className='reqSide-auth'>\r\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Konfirmasi PIN Anda\r\n                    </div>\r\n\r\n                    <div className='mob-menu-category-auth'>\r\n                        Konfirmasi 6 digit nomor PIN Anda\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                    <PinInput\r\n                                    length={6}\r\n                                    focus\r\n                                    // disabled\r\n                                    secret\r\n                                    ref={p => (pin => p)}\r\n                                    type=\"number\"\r\n                                    inputMode=\"numeric\"\r\n                                    onChange={handleConfirmPin}\r\n                                    />\r\n                                    <div></div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col xs={11}>\r\n                                {isValid || (\r\n                                    <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                )}\r\n                                </Col>\r\n                                <Col />\r\n                            </Row>\r\n                            \r\n                        </Form>\r\n                        \r\n                        <div className='buttonSide-auth'>\r\n                            <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n\r\n                            {/* <div className=\"submitButton-auth\" onClick={handleRegister}>\r\n                                <div className=\"wordsButton-auth\">\r\n                                    SUBMIT\r\n                                </div>\r\n                            </div> */}\r\n\r\n                            <div className=\"submitButton-auth\">\r\n                                <PikaButton \r\n                                    title=\"SUBMIT\" \r\n                                    buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                    handleClick={handleRegister}\r\n                                    >\r\n                                </PikaButton>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className='bottomSide-auth'>\r\n                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                            <div className='reqSide-auth'>\r\n                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmPinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ForgotPinDialog.js",["283","284","285","286","287"],"import React, { useState } from \"react\";\r\nimport '../../Asset/scss/AuthenticationDialog.scss'\r\nimport closeLogo from '../../Asset/Icon/close.png'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport pikappLogo from '../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { address, clientId } from \"../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Swal from 'sweetalert2';\r\nimport PikaButton from \"../../Component/Button/PikaButton\";\r\n\r\nconst ForgotPinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const [email, setEmail] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideForgotPin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideForgotPin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const handleEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const checkEmail = () => {\r\n        let emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (emailRegex.test(email)) {\r\n            return true;\r\n        } else {\r\n            setErrorMsg(\"Email is not valid.\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (checkEmail() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n        dispatch({ type: 'LOADING' });\r\n\r\n        const data = {\r\n            email: email\r\n        };\r\n\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        axios(address + \"auth/forget-pin\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-request-id\": uuid,\r\n                \"x-request-timestamp\": date,\r\n                \"x-client-id\": clientId,\r\n            },\r\n            method: \"POST\",\r\n            data: data,\r\n        })\r\n            .then((res) => {\r\n                Swal.fire({\r\n                    position: 'top',\r\n                    icon: 'success',\r\n                    text: 'Link verifikasi telah dikirim ke alamat email Anda. Segera lakukan reset PIN untuk melanjutkan proses ini.',\r\n                    showConfirmButton: true,\r\n                    confirmButtonColor: \"#4bb7ac\",\r\n                    confirmButtonText: \"OK\",\r\n                    closeOnConfirm: false,\r\n                    // timer: 3000\r\n                }).then(() => {\r\n                    props.onHideForgotFlow();\r\n                    dispatch({ type: 'DONELOAD' });\r\n                })\r\n                // window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n                if (err.response.data !== undefined) {\r\n                    alert(err.response.data.err_message)\r\n                    // props.DoneLoad()\r\n                    dispatch({ type: 'DONELOAD' });\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Lupa PIN ?\r\n                    </div>\r\n\r\n                    <div className='mob-menu-category-auth'>\r\n                        Silahkan masukkan email Anda yang terdaftar.\r\n                    </div>\r\n\r\n                    <div className='textfield-auth'>\r\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\r\n\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={11}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                    </Col>\r\n                                    <Col />\r\n                                </Row>\r\n                                \r\n                            </Form>\r\n\r\n                            <div className='buttonSide-auth'>\r\n                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n\r\n                                {/* <div className=\"submitButton-auth\">\r\n                                    <div className=\"wordsButton-auth\" onClick={handleSubmit}>\r\n                                        SUBMIT\r\n                                    </div>\r\n                                </div> */}\r\n\r\n                                <div className=\"submitButton-auth\">\r\n                                    <PikaButton \r\n                                        title=\"SUBMIT\" \r\n                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                        handleClick={handleSubmit}\r\n                                        >\r\n                                    </PikaButton>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className='bottomSide-auth'>\r\n                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                <div className='reqSide-auth'>\r\n                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                            \r\n                :\r\n                <div className='menu-detail-auth'>\r\n                    <div className='menu-name-auth'>\r\n                        Lupa PIN ?\r\n                    </div>\r\n\r\n                    <div className='mob-menu-category-auth'>\r\n                        Silahkan masukkan email Anda yang terdaftar.\r\n                    </div>\r\n\r\n                    <div className='textfield-auth'>\r\n                        <input type='email' className='textfieldinput-auth' placeholder=\"Alamat Email\" onChange={handleEmail} />\r\n\r\n                            <Form>\r\n                                <Row>\r\n                                    <Col xs={11}>\r\n                                    {isValid || (\r\n                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                    )}\r\n                                    </Col>\r\n                                    <Col />\r\n                                </Row>\r\n                                \r\n                            </Form>\r\n\r\n                            <div className='buttonSide-auth'>\r\n                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n\r\n                                {/* <div className=\"submitButton-auth\">\r\n                                    <div className=\"wordsButton-auth\" onClick={handleSubmit}>\r\n                                        SUBMIT\r\n                                    </div>\r\n                                </div> */}\r\n\r\n                                <div className=\"submitButton-auth\">\r\n                                    <PikaButton \r\n                                        title=\"SUBMIT\" \r\n                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                        handleClick={handleSubmit}\r\n                                        >\r\n                                    </PikaButton>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className='bottomSide-auth'>\r\n                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                <div className='reqSide-auth'>\r\n                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ForgotPinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Redux\\Reducers\\AuthenticationReducers.js",["288"],"const INITIAL_STATE = {\r\n    dataRegister : {},\r\n    dataLogin : {},\r\n    isLoginStep : false,\r\n    dataResetPin : {},\r\n    dataPin : '',\r\n    dataPinToken: '',\r\n    isMerchantQR: false,\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"REGISTER\" :\r\n            return {...state, dataRegister: action.payload}\r\n        case \"LOGIN\" :\r\n            return {...state, dataLogin: action.payload}\r\n        case \"LOGINSTEP\" :\r\n            return {...state, isLoginStep: action.payload}\r\n        case \"RESETPIN\" :\r\n            return {...state, dataResetPin: action.payload}\r\n        case \"PIN\" :\r\n            return {...state, dataPin: action.payload}\r\n        case \"PINTOKEN\" :\r\n            return {...state, dataPinToken: action.payload}\r\n        case \"ISMERCHANTQR\":\r\n            return { ...state, isMerchantQR: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\View\\ResetPin\\ResetPinView.js",["289","290","291"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch } from 'react-redux'\r\nimport \"../../Asset/scss/AuthenticationLayout.scss\";\r\nimport ResetPinDialog from '../../Component/Authentication/ResetPin/ResetPinDialog';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst ResetPin = (props) => {\r\n    const dispatch = useDispatch();\r\n    const pintoken = props.match.params.pintoken;\r\n    const [showResetDialog, setShowResetDialog] = useState(true);\r\n\r\n    console.log(pintoken);\r\n    // const setMenuDetail = () => {\r\n        // setShowResetDialog(true);\r\n    // }\r\n\r\n    const resetPin = () => {\r\n        dispatch({ type: 'PINTOKEN', payload: pintoken });\r\n        if (showResetDialog) {\r\n            return (\r\n            <ResetPinDialog\r\n                isShowResetPin={showResetDialog}\r\n                onHideResetPin={() => setShowResetDialog(true)}\r\n            />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {resetPin()}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ResetPin\r\n// class ResetPinView extends React.Component {\r\n\r\n//     state = {\r\n//         showResetDialog : true\r\n//     }\r\n\r\n//     setMenuDetail(isShow) {\r\n//         this.setState({ showResetDialog: isShow })\r\n//         document.body.style.overflowY = ''\r\n//     }\r\n\r\n//     resetPin = () => {\r\n//         if (this.state.showResetDialog === true) {\r\n//           return (\r\n//             <ResetPinDialog\r\n//                 isShowResetPin={this.state.showResetDialog}\r\n//                 onHideResetPin={() => this.setMenuDetail(true)}\r\n//             />\r\n//           );\r\n//         }\r\n//     }\r\n\r\n//     render() { \r\n//         return (\r\n//             <>\r\n//             {this.resetPin()}\r\n//             </>\r\n//         );\r\n//     }\r\n// }\r\n// export default connect(null, {LoadingButton, DoneLoad })(ResetPinView)","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ResetPinDialog.js",["292","293","294","295","296"],"import React, { useState } from \"react\";\r\nimport '../../../Asset/scss/AuthenticationDialog.scss';\r\nimport closeLogo from '../../../Asset/Icon/close.png';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PinInput from \"react-pin-input\";\r\nimport pikappLogo from '../../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport PikaButton from \"../../Button/PikaButton\";\r\nimport ConfirmResetPinDialog from \"../ResetPin/ConfirmResetPinDialog\";\r\n\r\nconst ResetPinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [confirmResetPinDialog, setConfirmResetPin] = useState(false);\r\n    const [resetPin, setResetPin] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideResetPin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideResetPin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const handleResetPin = (e) => {\r\n        setResetPin(e);\r\n    }\r\n\r\n    const checkResetPin = () => {\r\n        if (resetPin.length < 6) {\r\n          setErrorMsg(\"PIN must be within 6 digit numeric.\");\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n    };\r\n\r\n    const openConfirmPinDialog = (e) => {\r\n        if (checkResetPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n\r\n        setIsValid(true);\r\n\r\n        const data = {\r\n            currentPin : resetPin\r\n        };\r\n\r\n        dispatch({ type: 'RESETPIN', payload: data });\r\n\r\n        setConfirmResetPin(true);\r\n    }\r\n\r\n    const showConfirmPinDialog = () => {\r\n        if(confirmResetPinDialog) {\r\n            return (\r\n                <ConfirmResetPinDialog \r\n                    isShowConfirmResetPin={confirmResetPinDialog}\r\n                    onHideConfirmResetPin={() =>setConfirmResetPin(false)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='modalMenuDetail-auth' style={{\r\n                    display: props.isShowResetPin ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose-auth' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout-auth'>\r\n                            <div className='menuContain-all-auth'>\r\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\r\n\r\n                                <div className='menu-detail-auth'>\r\n                                    <div className='menu-name-auth'>\r\n                                        Perbarui PIN Anda \r\n                                    </div>\r\n\r\n                                    <div className='mob-menu-category-auth'>\r\n                                        Ketik 6 digit nomor PIN baru Anda\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Form>\r\n                                            <Row>\r\n                                                <Col xs={11}>\r\n                                                    <PinInput\r\n                                                    length={6}\r\n                                                    focus\r\n                                                    // disabled\r\n                                                    secret\r\n                                                    ref={p => (pin => p)}\r\n                                                    type=\"number\"\r\n                                                    inputMode=\"numeric\"\r\n                                                    onChange={handleResetPin}\r\n                                                    />\r\n                                                    <div></div>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <Col xs={11}>\r\n                                                {isValid || (\r\n                                                    <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                                )}\r\n                                                </Col>\r\n                                                <Col />\r\n                                            </Row>\r\n                                            \r\n                                        </Form>\r\n                                        \r\n                                        <div className='buttonSide-auth'>\r\n                                            <p className=\"linkWords colorWhite\">KEMBALI</p>\r\n                                            <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\r\n                                                <div className=\"wordsButton-auth txtLine\">\r\n                                                    NEXT\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n    \r\n                                        <div className='bottomSide-auth'>\r\n                                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                            <div className='reqSide-auth'>\r\n                                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className='modalMenuDetail-auth' style={{\r\n                    display: props.isShowResetPin ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose-auth' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout-auth'>\r\n                            <div className='menuContain-all-auth'>\r\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\r\n\r\n                                <div className='menu-detail-auth'>\r\n                                    <div className='menu-name-auth'>\r\n                                        Perbarui PIN Anda \r\n                                    </div>\r\n\r\n                                    <div className='mob-menu-category-auth'>\r\n                                        Ketik 6 digit nomor PIN baru Anda\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Form>\r\n                                            <Row>\r\n                                                <Col xs={11}>\r\n                                                    <PinInput\r\n                                                    length={6}\r\n                                                    focus\r\n                                                    // disabled\r\n                                                    secret\r\n                                                    ref={p => (pin => p)}\r\n                                                    type=\"number\"\r\n                                                    inputMode=\"numeric\"\r\n                                                    onChange={handleResetPin}\r\n                                                    />\r\n                                                    <div></div>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <Col xs={11}>\r\n                                                {isValid || (\r\n                                                    <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                                )}\r\n                                                </Col>\r\n                                                <Col />\r\n                                            </Row>\r\n                                            \r\n                                        </Form>\r\n                                        \r\n                                        <div className='buttonSide-auth'>\r\n                                            <p className=\"linkWords colorWhite\">KEMBALI</p>\r\n                                            <div className=\"submitButton-auth\" onClick={openConfirmPinDialog}>\r\n                                                <div className=\"wordsButton-auth txtLine\">\r\n                                                    NEXT\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n    \r\n                                        <div className='bottomSide-auth'>\r\n                                            <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                            <div className='reqSide-auth'>\r\n                                                <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                                <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                            </div>\r\n                                        </div>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n\r\n            {showConfirmPinDialog()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Authentication\\ResetPin\\ConfirmResetPinDialog.js",["297","298","299","300"],"import React, { useState } from \"react\";\r\nimport '../../../Asset/scss/AuthenticationDialog.scss';\r\nimport closeLogo from '../../../Asset/Icon/close.png';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PinInput from \"react-pin-input\";\r\nimport pikappLogo from '../../../Asset/Logo/logo4x.png';\r\nimport { Alert, Col, Form, Row } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { address, clientId } from \"../../../Asset/Constant/APIConstant\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport Swal from 'sweetalert2';\r\nimport Cookies from \"js-cookie\";\r\nimport PikaButton from \"../../../Component/Button/PikaButton\";\r\n\r\nconst ConfirmResetPinDialog = (props) => {\r\n    const dispatch = useDispatch()\r\n    const AllRedu = useSelector(state => state.AllRedu)\r\n    const AuthRedu = useSelector(state => state.AuthRedu);\r\n    const [confirmResetPin, setConfirmResetPin] = useState('');\r\n    const [isValid, setIsValid] = useState(true);\r\n    const [isCaptcha, setIsCaptcha] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n    const [successStatus, setSuccessStatus] = useState(false);\r\n\r\n    const isMobile = useMediaQuery({ maxWidth: 768 })\r\n\r\n    const closeModal = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: 'DEFAULTSTATE' })\r\n        props.onHideConfirmResetPin()\r\n    }\r\n\r\n    const backModal = (e) => {\r\n        if (AllRedu.openMenuCart) {\r\n            // setmenuSelect(false)\r\n            e.stopPropagation()\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n            props.onHideConfirmResetPin()\r\n        } else {\r\n            // setmenuSelect(false)\r\n            dispatch({ type: 'DEFAULTSTATE' })\r\n        }\r\n    }\r\n\r\n    const backToHome = (e) => {\r\n        window.location.href = '/'\r\n    }\r\n\r\n    const handleConfirmResetPin = (e) => {\r\n        setConfirmResetPin(e);\r\n    }\r\n\r\n    const checkConfirmResetPin = () => {\r\n        if (AuthRedu.dataResetPin.currentPin === confirmResetPin) {\r\n            return true;\r\n          } else {\r\n            setErrorMsg(\"PIN does not match.\");\r\n            return false;\r\n          }\r\n    };\r\n\r\n    const handleResetPin = (e) => {\r\n        if (checkConfirmResetPin() === false) {\r\n            setIsValid(false);\r\n            return;\r\n        }\r\n        setIsValid(true);\r\n        dispatch({ type: 'LOADING' });\r\n\r\n        const data = {\r\n            // email: email\r\n            pin : confirmResetPin\r\n        };\r\n\r\n        let uuid = uuidV4();\r\n        uuid = uuid.replaceAll(\"-\", \"\");\r\n        const date = new Date().toISOString();\r\n        axios(address + \"auth/reset-pin/\" + AuthRedu.dataPinToken + \"/\", {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-request-id\": uuid,\r\n                \"x-request-timestamp\": date,\r\n                \"x-client-id\": clientId,\r\n            },\r\n            method: \"POST\",\r\n            data: data,\r\n        })\r\n            .then((res) => {\r\n                setSuccessStatus(true);\r\n                var lastLink = { value: window.location.origin}\r\n                Cookies.set(\"lastLink\", lastLink,{ expires: 1});\r\n                localStorage.clear();\r\n                Cookies.remove(\"auth\");\r\n                dispatch({ type: 'DONELOAD' });\r\n                // props.DoneLoad();\r\n                // window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n                if (err.response.data !== undefined) {\r\n                    alert(err.response.data.err_message);\r\n                    // setSuccessStatus(true);\r\n                    // props.DoneLoad()\r\n                    dispatch({ type: 'DONELOAD' });\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !isMobile ?\r\n                <div className='modalMenuDetail-auth' style={{\r\n                    display: props.isShowConfirmResetPin ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose-auth' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout-auth'>\r\n                            <div className='menuContain-all-auth'>\r\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\r\n\r\n                                <div className='menu-detail-auth'>\r\n                                    {\r\n                                        !successStatus ?\r\n                                        <div className='menu-name-auth'>\r\n                                            Perbarui PIN Anda \r\n                                        </div>\r\n                                        :\r\n                                        <div className='menu-name-auth'>\r\n                                            PIN Anda Berhasil Diubah! \r\n                                        </div>\r\n                                    }\r\n\r\n                                    {\r\n                                        !successStatus ?\r\n                                        <div className='mob-menu-category-auth'>\r\n                                            Konfirmasi 6 digit nomor PIN baru Anda\r\n                                        </div>\r\n                                        :\r\n                                        <div className='mob-menu-category-auth'>\r\n                                            Silahkan lakukan login kembali untuk memesan\r\n                                        </div>\r\n\r\n                                    }\r\n\r\n                                    {\r\n                                        !successStatus ?\r\n                                        <div>\r\n                                            <Form>\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                        <PinInput\r\n                                                        length={6}\r\n                                                        focus\r\n                                                        // disabled\r\n                                                        secret\r\n                                                        ref={p => (pin => p)}\r\n                                                        type=\"number\"\r\n                                                        inputMode=\"numeric\"\r\n                                                        onChange={handleConfirmResetPin}\r\n                                                        />\r\n                                                        <div></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                    {isValid || (\r\n                                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                                    )}\r\n                                                    </Col>\r\n                                                    <Col />\r\n                                                </Row>\r\n                                                \r\n                                            </Form>\r\n                                            \r\n                                            <div className='buttonSide-auth'>\r\n                                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n\r\n                                                {/* <div className=\"submitButton-auth\" onClick={handleResetPin}>\r\n                                                    <div className=\"wordsButton-auth\">\r\n                                                        SUBMIT\r\n                                                    </div>\r\n                                                </div> */}\r\n\r\n                                                <div className=\"submitButton-auth\" onClick={handleResetPin}>\r\n                                                    <PikaButton \r\n                                                        title=\"SUBMIT\" \r\n                                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                                        handleClick={handleResetPin}\r\n                                                        >\r\n                                                    </PikaButton>\r\n                                                </div>\r\n\r\n                                            </div>\r\n        \r\n                                            <div className='bottomSide-auth'>\r\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                                <div className='reqSide-auth'>\r\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n\r\n                                            <div className=\"blankSpace\">\r\n\r\n                                            </div>\r\n\r\n                                            <div className='buttonSide-auth'>\r\n                                                <p className=\"linkWords\" onClick={backToHome}>KEMBALI KE HOME</p>\r\n                                            </div>\r\n        \r\n                                            <div className='bottomSide-auth'>\r\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                                <div className='reqSide-auth'>\r\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className='modalMenuDetail-auth' style={{\r\n                    display: props.isShowConfirmResetPin ? 'block' : 'none'\r\n                }} onClick={closeModal}\r\n                >\r\n                    <div className='modal-content-menudetail-auth' onClick={e => e.stopPropagation()}>\r\n                        {\r\n                            <span className='iconClose-auth' onClick={closeModal}>\r\n                                <img src={closeLogo} className='closeLogo-auth' alt='' />\r\n                            </span>\r\n                        }\r\n\r\n                        <div className='menuDetail-layout-auth'>\r\n                            <div className='menuContain-all-auth'>\r\n                                <img src={pikappLogo} className='menuimg-auth' alt='' />\r\n\r\n                                <div className='menu-detail-auth'>\r\n                                    {\r\n                                        !successStatus ?\r\n                                        <div className='menu-name-auth'>\r\n                                            Perbarui PIN Anda \r\n                                        </div>\r\n                                        :\r\n                                        <div className='menu-name-auth'>\r\n                                            PIN Anda Berhasil Diubah! \r\n                                        </div>\r\n                                    }\r\n\r\n                                    {\r\n                                        !successStatus ?\r\n                                        <div className='mob-menu-category-auth'>\r\n                                            Konfirmasi 6 digit nomor PIN baru Anda\r\n                                        </div>\r\n                                        :\r\n                                        <div className='mob-menu-category-auth'>\r\n                                            Silahkan lakukan login kembali untuk memesan\r\n                                        </div>\r\n\r\n                                    }\r\n\r\n                                    {\r\n                                        !successStatus ?\r\n                                        <div>\r\n                                            <Form>\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                        <PinInput\r\n                                                        length={6}\r\n                                                        focus\r\n                                                        // disabled\r\n                                                        secret\r\n                                                        ref={p => (pin => p)}\r\n                                                        type=\"number\"\r\n                                                        inputMode=\"numeric\"\r\n                                                        onChange={handleConfirmResetPin}\r\n                                                        />\r\n                                                        <div></div>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                                <Row>\r\n                                                    <Col xs={11}>\r\n                                                    {isValid || (\r\n                                                        <Alert variant=\"danger\">{errorMsg}</Alert>\r\n                                                    )}\r\n                                                    </Col>\r\n                                                    <Col />\r\n                                                </Row>\r\n                                                \r\n                                            </Form>\r\n                                            \r\n                                            <div className='buttonSide-auth'>\r\n                                                <p className=\"linkWords\" onClick={closeModal}>KEMBALI</p>\r\n\r\n                                                {/* <div className=\"submitButton-auth\" onClick={handleResetPin}>\r\n                                                    <div className=\"wordsButton-auth\">\r\n                                                        SUBMIT\r\n                                                    </div>\r\n                                                </div> */}\r\n\r\n                                                <div className=\"submitButton-auth\" onClick={handleResetPin}>\r\n                                                    <PikaButton \r\n                                                        title=\"SUBMIT\" \r\n                                                        buttonStyle=\"submitButton-auth wordsButton-auth\"\r\n                                                        handleClick={handleResetPin}\r\n                                                        >\r\n                                                    </PikaButton>\r\n                                                </div>\r\n\r\n                                            </div>\r\n        \r\n                                            <div className='bottomSide-auth'>\r\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                                <div className='reqSide-auth'>\r\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n\r\n                                            <div className='buttonSide-auth top270'>\r\n                                                <p className=\"linkWords\" onClick={backToHome}>KEMBALI KE HOME</p>\r\n                                            </div>\r\n        \r\n                                            <div className='bottomSide-auth'>\r\n                                                <h4 className='countrySide-auth'>Indonesia</h4>\r\n                                                <div className='reqSide-auth'>\r\n                                                    <h4 className='reqSideWord-auth'>Privasi</h4>\r\n                                                    <h4 className='reqSideWord-auth'>Persyaratan</h4>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfirmResetPinDialog","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Modal\\NotifModal.js",[],"D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Master\\FoodCourtQR.js",["301"],"import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Cookies from 'js-cookie'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst FoodCourt = (props) => {\r\n    let history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let fcadd = props.match.params.address\r\n        fcadd = fcadd.replace(/_/g, \" \")\r\n        localStorage.setItem('fctable', props.match.params.notab)\r\n        Cookies.set(\"fcaddress\", fcadd, { expires: 1 })\r\n        dispatch({ type: 'ISMERCHANTQR', payload: false });\r\n        history.push(\"/\");\r\n    }, []);\r\n\r\n    return <div></div>;\r\n};\r\n\r\nexport default FoodCourt\r\n","D:\\02 WORK\\PikApp\\Project\\frontend\\pikapp-frontend\\src\\Component\\Tour\\TourPage.js",["302"],{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","replacedBy":"306"},{"ruleId":"307","severity":1,"message":"308","line":1,"column":28,"nodeType":"309","messageId":"310","endLine":1,"endColumn":34},{"ruleId":"311","severity":1,"message":"312","line":31,"column":6,"nodeType":"313","endLine":31,"endColumn":8,"suggestions":"314"},{"ruleId":"307","severity":1,"message":"315","line":5,"column":5,"nodeType":"309","messageId":"310","endLine":5,"endColumn":15},{"ruleId":"307","severity":1,"message":"316","line":9,"column":5,"nodeType":"309","messageId":"310","endLine":9,"endColumn":17},{"ruleId":"307","severity":1,"message":"317","line":12,"column":5,"nodeType":"309","messageId":"310","endLine":12,"endColumn":18},{"ruleId":"318","severity":1,"message":"319","line":143,"column":42,"nodeType":"320","messageId":"321","endLine":143,"endColumn":44},{"ruleId":"318","severity":1,"message":"319","line":145,"column":53,"nodeType":"320","messageId":"321","endLine":145,"endColumn":55},{"ruleId":"318","severity":1,"message":"319","line":308,"column":18,"nodeType":"320","messageId":"321","endLine":308,"endColumn":20},{"ruleId":"318","severity":1,"message":"319","line":320,"column":16,"nodeType":"320","messageId":"321","endLine":320,"endColumn":18},{"ruleId":"322","severity":1,"message":"323","line":797,"column":41,"nodeType":"324","messageId":"325","endLine":797,"endColumn":43},{"ruleId":"322","severity":1,"message":"326","line":854,"column":51,"nodeType":"324","messageId":"325","endLine":854,"endColumn":53},{"ruleId":"322","severity":1,"message":"326","line":879,"column":45,"nodeType":"324","messageId":"325","endLine":879,"endColumn":47},{"ruleId":"322","severity":1,"message":"326","line":426,"column":49,"nodeType":"324","messageId":"325","endLine":426,"endColumn":51},{"ruleId":"322","severity":1,"message":"326","line":504,"column":38,"nodeType":"324","messageId":"325","endLine":504,"endColumn":40},{"ruleId":"322","severity":1,"message":"326","line":589,"column":38,"nodeType":"324","messageId":"325","endLine":589,"endColumn":40},{"ruleId":"322","severity":1,"message":"326","line":674,"column":38,"nodeType":"324","messageId":"325","endLine":674,"endColumn":40},{"ruleId":"307","severity":1,"message":"327","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":16},{"ruleId":"318","severity":1,"message":"319","line":84,"column":43,"nodeType":"320","messageId":"321","endLine":84,"endColumn":45},{"ruleId":"303","replacedBy":"328"},{"ruleId":"305","replacedBy":"329"},{"ruleId":"322","severity":1,"message":"326","line":32,"column":66,"nodeType":"324","messageId":"325","endLine":32,"endColumn":68},{"ruleId":"330","severity":1,"message":"331","line":17,"column":1,"nodeType":"332","endLine":52,"endColumn":2},{"ruleId":"307","severity":1,"message":"333","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":26},{"ruleId":"307","severity":1,"message":"334","line":1,"column":28,"nodeType":"309","messageId":"310","endLine":1,"endColumn":36},{"ruleId":"307","severity":1,"message":"335","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":16},{"ruleId":"307","severity":1,"message":"336","line":14,"column":8,"nodeType":"309","messageId":"310","endLine":14,"endColumn":20},{"ruleId":"307","severity":1,"message":"327","line":22,"column":8,"nodeType":"309","messageId":"310","endLine":22,"endColumn":16},{"ruleId":"318","severity":1,"message":"319","line":228,"column":39,"nodeType":"320","messageId":"321","endLine":228,"endColumn":41},{"ruleId":"318","severity":1,"message":"319","line":258,"column":39,"nodeType":"320","messageId":"321","endLine":258,"endColumn":41},{"ruleId":"318","severity":1,"message":"319","line":303,"column":53,"nodeType":"320","messageId":"321","endLine":303,"endColumn":55},{"ruleId":"318","severity":1,"message":"319","line":309,"column":59,"nodeType":"320","messageId":"321","endLine":309,"endColumn":61},{"ruleId":"318","severity":1,"message":"319","line":324,"column":53,"nodeType":"320","messageId":"321","endLine":324,"endColumn":55},{"ruleId":"318","severity":1,"message":"319","line":330,"column":59,"nodeType":"320","messageId":"321","endLine":330,"endColumn":61},{"ruleId":"318","severity":1,"message":"319","line":366,"column":20,"nodeType":"320","messageId":"321","endLine":366,"endColumn":22},{"ruleId":"318","severity":1,"message":"319","line":380,"column":21,"nodeType":"320","messageId":"321","endLine":380,"endColumn":23},{"ruleId":"318","severity":1,"message":"319","line":795,"column":31,"nodeType":"320","messageId":"321","endLine":795,"endColumn":33},{"ruleId":"307","severity":1,"message":"327","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":16},{"ruleId":"307","severity":1,"message":"337","line":203,"column":11,"nodeType":"309","messageId":"310","endLine":203,"endColumn":26},{"ruleId":"307","severity":1,"message":"338","line":12,"column":7,"nodeType":"309","messageId":"310","endLine":12,"endColumn":24},{"ruleId":"307","severity":1,"message":"339","line":17,"column":7,"nodeType":"309","messageId":"310","endLine":17,"endColumn":21},{"ruleId":"311","severity":1,"message":"340","line":174,"column":8,"nodeType":"313","endLine":174,"endColumn":10,"suggestions":"341"},{"ruleId":"311","severity":1,"message":"342","line":275,"column":8,"nodeType":"313","endLine":275,"endColumn":31,"suggestions":"343"},{"ruleId":"344","severity":1,"message":"345","line":293,"column":192,"nodeType":"320","messageId":"346","endLine":293,"endColumn":193},{"ruleId":"347","severity":1,"message":"348","line":293,"column":404,"nodeType":"349","endLine":293,"endColumn":438},{"ruleId":"344","severity":1,"message":"345","line":309,"column":188,"nodeType":"320","messageId":"346","endLine":309,"endColumn":189},{"ruleId":"347","severity":1,"message":"348","line":309,"column":400,"nodeType":"349","endLine":309,"endColumn":434},{"ruleId":"307","severity":1,"message":"350","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":17},{"ruleId":"307","severity":1,"message":"351","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":18},{"ruleId":"307","severity":1,"message":"352","line":8,"column":8,"nodeType":"309","messageId":"310","endLine":8,"endColumn":18},{"ruleId":"307","severity":1,"message":"353","line":9,"column":8,"nodeType":"309","messageId":"310","endLine":9,"endColumn":21},{"ruleId":"307","severity":1,"message":"354","line":19,"column":12,"nodeType":"309","messageId":"310","endLine":19,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":19,"column":23,"nodeType":"309","messageId":"310","endLine":19,"endColumn":35},{"ruleId":"307","severity":1,"message":"356","line":29,"column":11,"nodeType":"309","messageId":"310","endLine":29,"endColumn":20},{"ruleId":"307","severity":1,"message":"357","line":61,"column":11,"nodeType":"309","messageId":"310","endLine":61,"endColumn":24},{"ruleId":"307","severity":1,"message":"352","line":8,"column":8,"nodeType":"309","messageId":"310","endLine":8,"endColumn":18},{"ruleId":"307","severity":1,"message":"353","line":9,"column":8,"nodeType":"309","messageId":"310","endLine":9,"endColumn":21},{"ruleId":"307","severity":1,"message":"358","line":19,"column":11,"nodeType":"309","messageId":"310","endLine":19,"endColumn":19},{"ruleId":"307","severity":1,"message":"355","line":28,"column":23,"nodeType":"309","messageId":"310","endLine":28,"endColumn":35},{"ruleId":"307","severity":1,"message":"359","line":29,"column":12,"nodeType":"309","messageId":"310","endLine":29,"endColumn":26},{"ruleId":"307","severity":1,"message":"360","line":29,"column":28,"nodeType":"309","messageId":"310","endLine":29,"endColumn":45},{"ruleId":"307","severity":1,"message":"361","line":31,"column":12,"nodeType":"309","messageId":"310","endLine":31,"endColumn":15},{"ruleId":"307","severity":1,"message":"362","line":31,"column":17,"nodeType":"309","messageId":"310","endLine":31,"endColumn":23},{"ruleId":"307","severity":1,"message":"363","line":32,"column":12,"nodeType":"309","messageId":"310","endLine":32,"endColumn":15},{"ruleId":"307","severity":1,"message":"364","line":32,"column":17,"nodeType":"309","messageId":"310","endLine":32,"endColumn":23},{"ruleId":"307","severity":1,"message":"356","line":48,"column":11,"nodeType":"309","messageId":"310","endLine":48,"endColumn":20},{"ruleId":"307","severity":1,"message":"365","line":64,"column":11,"nodeType":"309","messageId":"310","endLine":64,"endColumn":26},{"ruleId":"307","severity":1,"message":"357","line":107,"column":11,"nodeType":"309","messageId":"310","endLine":107,"endColumn":24},{"ruleId":"307","severity":1,"message":"350","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":17},{"ruleId":"307","severity":1,"message":"351","line":7,"column":8,"nodeType":"309","messageId":"310","endLine":7,"endColumn":18},{"ruleId":"307","severity":1,"message":"366","line":16,"column":8,"nodeType":"309","messageId":"310","endLine":16,"endColumn":14},{"ruleId":"307","severity":1,"message":"354","line":27,"column":12,"nodeType":"309","messageId":"310","endLine":27,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":27,"column":23,"nodeType":"309","messageId":"310","endLine":27,"endColumn":35},{"ruleId":"307","severity":1,"message":"367","line":29,"column":12,"nodeType":"309","messageId":"310","endLine":29,"endColumn":23},{"ruleId":"307","severity":1,"message":"356","line":41,"column":11,"nodeType":"309","messageId":"310","endLine":41,"endColumn":20},{"ruleId":"307","severity":1,"message":"368","line":124,"column":21,"nodeType":"309","messageId":"310","endLine":124,"endColumn":29},{"ruleId":"307","severity":1,"message":"369","line":125,"column":21,"nodeType":"309","messageId":"310","endLine":125,"endColumn":30},{"ruleId":"307","severity":1,"message":"370","line":153,"column":11,"nodeType":"309","messageId":"310","endLine":153,"endColumn":31},{"ruleId":"307","severity":1,"message":"371","line":170,"column":11,"nodeType":"309","messageId":"310","endLine":170,"endColumn":30},{"ruleId":"307","severity":1,"message":"350","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":17},{"ruleId":"307","severity":1,"message":"351","line":7,"column":8,"nodeType":"309","messageId":"310","endLine":7,"endColumn":18},{"ruleId":"307","severity":1,"message":"372","line":11,"column":8,"nodeType":"309","messageId":"310","endLine":11,"endColumn":19},{"ruleId":"307","severity":1,"message":"373","line":21,"column":12,"nodeType":"309","messageId":"310","endLine":21,"endColumn":23},{"ruleId":"307","severity":1,"message":"374","line":21,"column":25,"nodeType":"309","messageId":"310","endLine":21,"endColumn":33},{"ruleId":"307","severity":1,"message":"354","line":24,"column":12,"nodeType":"309","messageId":"310","endLine":24,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":24,"column":23,"nodeType":"309","messageId":"310","endLine":24,"endColumn":35},{"ruleId":"307","severity":1,"message":"356","line":36,"column":11,"nodeType":"309","messageId":"310","endLine":36,"endColumn":20},{"ruleId":"307","severity":1,"message":"368","line":157,"column":17,"nodeType":"309","messageId":"310","endLine":157,"endColumn":25},{"ruleId":"307","severity":1,"message":"369","line":158,"column":17,"nodeType":"309","messageId":"310","endLine":158,"endColumn":26},{"ruleId":"307","severity":1,"message":"350","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":17},{"ruleId":"307","severity":1,"message":"351","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":18},{"ruleId":"307","severity":1,"message":"354","line":20,"column":12,"nodeType":"309","messageId":"310","endLine":20,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":20,"column":23,"nodeType":"309","messageId":"310","endLine":20,"endColumn":35},{"ruleId":"307","severity":1,"message":"356","line":30,"column":11,"nodeType":"309","messageId":"310","endLine":30,"endColumn":20},{"ruleId":"330","severity":1,"message":"331","line":11,"column":1,"nodeType":"332","endLine":30,"endColumn":2},{"ruleId":"307","severity":1,"message":"333","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":26},{"ruleId":"307","severity":1,"message":"308","line":1,"column":28,"nodeType":"309","messageId":"310","endLine":1,"endColumn":34},{"ruleId":"307","severity":1,"message":"375","line":5,"column":10,"nodeType":"309","messageId":"310","endLine":5,"endColumn":19},{"ruleId":"307","severity":1,"message":"352","line":9,"column":8,"nodeType":"309","messageId":"310","endLine":9,"endColumn":18},{"ruleId":"307","severity":1,"message":"358","line":15,"column":11,"nodeType":"309","messageId":"310","endLine":15,"endColumn":19},{"ruleId":"307","severity":1,"message":"354","line":19,"column":12,"nodeType":"309","messageId":"310","endLine":19,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":19,"column":23,"nodeType":"309","messageId":"310","endLine":19,"endColumn":35},{"ruleId":"307","severity":1,"message":"356","line":30,"column":11,"nodeType":"309","messageId":"310","endLine":30,"endColumn":20},{"ruleId":"307","severity":1,"message":"376","line":12,"column":8,"nodeType":"309","messageId":"310","endLine":12,"endColumn":12},{"ruleId":"307","severity":1,"message":"354","line":22,"column":12,"nodeType":"309","messageId":"310","endLine":22,"endColumn":21},{"ruleId":"307","severity":1,"message":"355","line":22,"column":23,"nodeType":"309","messageId":"310","endLine":22,"endColumn":35},{"ruleId":"307","severity":1,"message":"356","line":34,"column":11,"nodeType":"309","messageId":"310","endLine":34,"endColumn":20},{"ruleId":"311","severity":1,"message":"377","line":17,"column":8,"nodeType":"313","endLine":17,"endColumn":10,"suggestions":"378"},{"ruleId":"307","severity":1,"message":"334","line":1,"column":16,"nodeType":"309","messageId":"310","endLine":1,"endColumn":24},"no-native-reassign",["379"],"no-negated-in-lhs",["380"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.match.params.address'. Either include them or remove the dependency array.","ArrayExpression",["381"],"'secretProd' is assigned a value but never used.","'clientIdProd' is assigned a value but never used.","'googleKeyProd' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'StarIcon' is defined but never used.",["379"],["380"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'useState' is defined but never used.","'cartIcon' is defined but never used.","'Productimage' is defined but never used.","'closeAuthDialog' is assigned a value but never used.","'checkboxDummyData' is assigned a value but never used.","'radioDummyData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'dispatch', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["382"],"React Hook useEffect has missing dependencies: 'AllRedu.openMenuCart', 'checkboxData', 'props.datas.foodListCheckbox', 'props.datas.foodListRadio', 'radioData', and 'updateDataEdit'. Either include them or remove the dependency array.",["383"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'closeLogo' is defined but never used.","'pikappLogo' is defined but never used.","'PikaButton' is defined but never used.","'PikaTextField' is defined but never used.","'isCaptcha' is assigned a value but never used.","'setIsCaptcha' is assigned a value but never used.","'backModal' is assigned a value but never used.","'showPinDialog' is assigned a value but never used.","'AuthRedu' is assigned a value but never used.","'captchaCounter' is assigned a value but never used.","'setCaptchaCounter' is assigned a value but never used.","'lat' is assigned a value but never used.","'setLat' is assigned a value but never used.","'lon' is assigned a value but never used.","'setLon' is assigned a value but never used.","'showLoginDialog' is assigned a value but never used.","'Button' is defined but never used.","'isLoginStep' is assigned a value but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'showConfirmPinDialog' is assigned a value but never used.","'showForgotPinDialog' is assigned a value but never used.","'LoginDialog' is defined but never used.","'loginDialog' is assigned a value but never used.","'setLogin' is assigned a value but never used.","'useParams' is defined but never used.","'Swal' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', 'props.match.params.address', and 'props.match.params.notab'. Either include them or remove the dependency array.",["384"],"no-global-assign","no-unsafe-negation",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},"Update the dependencies array to be: [dispatch, props.match.params.address]",{"range":"393","text":"394"},"Update the dependencies array to be: [AllRedu.openMenuCart, dispatch, props]",{"range":"395","text":"396"},"Update the dependencies array to be: [radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, radioData]",{"range":"397","text":"398"},"Update the dependencies array to be: [dispatch, history, props.match.params.address, props.match.params.notab]",{"range":"399","text":"400"},[1074,1076],"[dispatch, props.match.params.address]",[7679,7681],"[AllRedu.openMenuCart, dispatch, props]",[12261,12284],"[radioVal, checkboxVal, AllRedu.openMenuCart, updateDataEdit, props.datas.foodListCheckbox, props.datas.foodListRadio, checkboxData, radioData]",[609,611],"[dispatch, history, props.match.params.address, props.match.params.notab]"]
>>>>>>> 05b39833f1fc7546b3e54a5230cf262a25c95007
